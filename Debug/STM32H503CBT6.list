
STM32H503CBT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfc0  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006b8  0800c218  0800c218  0000d218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8d0  0800c8d0  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8d0  0800c8d0  0000d8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8d8  0800c8d8  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8d8  0800c8d8  0000d8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c8dc  0800c8dc  0000d8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c8e0  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  200001e8  0800cac8  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  0800cac8  0000e618  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012dd3  00000000  00000000  0000e21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024cc  00000000  00000000  00020ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e38  00000000  00000000  000234c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afb  00000000  00000000  000242f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000386f  00000000  00000000  00024df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141bd  00000000  00000000  00028662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d32dc  00000000  00000000  0003c81f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fafb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005248  00000000  00000000  0010fb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00114d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	200001e8 	.word	0x200001e8
 8000274:	00000000 	.word	0x00000000
 8000278:	0800c200 	.word	0x0800c200

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	200001ec 	.word	0x200001ec
 8000294:	0800c200 	.word	0x0800c200

08000298 <strlen>:
 8000298:	4603      	mov	r3, r0
 800029a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029e:	2a00      	cmp	r2, #0
 80002a0:	d1fb      	bne.n	800029a <strlen+0x2>
 80002a2:	1a18      	subs	r0, r3, r0
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr

080002a8 <__aeabi_drsub>:
 80002a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002ac:	e002      	b.n	80002b4 <__adddf3>
 80002ae:	bf00      	nop

080002b0 <__aeabi_dsub>:
 80002b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002b4 <__adddf3>:
 80002b4:	b530      	push	{r4, r5, lr}
 80002b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002be:	ea94 0f05 	teq	r4, r5
 80002c2:	bf08      	it	eq
 80002c4:	ea90 0f02 	teqeq	r0, r2
 80002c8:	bf1f      	itttt	ne
 80002ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002da:	f000 80e2 	beq.w	80004a2 <__adddf3+0x1ee>
 80002de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002e6:	bfb8      	it	lt
 80002e8:	426d      	neglt	r5, r5
 80002ea:	dd0c      	ble.n	8000306 <__adddf3+0x52>
 80002ec:	442c      	add	r4, r5
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	ea82 0000 	eor.w	r0, r2, r0
 80002fa:	ea83 0101 	eor.w	r1, r3, r1
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	2d36      	cmp	r5, #54	@ 0x36
 8000308:	bf88      	it	hi
 800030a:	bd30      	pophi	{r4, r5, pc}
 800030c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000310:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000314:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000318:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x70>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000328:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800032c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000330:	d002      	beq.n	8000338 <__adddf3+0x84>
 8000332:	4252      	negs	r2, r2
 8000334:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000338:	ea94 0f05 	teq	r4, r5
 800033c:	f000 80a7 	beq.w	800048e <__adddf3+0x1da>
 8000340:	f1a4 0401 	sub.w	r4, r4, #1
 8000344:	f1d5 0e20 	rsbs	lr, r5, #32
 8000348:	db0d      	blt.n	8000366 <__adddf3+0xb2>
 800034a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800034e:	fa22 f205 	lsr.w	r2, r2, r5
 8000352:	1880      	adds	r0, r0, r2
 8000354:	f141 0100 	adc.w	r1, r1, #0
 8000358:	fa03 f20e 	lsl.w	r2, r3, lr
 800035c:	1880      	adds	r0, r0, r2
 800035e:	fa43 f305 	asr.w	r3, r3, r5
 8000362:	4159      	adcs	r1, r3
 8000364:	e00e      	b.n	8000384 <__adddf3+0xd0>
 8000366:	f1a5 0520 	sub.w	r5, r5, #32
 800036a:	f10e 0e20 	add.w	lr, lr, #32
 800036e:	2a01      	cmp	r2, #1
 8000370:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000374:	bf28      	it	cs
 8000376:	f04c 0c02 	orrcs.w	ip, ip, #2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	18c0      	adds	r0, r0, r3
 8000380:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000384:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000388:	d507      	bpl.n	800039a <__adddf3+0xe6>
 800038a:	f04f 0e00 	mov.w	lr, #0
 800038e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000392:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000396:	eb6e 0101 	sbc.w	r1, lr, r1
 800039a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800039e:	d31b      	bcc.n	80003d8 <__adddf3+0x124>
 80003a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003a4:	d30c      	bcc.n	80003c0 <__adddf3+0x10c>
 80003a6:	0849      	lsrs	r1, r1, #1
 80003a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b0:	f104 0401 	add.w	r4, r4, #1
 80003b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003bc:	f080 809a 	bcs.w	80004f4 <__adddf3+0x240>
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	bf08      	it	eq
 80003c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ca:	f150 0000 	adcs.w	r0, r0, #0
 80003ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003d2:	ea41 0105 	orr.w	r1, r1, r5
 80003d6:	bd30      	pop	{r4, r5, pc}
 80003d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003dc:	4140      	adcs	r0, r0
 80003de:	eb41 0101 	adc.w	r1, r1, r1
 80003e2:	3c01      	subs	r4, #1
 80003e4:	bf28      	it	cs
 80003e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ea:	d2e9      	bcs.n	80003c0 <__adddf3+0x10c>
 80003ec:	f091 0f00 	teq	r1, #0
 80003f0:	bf04      	itt	eq
 80003f2:	4601      	moveq	r1, r0
 80003f4:	2000      	moveq	r0, #0
 80003f6:	fab1 f381 	clz	r3, r1
 80003fa:	bf08      	it	eq
 80003fc:	3320      	addeq	r3, #32
 80003fe:	f1a3 030b 	sub.w	r3, r3, #11
 8000402:	f1b3 0220 	subs.w	r2, r3, #32
 8000406:	da0c      	bge.n	8000422 <__adddf3+0x16e>
 8000408:	320c      	adds	r2, #12
 800040a:	dd08      	ble.n	800041e <__adddf3+0x16a>
 800040c:	f102 0c14 	add.w	ip, r2, #20
 8000410:	f1c2 020c 	rsb	r2, r2, #12
 8000414:	fa01 f00c 	lsl.w	r0, r1, ip
 8000418:	fa21 f102 	lsr.w	r1, r1, r2
 800041c:	e00c      	b.n	8000438 <__adddf3+0x184>
 800041e:	f102 0214 	add.w	r2, r2, #20
 8000422:	bfd8      	it	le
 8000424:	f1c2 0c20 	rsble	ip, r2, #32
 8000428:	fa01 f102 	lsl.w	r1, r1, r2
 800042c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000430:	bfdc      	itt	le
 8000432:	ea41 010c 	orrle.w	r1, r1, ip
 8000436:	4090      	lslle	r0, r2
 8000438:	1ae4      	subs	r4, r4, r3
 800043a:	bfa2      	ittt	ge
 800043c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000440:	4329      	orrge	r1, r5
 8000442:	bd30      	popge	{r4, r5, pc}
 8000444:	ea6f 0404 	mvn.w	r4, r4
 8000448:	3c1f      	subs	r4, #31
 800044a:	da1c      	bge.n	8000486 <__adddf3+0x1d2>
 800044c:	340c      	adds	r4, #12
 800044e:	dc0e      	bgt.n	800046e <__adddf3+0x1ba>
 8000450:	f104 0414 	add.w	r4, r4, #20
 8000454:	f1c4 0220 	rsb	r2, r4, #32
 8000458:	fa20 f004 	lsr.w	r0, r0, r4
 800045c:	fa01 f302 	lsl.w	r3, r1, r2
 8000460:	ea40 0003 	orr.w	r0, r0, r3
 8000464:	fa21 f304 	lsr.w	r3, r1, r4
 8000468:	ea45 0103 	orr.w	r1, r5, r3
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f1c4 040c 	rsb	r4, r4, #12
 8000472:	f1c4 0220 	rsb	r2, r4, #32
 8000476:	fa20 f002 	lsr.w	r0, r0, r2
 800047a:	fa01 f304 	lsl.w	r3, r1, r4
 800047e:	ea40 0003 	orr.w	r0, r0, r3
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	fa21 f004 	lsr.w	r0, r1, r4
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f094 0f00 	teq	r4, #0
 8000492:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000496:	bf06      	itte	eq
 8000498:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800049c:	3401      	addeq	r4, #1
 800049e:	3d01      	subne	r5, #1
 80004a0:	e74e      	b.n	8000340 <__adddf3+0x8c>
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf18      	it	ne
 80004a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ac:	d029      	beq.n	8000502 <__adddf3+0x24e>
 80004ae:	ea94 0f05 	teq	r4, r5
 80004b2:	bf08      	it	eq
 80004b4:	ea90 0f02 	teqeq	r0, r2
 80004b8:	d005      	beq.n	80004c6 <__adddf3+0x212>
 80004ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80004be:	bf04      	itt	eq
 80004c0:	4619      	moveq	r1, r3
 80004c2:	4610      	moveq	r0, r2
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	ea91 0f03 	teq	r1, r3
 80004ca:	bf1e      	ittt	ne
 80004cc:	2100      	movne	r1, #0
 80004ce:	2000      	movne	r0, #0
 80004d0:	bd30      	popne	{r4, r5, pc}
 80004d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004d6:	d105      	bne.n	80004e4 <__adddf3+0x230>
 80004d8:	0040      	lsls	r0, r0, #1
 80004da:	4149      	adcs	r1, r1
 80004dc:	bf28      	it	cs
 80004de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004e2:	bd30      	pop	{r4, r5, pc}
 80004e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e8:	bf3c      	itt	cc
 80004ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ee:	bd30      	popcc	{r4, r5, pc}
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004fc:	f04f 0000 	mov.w	r0, #0
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000506:	bf1a      	itte	ne
 8000508:	4619      	movne	r1, r3
 800050a:	4610      	movne	r0, r2
 800050c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000510:	bf1c      	itt	ne
 8000512:	460b      	movne	r3, r1
 8000514:	4602      	movne	r2, r0
 8000516:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800051a:	bf06      	itte	eq
 800051c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000520:	ea91 0f03 	teqeq	r1, r3
 8000524:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	bf00      	nop

0800052c <__aeabi_ui2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f04f 0500 	mov.w	r5, #0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e750      	b.n	80003ec <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_i2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000564:	bf48      	it	mi
 8000566:	4240      	negmi	r0, r0
 8000568:	f04f 0100 	mov.w	r1, #0
 800056c:	e73e      	b.n	80003ec <__adddf3+0x138>
 800056e:	bf00      	nop

08000570 <__aeabi_f2d>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000576:	ea4f 0131 	mov.w	r1, r1, rrx
 800057a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800057e:	bf1f      	itttt	ne
 8000580:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000584:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000588:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800058c:	4770      	bxne	lr
 800058e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000592:	bf08      	it	eq
 8000594:	4770      	bxeq	lr
 8000596:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800059a:	bf04      	itt	eq
 800059c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b0:	e71c      	b.n	80003ec <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aed8 	beq.w	800039a <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6bd      	b.n	800039a <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b9b4 	b.w	8001030 <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f83c 	bl	8000d4c <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__aeabi_d2lz>:
 8000ce0:	b538      	push	{r3, r4, r5, lr}
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4604      	mov	r4, r0
 8000ce8:	460d      	mov	r5, r1
 8000cea:	f7ff ff0b 	bl	8000b04 <__aeabi_dcmplt>
 8000cee:	b928      	cbnz	r0, 8000cfc <__aeabi_d2lz+0x1c>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf8:	f000 b80a 	b.w	8000d10 <__aeabi_d2ulz>
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d02:	f000 f805 	bl	8000d10 <__aeabi_d2ulz>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	bd38      	pop	{r3, r4, r5, pc}
 8000d0e:	bf00      	nop

08000d10 <__aeabi_d2ulz>:
 8000d10:	b5d0      	push	{r4, r6, r7, lr}
 8000d12:	2200      	movs	r2, #0
 8000d14:	4b0b      	ldr	r3, [pc, #44]	@ (8000d44 <__aeabi_d2ulz+0x34>)
 8000d16:	4606      	mov	r6, r0
 8000d18:	460f      	mov	r7, r1
 8000d1a:	f7ff fc81 	bl	8000620 <__aeabi_dmul>
 8000d1e:	f7ff ff57 	bl	8000bd0 <__aeabi_d2uiz>
 8000d22:	4604      	mov	r4, r0
 8000d24:	f7ff fc02 	bl	800052c <__aeabi_ui2d>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b07      	ldr	r3, [pc, #28]	@ (8000d48 <__aeabi_d2ulz+0x38>)
 8000d2c:	f7ff fc78 	bl	8000620 <__aeabi_dmul>
 8000d30:	4602      	mov	r2, r0
 8000d32:	460b      	mov	r3, r1
 8000d34:	4630      	mov	r0, r6
 8000d36:	4639      	mov	r1, r7
 8000d38:	f7ff faba 	bl	80002b0 <__aeabi_dsub>
 8000d3c:	f7ff ff48 	bl	8000bd0 <__aeabi_d2uiz>
 8000d40:	4621      	mov	r1, r4
 8000d42:	bdd0      	pop	{r4, r6, r7, pc}
 8000d44:	3df00000 	.word	0x3df00000
 8000d48:	41f00000 	.word	0x41f00000

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d50:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000d52:	460c      	mov	r4, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d14d      	bne.n	8000df4 <__udivmoddi4+0xa8>
 8000d58:	428a      	cmp	r2, r1
 8000d5a:	460f      	mov	r7, r1
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4696      	mov	lr, r2
 8000d60:	fab2 f382 	clz	r3, r2
 8000d64:	d960      	bls.n	8000e28 <__udivmoddi4+0xdc>
 8000d66:	b14b      	cbz	r3, 8000d7c <__udivmoddi4+0x30>
 8000d68:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d6c:	f1c3 0220 	rsb	r2, r3, #32
 8000d70:	409f      	lsls	r7, r3
 8000d72:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d76:	fa20 f202 	lsr.w	r2, r0, r2
 8000d7a:	4317      	orrs	r7, r2
 8000d7c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d80:	fa1f f48e 	uxth.w	r4, lr
 8000d84:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d88:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d8c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d90:	fb01 f004 	mul.w	r0, r1, r4
 8000d94:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d98:	4290      	cmp	r0, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x62>
 8000d9c:	eb1e 0202 	adds.w	r2, lr, r2
 8000da0:	f101 37ff 	add.w	r7, r1, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x60>
 8000da6:	4290      	cmp	r0, r2
 8000da8:	f200 812d 	bhi.w	8001006 <__udivmoddi4+0x2ba>
 8000dac:	4639      	mov	r1, r7
 8000dae:	1a12      	subs	r2, r2, r0
 8000db0:	fa1f fc8c 	uxth.w	ip, ip
 8000db4:	fbb2 f0f6 	udiv	r0, r2, r6
 8000db8:	fb06 2210 	mls	r2, r6, r0, r2
 8000dbc:	fb00 f404 	mul.w	r4, r0, r4
 8000dc0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000dc4:	4564      	cmp	r4, ip
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x8e>
 8000dc8:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000dcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd0:	d202      	bcs.n	8000dd8 <__udivmoddi4+0x8c>
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	f200 811a 	bhi.w	800100c <__udivmoddi4+0x2c0>
 8000dd8:	4610      	mov	r0, r2
 8000dda:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dde:	ebac 0c04 	sub.w	ip, ip, r4
 8000de2:	2100      	movs	r1, #0
 8000de4:	b125      	cbz	r5, 8000df0 <__udivmoddi4+0xa4>
 8000de6:	fa2c f303 	lsr.w	r3, ip, r3
 8000dea:	2200      	movs	r2, #0
 8000dec:	e9c5 3200 	strd	r3, r2, [r5]
 8000df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d905      	bls.n	8000e04 <__udivmoddi4+0xb8>
 8000df8:	b10d      	cbz	r5, 8000dfe <__udivmoddi4+0xb2>
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4608      	mov	r0, r1
 8000e02:	e7f5      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e04:	fab3 f183 	clz	r1, r3
 8000e08:	2900      	cmp	r1, #0
 8000e0a:	d14d      	bne.n	8000ea8 <__udivmoddi4+0x15c>
 8000e0c:	42a3      	cmp	r3, r4
 8000e0e:	f0c0 80f2 	bcc.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e12:	4290      	cmp	r0, r2
 8000e14:	f080 80ef 	bcs.w	8000ff6 <__udivmoddi4+0x2aa>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0e6      	beq.n	8000df0 <__udivmoddi4+0xa4>
 8000e22:	e9c5 6300 	strd	r6, r3, [r5]
 8000e26:	e7e3      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f040 80a2 	bne.w	8000f72 <__udivmoddi4+0x226>
 8000e2e:	1a8a      	subs	r2, r1, r2
 8000e30:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000e34:	fa1f f68e 	uxth.w	r6, lr
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fbb2 f4f7 	udiv	r4, r2, r7
 8000e3e:	fb07 2014 	mls	r0, r7, r4, r2
 8000e42:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000e46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e4a:	fb06 f004 	mul.w	r0, r6, r4
 8000e4e:	4290      	cmp	r0, r2
 8000e50:	d90f      	bls.n	8000e72 <__udivmoddi4+0x126>
 8000e52:	eb1e 0202 	adds.w	r2, lr, r2
 8000e56:	f104 38ff 	add.w	r8, r4, #4294967295
 8000e5a:	bf2c      	ite	cs
 8000e5c:	f04f 0901 	movcs.w	r9, #1
 8000e60:	f04f 0900 	movcc.w	r9, #0
 8000e64:	4290      	cmp	r0, r2
 8000e66:	d903      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e68:	f1b9 0f00 	cmp.w	r9, #0
 8000e6c:	f000 80c8 	beq.w	8001000 <__udivmoddi4+0x2b4>
 8000e70:	4644      	mov	r4, r8
 8000e72:	1a12      	subs	r2, r2, r0
 8000e74:	fa1f fc8c 	uxth.w	ip, ip
 8000e78:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e7c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e80:	fb00 f606 	mul.w	r6, r0, r6
 8000e84:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e88:	4566      	cmp	r6, ip
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x152>
 8000e8c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e90:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e94:	d202      	bcs.n	8000e9c <__udivmoddi4+0x150>
 8000e96:	4566      	cmp	r6, ip
 8000e98:	f200 80bb 	bhi.w	8001012 <__udivmoddi4+0x2c6>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	ebac 0c06 	sub.w	ip, ip, r6
 8000ea2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ea6:	e79d      	b.n	8000de4 <__udivmoddi4+0x98>
 8000ea8:	f1c1 0620 	rsb	r6, r1, #32
 8000eac:	408b      	lsls	r3, r1
 8000eae:	fa04 fe01 	lsl.w	lr, r4, r1
 8000eb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000eb6:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eba:	40f4      	lsrs	r4, r6
 8000ebc:	408a      	lsls	r2, r1
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	ea4e 030c 	orr.w	r3, lr, ip
 8000ec4:	fa00 fe01 	lsl.w	lr, r0, r1
 8000ec8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ecc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed0:	fa1f fc87 	uxth.w	ip, r7
 8000ed4:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ed8:	fb08 4410 	mls	r4, r8, r0, r4
 8000edc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee0:	fb00 f90c 	mul.w	r9, r0, ip
 8000ee4:	45a1      	cmp	r9, r4
 8000ee6:	d90e      	bls.n	8000f06 <__udivmoddi4+0x1ba>
 8000ee8:	193c      	adds	r4, r7, r4
 8000eea:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eee:	bf2c      	ite	cs
 8000ef0:	f04f 0b01 	movcs.w	fp, #1
 8000ef4:	f04f 0b00 	movcc.w	fp, #0
 8000ef8:	45a1      	cmp	r9, r4
 8000efa:	d903      	bls.n	8000f04 <__udivmoddi4+0x1b8>
 8000efc:	f1bb 0f00 	cmp.w	fp, #0
 8000f00:	f000 8093 	beq.w	800102a <__udivmoddi4+0x2de>
 8000f04:	4650      	mov	r0, sl
 8000f06:	eba4 0409 	sub.w	r4, r4, r9
 8000f0a:	fa1f f983 	uxth.w	r9, r3
 8000f0e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000f12:	fb08 4413 	mls	r4, r8, r3, r4
 8000f16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d906      	bls.n	8000f30 <__udivmoddi4+0x1e4>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x1e2>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d87a      	bhi.n	8001024 <__udivmoddi4+0x2d8>
 8000f2e:	4643      	mov	r3, r8
 8000f30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f34:	eba4 040c 	sub.w	r4, r4, ip
 8000f38:	fba0 9802 	umull	r9, r8, r0, r2
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	46cc      	mov	ip, r9
 8000f40:	4643      	mov	r3, r8
 8000f42:	d302      	bcc.n	8000f4a <__udivmoddi4+0x1fe>
 8000f44:	d106      	bne.n	8000f54 <__udivmoddi4+0x208>
 8000f46:	45ce      	cmp	lr, r9
 8000f48:	d204      	bcs.n	8000f54 <__udivmoddi4+0x208>
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	ebb9 0c02 	subs.w	ip, r9, r2
 8000f50:	eb68 0307 	sbc.w	r3, r8, r7
 8000f54:	b15d      	cbz	r5, 8000f6e <__udivmoddi4+0x222>
 8000f56:	ebbe 020c 	subs.w	r2, lr, ip
 8000f5a:	eb64 0403 	sbc.w	r4, r4, r3
 8000f5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000f62:	fa22 f301 	lsr.w	r3, r2, r1
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	431e      	orrs	r6, r3
 8000f6a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e73e      	b.n	8000df0 <__udivmoddi4+0xa4>
 8000f72:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f76:	f1c3 0120 	rsb	r1, r3, #32
 8000f7a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f7e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f82:	40cc      	lsrs	r4, r1
 8000f84:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f88:	fa20 f101 	lsr.w	r1, r0, r1
 8000f8c:	fa1f f68e 	uxth.w	r6, lr
 8000f90:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f94:	430a      	orrs	r2, r1
 8000f96:	fb07 4410 	mls	r4, r7, r0, r4
 8000f9a:	0c11      	lsrs	r1, r2, #16
 8000f9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000fa0:	fb00 f406 	mul.w	r4, r0, r6
 8000fa4:	428c      	cmp	r4, r1
 8000fa6:	d90e      	bls.n	8000fc6 <__udivmoddi4+0x27a>
 8000fa8:	eb1e 0101 	adds.w	r1, lr, r1
 8000fac:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb0:	bf2c      	ite	cs
 8000fb2:	f04f 0901 	movcs.w	r9, #1
 8000fb6:	f04f 0900 	movcc.w	r9, #0
 8000fba:	428c      	cmp	r4, r1
 8000fbc:	d902      	bls.n	8000fc4 <__udivmoddi4+0x278>
 8000fbe:	f1b9 0f00 	cmp.w	r9, #0
 8000fc2:	d02c      	beq.n	800101e <__udivmoddi4+0x2d2>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	1b09      	subs	r1, r1, r4
 8000fc8:	b292      	uxth	r2, r2
 8000fca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fce:	fb07 1114 	mls	r1, r7, r4, r1
 8000fd2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd6:	fb04 f106 	mul.w	r1, r4, r6
 8000fda:	4291      	cmp	r1, r2
 8000fdc:	d907      	bls.n	8000fee <__udivmoddi4+0x2a2>
 8000fde:	eb1e 0202 	adds.w	r2, lr, r2
 8000fe2:	f104 38ff 	add.w	r8, r4, #4294967295
 8000fe6:	d201      	bcs.n	8000fec <__udivmoddi4+0x2a0>
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d815      	bhi.n	8001018 <__udivmoddi4+0x2cc>
 8000fec:	4644      	mov	r4, r8
 8000fee:	1a52      	subs	r2, r2, r1
 8000ff0:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000ff4:	e721      	b.n	8000e3a <__udivmoddi4+0xee>
 8000ff6:	1a86      	subs	r6, r0, r2
 8000ff8:	eb64 0303 	sbc.w	r3, r4, r3
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	e70e      	b.n	8000e1e <__udivmoddi4+0xd2>
 8001000:	3c02      	subs	r4, #2
 8001002:	4472      	add	r2, lr
 8001004:	e735      	b.n	8000e72 <__udivmoddi4+0x126>
 8001006:	3902      	subs	r1, #2
 8001008:	4472      	add	r2, lr
 800100a:	e6d0      	b.n	8000dae <__udivmoddi4+0x62>
 800100c:	44f4      	add	ip, lr
 800100e:	3802      	subs	r0, #2
 8001010:	e6e3      	b.n	8000dda <__udivmoddi4+0x8e>
 8001012:	44f4      	add	ip, lr
 8001014:	3802      	subs	r0, #2
 8001016:	e742      	b.n	8000e9e <__udivmoddi4+0x152>
 8001018:	3c02      	subs	r4, #2
 800101a:	4472      	add	r2, lr
 800101c:	e7e7      	b.n	8000fee <__udivmoddi4+0x2a2>
 800101e:	3802      	subs	r0, #2
 8001020:	4471      	add	r1, lr
 8001022:	e7d0      	b.n	8000fc6 <__udivmoddi4+0x27a>
 8001024:	3b02      	subs	r3, #2
 8001026:	443c      	add	r4, r7
 8001028:	e782      	b.n	8000f30 <__udivmoddi4+0x1e4>
 800102a:	3802      	subs	r0, #2
 800102c:	443c      	add	r4, r7
 800102e:	e76a      	b.n	8000f06 <__udivmoddi4+0x1ba>

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <CS_Low>:
#define CS_PIN  GPIO_PIN_5
#define CS_PORT GPIOB

static float scale_multiplier = 0.000061f; // Default for ±2g

static void CS_Low(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001038:	2200      	movs	r2, #0
 800103a:	2120      	movs	r1, #32
 800103c:	4802      	ldr	r0, [pc, #8]	@ (8001048 <CS_Low+0x14>)
 800103e:	f001 fe09 	bl	8002c54 <HAL_GPIO_WritePin>
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	42020400 	.word	0x42020400

0800104c <CS_High>:

static void CS_High(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001050:	2201      	movs	r2, #1
 8001052:	2120      	movs	r1, #32
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <CS_High+0x14>)
 8001056:	f001 fdfd 	bl	8002c54 <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	42020400 	.word	0x42020400

08001064 <SPI_Write>:

static uint8_t SPI_Write(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t data) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
 8001070:	4613      	mov	r3, r2
 8001072:	70bb      	strb	r3, [r7, #2]
    uint8_t txData[2] = {reg & ~LIS2DW12_READ, data};
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800107a:	b2db      	uxtb	r3, r3
 800107c:	733b      	strb	r3, [r7, #12]
 800107e:	78bb      	ldrb	r3, [r7, #2]
 8001080:	737b      	strb	r3, [r7, #13]

    CS_Low();
 8001082:	f7ff ffd7 	bl	8001034 <CS_Low>
    HAL_SPI_Transmit(hspi, txData, 2, HAL_MAX_DELAY);
 8001086:	f107 010c 	add.w	r1, r7, #12
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	2202      	movs	r2, #2
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f004 ff3b 	bl	8005f0c <HAL_SPI_Transmit>
    CS_High();
 8001096:	f7ff ffd9 	bl	800104c <CS_High>

    return 1;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <SPI_Read>:

static uint8_t SPI_Read(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *data, uint16_t size) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	461a      	mov	r2, r3
 80010b0:	460b      	mov	r3, r1
 80010b2:	72fb      	strb	r3, [r7, #11]
 80010b4:	4613      	mov	r3, r2
 80010b6:	813b      	strh	r3, [r7, #8]
    uint8_t addr = reg | LIS2DW12_READ;
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	75fb      	strb	r3, [r7, #23]

    CS_Low();
 80010c2:	f7ff ffb7 	bl	8001034 <CS_Low>
    HAL_SPI_Transmit(hspi, &addr, 1, HAL_MAX_DELAY);
 80010c6:	f107 0117 	add.w	r1, r7, #23
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	2201      	movs	r2, #1
 80010d0:	68f8      	ldr	r0, [r7, #12]
 80010d2:	f004 ff1b 	bl	8005f0c <HAL_SPI_Transmit>
    HAL_SPI_Receive(hspi, data, size, HAL_MAX_DELAY);
 80010d6:	893a      	ldrh	r2, [r7, #8]
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	6879      	ldr	r1, [r7, #4]
 80010de:	68f8      	ldr	r0, [r7, #12]
 80010e0:	f005 f916 	bl	8006310 <HAL_SPI_Receive>
    CS_High();
 80010e4:	f7ff ffb2 	bl	800104c <CS_High>

    return 1;
 80010e8:	2301      	movs	r3, #1
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <LIS2DW12_Init>:

uint8_t LIS2DW12_Init(SPI_HandleTypeDef *hspi) {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    uint8_t id;
    uint8_t config;

    // Check device ID
    id = LIS2DW12_ReadID(hspi);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f90a 	bl	8001314 <LIS2DW12_ReadID>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
    if(id != LIS2DW12_ID) {
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b44      	cmp	r3, #68	@ 0x44
 8001108:	d001      	beq.n	800110e <LIS2DW12_Init+0x1c>
        return 0; // Error
 800110a:	2300      	movs	r3, #0
 800110c:	e01a      	b.n	8001144 <LIS2DW12_Init+0x52>
    }

    // Configure CTRL1 register
    // ODR = 100Hz, Low-power mode 1, X/Y/Z axes enabled
    config = 0x50 | 0x07;
 800110e:	2357      	movs	r3, #87	@ 0x57
 8001110:	73bb      	strb	r3, [r7, #14]
    if(!SPI_Write(hspi, LIS2DW12_CTRL1, config)) {
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	461a      	mov	r2, r3
 8001116:	2120      	movs	r1, #32
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ffa3 	bl	8001064 <SPI_Write>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <LIS2DW12_Init+0x36>
        return 0;
 8001124:	2300      	movs	r3, #0
 8001126:	e00d      	b.n	8001144 <LIS2DW12_Init+0x52>
    }

    // Configure CTRL6 register
    // ±2g scale, Low-noise enabled
    config = 0x04;
 8001128:	2304      	movs	r3, #4
 800112a:	73bb      	strb	r3, [r7, #14]
    if(!SPI_Write(hspi, LIS2DW12_CTRL6, config)) {
 800112c:	7bbb      	ldrb	r3, [r7, #14]
 800112e:	461a      	mov	r2, r3
 8001130:	2125      	movs	r1, #37	@ 0x25
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff96 	bl	8001064 <SPI_Write>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <LIS2DW12_Init+0x50>
        return 0;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <LIS2DW12_Init+0x52>
    }

    return 1;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <LIS2DW12_SetScale>:

uint8_t LIS2DW12_SetScale(SPI_HandleTypeDef *hspi, LIS2DW12_Scale_t scale) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
    uint8_t reg;

    if(!SPI_Read(hspi, LIS2DW12_CTRL6, &reg, 1)) {
 8001158:	f107 020f 	add.w	r2, r7, #15
 800115c:	2301      	movs	r3, #1
 800115e:	2125      	movs	r1, #37	@ 0x25
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff9f 	bl	80010a4 <SPI_Read>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d101      	bne.n	8001170 <LIS2DW12_SetScale+0x24>
        return 0;
 800116c:	2300      	movs	r3, #0
 800116e:	e038      	b.n	80011e2 <LIS2DW12_SetScale+0x96>
    }

    reg &= ~(0x03 << 4);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001176:	b2db      	uxtb	r3, r3
 8001178:	73fb      	strb	r3, [r7, #15]
    reg |= (scale << 4);
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	b25a      	sxtb	r2, r3
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	b25b      	sxtb	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b25b      	sxtb	r3, r3
 8001188:	b2db      	uxtb	r3, r3
 800118a:	73fb      	strb	r3, [r7, #15]

    if(!SPI_Write(hspi, LIS2DW12_CTRL6, reg)) {
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	461a      	mov	r2, r3
 8001190:	2125      	movs	r1, #37	@ 0x25
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff66 	bl	8001064 <SPI_Write>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <LIS2DW12_SetScale+0x56>
        return 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	e01f      	b.n	80011e2 <LIS2DW12_SetScale+0x96>
    }

    switch(scale) {
 80011a2:	78fb      	ldrb	r3, [r7, #3]
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d81b      	bhi.n	80011e0 <LIS2DW12_SetScale+0x94>
 80011a8:	a201      	add	r2, pc, #4	@ (adr r2, 80011b0 <LIS2DW12_SetScale+0x64>)
 80011aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ae:	bf00      	nop
 80011b0:	080011c1 	.word	0x080011c1
 80011b4:	080011c9 	.word	0x080011c9
 80011b8:	080011d1 	.word	0x080011d1
 80011bc:	080011d9 	.word	0x080011d9
        case LIS2DW12_2G:
            scale_multiplier = 0.000061f;
 80011c0:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <LIS2DW12_SetScale+0xa0>)
 80011c2:	4a0b      	ldr	r2, [pc, #44]	@ (80011f0 <LIS2DW12_SetScale+0xa4>)
 80011c4:	601a      	str	r2, [r3, #0]
            break;
 80011c6:	e00b      	b.n	80011e0 <LIS2DW12_SetScale+0x94>
        case LIS2DW12_4G:
            scale_multiplier = 0.000122f;
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <LIS2DW12_SetScale+0xa0>)
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <LIS2DW12_SetScale+0xa8>)
 80011cc:	601a      	str	r2, [r3, #0]
            break;
 80011ce:	e007      	b.n	80011e0 <LIS2DW12_SetScale+0x94>
        case LIS2DW12_8G:
            scale_multiplier = 0.000244f;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <LIS2DW12_SetScale+0xa0>)
 80011d2:	4a09      	ldr	r2, [pc, #36]	@ (80011f8 <LIS2DW12_SetScale+0xac>)
 80011d4:	601a      	str	r2, [r3, #0]
            break;
 80011d6:	e003      	b.n	80011e0 <LIS2DW12_SetScale+0x94>
        case LIS2DW12_16G:
            scale_multiplier = 0.000488f;
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <LIS2DW12_SetScale+0xa0>)
 80011da:	4a08      	ldr	r2, [pc, #32]	@ (80011fc <LIS2DW12_SetScale+0xb0>)
 80011dc:	601a      	str	r2, [r3, #0]
            break;
 80011de:	bf00      	nop
    }

    return 1;
 80011e0:	2301      	movs	r3, #1
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000000 	.word	0x20000000
 80011f0:	387fda40 	.word	0x387fda40
 80011f4:	38ffda40 	.word	0x38ffda40
 80011f8:	397fda40 	.word	0x397fda40
 80011fc:	39ffda40 	.word	0x39ffda40

08001200 <LIS2DW12_SetODR>:

uint8_t LIS2DW12_SetODR(SPI_HandleTypeDef *hspi, LIS2DW12_ODR_t odr) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	70fb      	strb	r3, [r7, #3]
    uint8_t reg;

    if(!SPI_Read(hspi, LIS2DW12_CTRL1, &reg, 1)) {
 800120c:	f107 020f 	add.w	r2, r7, #15
 8001210:	2301      	movs	r3, #1
 8001212:	2120      	movs	r1, #32
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff45 	bl	80010a4 <SPI_Read>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <LIS2DW12_SetODR+0x24>
        return 0;
 8001220:	2300      	movs	r3, #0
 8001222:	e019      	b.n	8001258 <LIS2DW12_SetODR+0x58>
    }

    reg &= ~(0x0F << 4);
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	b2db      	uxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
    reg |= (odr << 4);
 800122e:	78fb      	ldrb	r3, [r7, #3]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	b25a      	sxtb	r2, r3
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	b25b      	sxtb	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b25b      	sxtb	r3, r3
 800123c:	b2db      	uxtb	r3, r3
 800123e:	73fb      	strb	r3, [r7, #15]

    if(!SPI_Write(hspi, LIS2DW12_CTRL1, reg)) {
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	461a      	mov	r2, r3
 8001244:	2120      	movs	r1, #32
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff ff0c 	bl	8001064 <SPI_Write>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <LIS2DW12_SetODR+0x56>
        return 0;
 8001252:	2300      	movs	r3, #0
 8001254:	e000      	b.n	8001258 <LIS2DW12_SetODR+0x58>
    }

    return 1;
 8001256:	2301      	movs	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <LIS2DW12_ReadAccel>:

uint8_t LIS2DW12_ReadAccel(SPI_HandleTypeDef *hspi, LIS2DW12_Data_t *data) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
    uint8_t buffer[6];
    int16_t raw_data[3];

    if(!SPI_Read(hspi, LIS2DW12_OUT_X_L, buffer, 6)) {
 800126a:	f107 0210 	add.w	r2, r7, #16
 800126e:	2306      	movs	r3, #6
 8001270:	2128      	movs	r1, #40	@ 0x28
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff16 	bl	80010a4 <SPI_Read>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d101      	bne.n	8001282 <LIS2DW12_ReadAccel+0x22>
        return 0;
 800127e:	2300      	movs	r3, #0
 8001280:	e042      	b.n	8001308 <LIS2DW12_ReadAccel+0xa8>
    }

    raw_data[0] = (int16_t)((buffer[1] << 8) | buffer[0]);  // X-axis
 8001282:	7c7b      	ldrb	r3, [r7, #17]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7c3b      	ldrb	r3, [r7, #16]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21b      	sxth	r3, r3
 8001290:	813b      	strh	r3, [r7, #8]
    raw_data[1] = (int16_t)((buffer[3] << 8) | buffer[2]);  // Y-axis
 8001292:	7cfb      	ldrb	r3, [r7, #19]
 8001294:	021b      	lsls	r3, r3, #8
 8001296:	b21a      	sxth	r2, r3
 8001298:	7cbb      	ldrb	r3, [r7, #18]
 800129a:	b21b      	sxth	r3, r3
 800129c:	4313      	orrs	r3, r2
 800129e:	b21b      	sxth	r3, r3
 80012a0:	817b      	strh	r3, [r7, #10]
    raw_data[2] = (int16_t)((buffer[5] << 8) | buffer[4]);  // Z-axis
 80012a2:	7d7b      	ldrb	r3, [r7, #21]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	7d3b      	ldrb	r3, [r7, #20]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	b21b      	sxth	r3, r3
 80012b0:	81bb      	strh	r3, [r7, #12]

    data->x = (float)raw_data[0] * scale_multiplier;
 80012b2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012b6:	ee07 3a90 	vmov	s15, r3
 80012ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012be:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <LIS2DW12_ReadAccel+0xb0>)
 80012c0:	edd3 7a00 	vldr	s15, [r3]
 80012c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	edc3 7a00 	vstr	s15, [r3]
    data->y = (float)raw_data[1] * scale_multiplier;
 80012ce:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <LIS2DW12_ReadAccel+0xb0>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	edc3 7a01 	vstr	s15, [r3, #4]
    data->z = (float)raw_data[2] * scale_multiplier;
 80012ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <LIS2DW12_ReadAccel+0xb0>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	edc3 7a02 	vstr	s15, [r3, #8]

    return 1;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000000 	.word	0x20000000

08001314 <LIS2DW12_ReadID>:

uint8_t LIS2DW12_ReadID(SPI_HandleTypeDef *hspi) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    uint8_t id;

    if(!SPI_Read(hspi, LIS2DW12_WHO_AM_I, &id, 1)) {
 800131c:	f107 020f 	add.w	r2, r7, #15
 8001320:	2301      	movs	r3, #1
 8001322:	210f      	movs	r1, #15
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff febd 	bl	80010a4 <SPI_Read>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <LIS2DW12_ReadID+0x20>
        return 0;
 8001330:	2300      	movs	r3, #0
 8001332:	e000      	b.n	8001336 <LIS2DW12_ReadID+0x22>
    }

    return id;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <LIS2DW12_ReadTemp>:

uint8_t LIS2DW12_ReadTemp(SPI_HandleTypeDef *hspi, float *temp) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
    uint8_t buffer[2];
    int16_t raw_temp;
    if(!SPI_Read(hspi, LIS2DW12_OUT_T_L, buffer, 2)) {
 800134a:	f107 020c 	add.w	r2, r7, #12
 800134e:	2302      	movs	r3, #2
 8001350:	210d      	movs	r1, #13
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fea6 	bl	80010a4 <SPI_Read>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <LIS2DW12_ReadTemp+0x22>
        return 0;
 800135e:	2300      	movs	r3, #0
 8001360:	e018      	b.n	8001394 <LIS2DW12_ReadTemp+0x54>
    }
    raw_temp = (int16_t)((buffer[1] << 8) | buffer[0]);
 8001362:	7b7b      	ldrb	r3, [r7, #13]
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	b21a      	sxth	r2, r3
 8001368:	7b3b      	ldrb	r3, [r7, #12]
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	81fb      	strh	r3, [r7, #14]
    *temp = ((float)raw_temp) / 256.0f + 25.0f;
 8001370:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001374:	ee07 3a90 	vmov	s15, r3
 8001378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800137c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800139c <LIS2DW12_ReadTemp+0x5c>
 8001380:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001384:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001388:	ee77 7a87 	vadd.f32	s15, s15, s14
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	edc3 7a00 	vstr	s15, [r3]

    return 1;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	43800000 	.word	0x43800000

080013a0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(char ch) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 80013aa:	1df9      	adds	r1, r7, #7
 80013ac:	230a      	movs	r3, #10
 80013ae:	2201      	movs	r2, #1
 80013b0:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <__io_putchar+0x20>)
 80013b2:	f005 fa7a 	bl	80068aa <HAL_UART_Transmit>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000384 	.word	0x20000384
 80013c4:	00000000 	.word	0x00000000

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013cc:	b086      	sub	sp, #24
 80013ce:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d0:	f000 fe98 	bl	8002104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d4:	f000 f958 	bl	8001688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d8:	f000 fb34 	bl	8001a44 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 80013dc:	f000 f9c2 	bl	8001764 <MX_GPDMA1_Init>
  MX_SPI1_Init();
 80013e0:	f000 fa32 	bl	8001848 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80013e4:	f000 fa86 	bl	80018f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80013e8:	f000 fad0 	bl	800198c <MX_USART3_UART_Init>
  MX_SBS_Init();
 80013ec:	f000 fa24 	bl	8001838 <MX_SBS_Init>
  /* USER CODE BEGIN 2 */

	/* Initialize LIS2DW */
	printf("____________________________________ \n\r");
 80013f0:	488d      	ldr	r0, [pc, #564]	@ (8001628 <main+0x260>)
 80013f2:	f006 fec7 	bl	8008184 <iprintf>
	printf("**            STM32H503           ** \n\r");
 80013f6:	488d      	ldr	r0, [pc, #564]	@ (800162c <main+0x264>)
 80013f8:	f006 fec4 	bl	8008184 <iprintf>
	printf("Version: %s %s\n\r", __DATE__, __TIME__);
 80013fc:	4a8c      	ldr	r2, [pc, #560]	@ (8001630 <main+0x268>)
 80013fe:	498d      	ldr	r1, [pc, #564]	@ (8001634 <main+0x26c>)
 8001400:	488d      	ldr	r0, [pc, #564]	@ (8001638 <main+0x270>)
 8001402:	f006 febf 	bl	8008184 <iprintf>
	printf("____________________________________ \n\r");
 8001406:	4888      	ldr	r0, [pc, #544]	@ (8001628 <main+0x260>)
 8001408:	f006 febc 	bl	8008184 <iprintf>

	printf("Starting LIS2DW12 initialization.... \r\n");
 800140c:	488b      	ldr	r0, [pc, #556]	@ (800163c <main+0x274>)
 800140e:	f006 ff21 	bl	8008254 <puts>

	// Baca ID sensor
	HAL_Delay(500);
 8001412:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001416:	f000 ff33 	bl	8002280 <HAL_Delay>
	uint8_t sensor_id = LIS2DW12_ReadID(&hspi1);
 800141a:	4889      	ldr	r0, [pc, #548]	@ (8001640 <main+0x278>)
 800141c:	f7ff ff7a 	bl	8001314 <LIS2DW12_ReadID>
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
	printf("WHOAMI :  0x%02X\r\n", sensor_id);
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4619      	mov	r1, r3
 8001428:	4886      	ldr	r0, [pc, #536]	@ (8001644 <main+0x27c>)
 800142a:	f006 feab 	bl	8008184 <iprintf>

	if(sensor_id != LIS2DW12_ID) {
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b44      	cmp	r3, #68	@ 0x44
 8001432:	d004      	beq.n	800143e <main+0x76>
		printf("Error: Wrong sensor ID!\r\n");
 8001434:	4884      	ldr	r0, [pc, #528]	@ (8001648 <main+0x280>)
 8001436:	f006 ff0d 	bl	8008254 <puts>
		Error_Handler();
 800143a:	f000 fb6b 	bl	8001b14 <Error_Handler>
	}
	if(!LIS2DW12_Init(&hspi1)) {
 800143e:	4880      	ldr	r0, [pc, #512]	@ (8001640 <main+0x278>)
 8001440:	f7ff fe57 	bl	80010f2 <LIS2DW12_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d104      	bne.n	8001454 <main+0x8c>
		printf("Error: Sensor initialization failed!\r\n");
 800144a:	4880      	ldr	r0, [pc, #512]	@ (800164c <main+0x284>)
 800144c:	f006 ff02 	bl	8008254 <puts>
		Error_Handler();
 8001450:	f000 fb60 	bl	8001b14 <Error_Handler>
	}
	if(!LIS2DW12_SetScale(&hspi1, LIS2DW12_2G)) {
 8001454:	2100      	movs	r1, #0
 8001456:	487a      	ldr	r0, [pc, #488]	@ (8001640 <main+0x278>)
 8001458:	f7ff fe78 	bl	800114c <LIS2DW12_SetScale>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d104      	bne.n	800146c <main+0xa4>
		printf("Error: Failed to set scale!\r\n");
 8001462:	487b      	ldr	r0, [pc, #492]	@ (8001650 <main+0x288>)
 8001464:	f006 fef6 	bl	8008254 <puts>
		Error_Handler();
 8001468:	f000 fb54 	bl	8001b14 <Error_Handler>
	}
	if(!LIS2DW12_SetODR(&hspi1, LIS2DW12_ODR_100Hz)) {
 800146c:	2105      	movs	r1, #5
 800146e:	4874      	ldr	r0, [pc, #464]	@ (8001640 <main+0x278>)
 8001470:	f7ff fec6 	bl	8001200 <LIS2DW12_SetODR>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d104      	bne.n	8001484 <main+0xbc>
		printf("Error: Failed to set ODR!\r\n");
 800147a:	4876      	ldr	r0, [pc, #472]	@ (8001654 <main+0x28c>)
 800147c:	f006 feea 	bl	8008254 <puts>
		Error_Handler();
 8001480:	f000 fb48 	bl	8001b14 <Error_Handler>
	}

	printf("LIS2DW12 initialization successful!\r\n");
 8001484:	4874      	ldr	r0, [pc, #464]	@ (8001658 <main+0x290>)
 8001486:	f006 fee5 	bl	8008254 <puts>
	printf("Starting measurements............. \r\n");
 800148a:	4874      	ldr	r0, [pc, #464]	@ (800165c <main+0x294>)
 800148c:	f006 fee2 	bl	8008254 <puts>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(LIS2DW12_ReadAccel(&hspi1, &accel_data)) {
 8001490:	4973      	ldr	r1, [pc, #460]	@ (8001660 <main+0x298>)
 8001492:	486b      	ldr	r0, [pc, #428]	@ (8001640 <main+0x278>)
 8001494:	f7ff fee4 	bl	8001260 <LIS2DW12_ReadAccel>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80a5 	beq.w	80015ea <main+0x222>
			//			printf("X: %.3f g, Y: %.3f g, Z: %.3f g\r\n",
			//					accel_data.x, accel_data.y, accel_data.z);
			printf("X: %.3f | Y: %.3f | Z: %.3f \r\n",
					accel_data.x, accel_data.y, accel_data.z);
 80014a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001660 <main+0x298>)
 80014a2:	681b      	ldr	r3, [r3, #0]
			printf("X: %.3f | Y: %.3f | Z: %.3f \r\n",
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f863 	bl	8000570 <__aeabi_f2d>
 80014aa:	4680      	mov	r8, r0
 80014ac:	4689      	mov	r9, r1
					accel_data.x, accel_data.y, accel_data.z);
 80014ae:	4b6c      	ldr	r3, [pc, #432]	@ (8001660 <main+0x298>)
 80014b0:	685b      	ldr	r3, [r3, #4]
			printf("X: %.3f | Y: %.3f | Z: %.3f \r\n",
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f85c 	bl	8000570 <__aeabi_f2d>
 80014b8:	4604      	mov	r4, r0
 80014ba:	460d      	mov	r5, r1
					accel_data.x, accel_data.y, accel_data.z);
 80014bc:	4b68      	ldr	r3, [pc, #416]	@ (8001660 <main+0x298>)
 80014be:	689b      	ldr	r3, [r3, #8]
			printf("X: %.3f | Y: %.3f | Z: %.3f \r\n",
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f855 	bl	8000570 <__aeabi_f2d>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014ce:	e9cd 4500 	strd	r4, r5, [sp]
 80014d2:	4642      	mov	r2, r8
 80014d4:	464b      	mov	r3, r9
 80014d6:	4863      	ldr	r0, [pc, #396]	@ (8001664 <main+0x29c>)
 80014d8:	f006 fe54 	bl	8008184 <iprintf>
			//		} else {
			//			printf("Error reading accelerometer data!\r\n");
			//		}
			roll = atan2(accel_data.y, accel_data.z) * (180 / PI);
 80014dc:	4b60      	ldr	r3, [pc, #384]	@ (8001660 <main+0x298>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f845 	bl	8000570 <__aeabi_f2d>
 80014e6:	4604      	mov	r4, r0
 80014e8:	460d      	mov	r5, r1
 80014ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001660 <main+0x298>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f83e 	bl	8000570 <__aeabi_f2d>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	ec43 2b11 	vmov	d1, r2, r3
 80014fc:	ec45 4b10 	vmov	d0, r4, r5
 8001500:	f00a fb08 	bl	800bb14 <atan2>
 8001504:	ec51 0b10 	vmov	r0, r1, d0
 8001508:	a345      	add	r3, pc, #276	@ (adr r3, 8001620 <main+0x258>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f887 	bl	8000620 <__aeabi_dmul>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fb79 	bl	8000c10 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	4a51      	ldr	r2, [pc, #324]	@ (8001668 <main+0x2a0>)
 8001522:	6013      	str	r3, [r2, #0]
			pitch = atan2(-accel_data.x, sqrt(accel_data.y * accel_data.y + accel_data.z * accel_data.z)) * (180 / PI);
 8001524:	4b4e      	ldr	r3, [pc, #312]	@ (8001660 <main+0x298>)
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	eef1 7a67 	vneg.f32	s15, s15
 800152e:	ee17 3a90 	vmov	r3, s15
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f81c 	bl	8000570 <__aeabi_f2d>
 8001538:	4604      	mov	r4, r0
 800153a:	460d      	mov	r5, r1
 800153c:	4b48      	ldr	r3, [pc, #288]	@ (8001660 <main+0x298>)
 800153e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001542:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <main+0x298>)
 8001544:	edd3 7a01 	vldr	s15, [r3, #4]
 8001548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154c:	4b44      	ldr	r3, [pc, #272]	@ (8001660 <main+0x298>)
 800154e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001552:	4b43      	ldr	r3, [pc, #268]	@ (8001660 <main+0x298>)
 8001554:	edd3 7a02 	vldr	s15, [r3, #8]
 8001558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800155c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001560:	ee17 0a90 	vmov	r0, s15
 8001564:	f7ff f804 	bl	8000570 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	ec43 2b10 	vmov	d0, r2, r3
 8001570:	f00a fad2 	bl	800bb18 <sqrt>
 8001574:	eeb0 7a40 	vmov.f32	s14, s0
 8001578:	eef0 7a60 	vmov.f32	s15, s1
 800157c:	eeb0 1a47 	vmov.f32	s2, s14
 8001580:	eef0 1a67 	vmov.f32	s3, s15
 8001584:	ec45 4b10 	vmov	d0, r4, r5
 8001588:	f00a fac4 	bl	800bb14 <atan2>
 800158c:	ec51 0b10 	vmov	r0, r1, d0
 8001590:	a323      	add	r3, pc, #140	@ (adr r3, 8001620 <main+0x258>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7ff f843 	bl	8000620 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fb35 	bl	8000c10 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4a30      	ldr	r2, [pc, #192]	@ (800166c <main+0x2a4>)
 80015aa:	6013      	str	r3, [r2, #0]
			//			printf("Roll: %.2f degrees |", roll);
			//			printf("Pitch: %.2f degrees\n", pitch);

			if(roll > 45 || roll < -45){
 80015ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <main+0x2a0>)
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001670 <main+0x2a8>
 80015b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015be:	dc09      	bgt.n	80015d4 <main+0x20c>
 80015c0:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <main+0x2a0>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001674 <main+0x2ac>
 80015ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	d505      	bpl.n	80015e0 <main+0x218>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80015d4:	2201      	movs	r2, #1
 80015d6:	2120      	movs	r1, #32
 80015d8:	4827      	ldr	r0, [pc, #156]	@ (8001678 <main+0x2b0>)
 80015da:	f001 fb3b 	bl	8002c54 <HAL_GPIO_WritePin>
 80015de:	e004      	b.n	80015ea <main+0x222>
			}else{
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2120      	movs	r1, #32
 80015e4:	4824      	ldr	r0, [pc, #144]	@ (8001678 <main+0x2b0>)
 80015e6:	f001 fb35 	bl	8002c54 <HAL_GPIO_WritePin>
			}

		}
		if(LIS2DW12_ReadTemp(&hspi1, &temperature)) {
 80015ea:	4924      	ldr	r1, [pc, #144]	@ (800167c <main+0x2b4>)
 80015ec:	4814      	ldr	r0, [pc, #80]	@ (8001640 <main+0x278>)
 80015ee:	f7ff fea7 	bl	8001340 <LIS2DW12_ReadTemp>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00a      	beq.n	800160e <main+0x246>
			printf("Temperature: %.1f ^C\r\n", temperature);
 80015f8:	4b20      	ldr	r3, [pc, #128]	@ (800167c <main+0x2b4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffb7 	bl	8000570 <__aeabi_f2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	481e      	ldr	r0, [pc, #120]	@ (8001680 <main+0x2b8>)
 8001608:	f006 fdbc 	bl	8008184 <iprintf>
 800160c:	e002      	b.n	8001614 <main+0x24c>
		}else{
			printf("Temperature Gagal di baca\r\n");
 800160e:	481d      	ldr	r0, [pc, #116]	@ (8001684 <main+0x2bc>)
 8001610:	f006 fe20 	bl	8008254 <puts>
		}

		HAL_Delay(100);
 8001614:	2064      	movs	r0, #100	@ 0x64
 8001616:	f000 fe33 	bl	8002280 <HAL_Delay>
		if(LIS2DW12_ReadAccel(&hspi1, &accel_data)) {
 800161a:	e739      	b.n	8001490 <main+0xc8>
 800161c:	f3af 8000 	nop.w
 8001620:	1af05a77 	.word	0x1af05a77
 8001624:	404ca5dc 	.word	0x404ca5dc
 8001628:	0800c218 	.word	0x0800c218
 800162c:	0800c240 	.word	0x0800c240
 8001630:	0800c268 	.word	0x0800c268
 8001634:	0800c274 	.word	0x0800c274
 8001638:	0800c280 	.word	0x0800c280
 800163c:	0800c294 	.word	0x0800c294
 8001640:	200002f4 	.word	0x200002f4
 8001644:	0800c2bc 	.word	0x0800c2bc
 8001648:	0800c2d0 	.word	0x0800c2d0
 800164c:	0800c2ec 	.word	0x0800c2ec
 8001650:	0800c314 	.word	0x0800c314
 8001654:	0800c334 	.word	0x0800c334
 8001658:	0800c350 	.word	0x0800c350
 800165c:	0800c378 	.word	0x0800c378
 8001660:	200004ac 	.word	0x200004ac
 8001664:	0800c3a0 	.word	0x0800c3a0
 8001668:	200004bc 	.word	0x200004bc
 800166c:	200004b8 	.word	0x200004b8
 8001670:	42340000 	.word	0x42340000
 8001674:	c2340000 	.word	0xc2340000
 8001678:	42020000 	.word	0x42020000
 800167c:	200004c0 	.word	0x200004c0
 8001680:	0800c3c0 	.word	0x0800c3c0
 8001684:	0800c3d8 	.word	0x0800c3d8

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b09c      	sub	sp, #112	@ 0x70
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	2250      	movs	r2, #80	@ 0x50
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f006 fedc 	bl	8008454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
 80016ac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <SystemClock_Config+0xd4>)
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	4a2a      	ldr	r2, [pc, #168]	@ (800175c <SystemClock_Config+0xd4>)
 80016b4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80016b8:	6113      	str	r3, [r2, #16]
 80016ba:	4b28      	ldr	r3, [pc, #160]	@ (800175c <SystemClock_Config+0xd4>)
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016c6:	bf00      	nop
 80016c8:	4b24      	ldr	r3, [pc, #144]	@ (800175c <SystemClock_Config+0xd4>)
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	f003 0308 	and.w	r3, r3, #8
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d1f9      	bne.n	80016c8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2302      	movs	r3, #2
 80016e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80016e2:	2303      	movs	r3, #3
 80016e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016e6:	2308      	movs	r3, #8
 80016e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 129;
 80016ea:	2381      	movs	r3, #129	@ 0x81
 80016ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 16;
 80016ee:	2310      	movs	r3, #16
 80016f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80016f2:	2305      	movs	r3, #5
 80016f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80016fa:	2304      	movs	r3, #4
 80016fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80016fe:	2300      	movs	r3, #0
 8001700:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	4618      	mov	r0, r3
 800170c:	f001 faba 	bl	8002c84 <HAL_RCC_OscConfig>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001716:	f000 f9fd 	bl	8001b14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800171a:	231f      	movs	r3, #31
 800171c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800171e:	2302      	movs	r3, #2
 8001720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800172e:	2300      	movs	r3, #0
 8001730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	2101      	movs	r1, #1
 8001738:	4618      	mov	r0, r3
 800173a:	f001 fedb 	bl	80034f4 <HAL_RCC_ClockConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001744:	f000 f9e6 	bl	8001b14 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_0);
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <SystemClock_Config+0xd8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	@ (8001760 <SystemClock_Config+0xd8>)
 800174e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001752:	6013      	str	r3, [r2, #0]
}
 8001754:	bf00      	nop
 8001756:	3770      	adds	r7, #112	@ 0x70
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	44020800 	.word	0x44020800
 8001760:	40022000 	.word	0x40022000

08001764 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 800176a:	4b2e      	ldr	r3, [pc, #184]	@ (8001824 <MX_GPDMA1_Init+0xc0>)
 800176c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001770:	4a2c      	ldr	r2, [pc, #176]	@ (8001824 <MX_GPDMA1_Init+0xc0>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800177a:	4b2a      	ldr	r3, [pc, #168]	@ (8001824 <MX_GPDMA1_Init+0xc0>)
 800177c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN GPDMA1_Init 1 */

  /* USER CODE END GPDMA1_Init 1 */
  handle_GPDMA1_Channel7.Instance = GPDMA1_Channel7;
 8001788:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <MX_GPDMA1_Init+0xc4>)
 800178a:	4a28      	ldr	r2, [pc, #160]	@ (800182c <MX_GPDMA1_Init+0xc8>)
 800178c:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel7.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800178e:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <MX_GPDMA1_Init+0xc4>)
 8001790:	2200      	movs	r2, #0
 8001792:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel7.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8001794:	4b24      	ldr	r3, [pc, #144]	@ (8001828 <MX_GPDMA1_Init+0xc4>)
 8001796:	2200      	movs	r2, #0
 8001798:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel7.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <MX_GPDMA1_Init+0xc4>)
 800179c:	2200      	movs	r2, #0
 800179e:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel7.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80017a0:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <MX_GPDMA1_Init+0xc4>)
 80017a2:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80017a6:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel7.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_NORMAL;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <MX_GPDMA1_Init+0xc4>)
 80017aa:	2280      	movs	r2, #128	@ 0x80
 80017ac:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel7) != HAL_OK)
 80017ae:	481e      	ldr	r0, [pc, #120]	@ (8001828 <MX_GPDMA1_Init+0xc4>)
 80017b0:	f000 ff7a 	bl	80026a8 <HAL_DMAEx_List_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_GPDMA1_Init+0x5a>
  {
    Error_Handler();
 80017ba:	f000 f9ab 	bl	8001b14 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel7, DMA_CHANNEL_NPRIV) != HAL_OK)
 80017be:	2110      	movs	r1, #16
 80017c0:	4819      	ldr	r0, [pc, #100]	@ (8001828 <MX_GPDMA1_Init+0xc4>)
 80017c2:	f000 ff35 	bl	8002630 <HAL_DMA_ConfigChannelAttributes>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_GPDMA1_Init+0x6c>
  {
    Error_Handler();
 80017cc:	f000 f9a2 	bl	8001b14 <Error_Handler>
  }
  handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80017d0:	4b17      	ldr	r3, [pc, #92]	@ (8001830 <MX_GPDMA1_Init+0xcc>)
 80017d2:	4a18      	ldr	r2, [pc, #96]	@ (8001834 <MX_GPDMA1_Init+0xd0>)
 80017d4:	601a      	str	r2, [r3, #0]
  handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_HIGH_WEIGHT;
 80017d6:	4b16      	ldr	r3, [pc, #88]	@ (8001830 <MX_GPDMA1_Init+0xcc>)
 80017d8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80017dc:	639a      	str	r2, [r3, #56]	@ 0x38
  handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_1LINK_EXECUTION;
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <MX_GPDMA1_Init+0xcc>)
 80017e0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80017e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 80017e6:	4b12      	ldr	r3, [pc, #72]	@ (8001830 <MX_GPDMA1_Init+0xcc>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	641a      	str	r2, [r3, #64]	@ 0x40
  handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_LAST_LL_ITEM_TRANSFER;
 80017ec:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <MX_GPDMA1_Init+0xcc>)
 80017ee:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 80017f2:	645a      	str	r2, [r3, #68]	@ 0x44
  handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <MX_GPDMA1_Init+0xcc>)
 80017f6:	2281      	movs	r2, #129	@ 0x81
 80017f8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80017fa:	480d      	ldr	r0, [pc, #52]	@ (8001830 <MX_GPDMA1_Init+0xcc>)
 80017fc:	f000 ff54 	bl	80026a8 <HAL_DMAEx_List_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_GPDMA1_Init+0xa6>
  {
    Error_Handler();
 8001806:	f000 f985 	bl	8001b14 <Error_Handler>
  }
  if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800180a:	2110      	movs	r1, #16
 800180c:	4808      	ldr	r0, [pc, #32]	@ (8001830 <MX_GPDMA1_Init+0xcc>)
 800180e:	f000 ff0f 	bl	8002630 <HAL_DMA_ConfigChannelAttributes>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_GPDMA1_Init+0xb8>
  {
    Error_Handler();
 8001818:	f000 f97c 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	44020c00 	.word	0x44020c00
 8001828:	20000204 	.word	0x20000204
 800182c:	400203d0 	.word	0x400203d0
 8001830:	2000027c 	.word	0x2000027c
 8001834:	400200d0 	.word	0x400200d0

08001838 <MX_SBS_Init>:
  * @brief SBS Initialization Function
  * @param None
  * @retval None
  */
static void MX_SBS_Init(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END SBS_Init 1 */
  /* USER CODE BEGIN SBS_Init 2 */

  /* USER CODE END SBS_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
	...

08001848 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800184c:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <MX_SPI1_Init+0xa4>)
 800184e:	4a28      	ldr	r2, [pc, #160]	@ (80018f0 <MX_SPI1_Init+0xa8>)
 8001850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001852:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <MX_SPI1_Init+0xa4>)
 8001854:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185a:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <MX_SPI1_Init+0xa4>)
 800185c:	2200      	movs	r2, #0
 800185e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001860:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <MX_SPI1_Init+0xa4>)
 8001862:	2207      	movs	r2, #7
 8001864:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001866:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <MX_SPI1_Init+0xa4>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <MX_SPI1_Init+0xa4>)
 800186e:	2200      	movs	r2, #0
 8001870:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001872:	4b1e      	ldr	r3, [pc, #120]	@ (80018ec <MX_SPI1_Init+0xa4>)
 8001874:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001878:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800187a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <MX_SPI1_Init+0xa4>)
 800187c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001880:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001882:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <MX_SPI1_Init+0xa4>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001888:	4b18      	ldr	r3, [pc, #96]	@ (80018ec <MX_SPI1_Init+0xa4>)
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800188e:	4b17      	ldr	r3, [pc, #92]	@ (80018ec <MX_SPI1_Init+0xa4>)
 8001890:	2200      	movs	r2, #0
 8001892:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <MX_SPI1_Init+0xa4>)
 8001896:	2207      	movs	r2, #7
 8001898:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <MX_SPI1_Init+0xa4>)
 800189c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <MX_SPI1_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80018a8:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <MX_SPI1_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <MX_SPI1_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <MX_SPI1_Init+0xa4>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	@ (80018ec <MX_SPI1_Init+0xa4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	@ (80018ec <MX_SPI1_Init+0xa4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <MX_SPI1_Init+0xa4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80018cc:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <MX_SPI1_Init+0xa4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <MX_SPI1_Init+0xa4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	@ (80018ec <MX_SPI1_Init+0xa4>)
 80018da:	f004 fa1b 	bl	8005d14 <HAL_SPI_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80018e4:	f000 f916 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200002f4 	.word	0x200002f4
 80018f0:	40013000 	.word	0x40013000

080018f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f8:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 80018fa:	4a23      	ldr	r2, [pc, #140]	@ (8001988 <MX_USART2_UART_Init+0x94>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 8001900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001912:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 800192c:	2200      	movs	r2, #0
 800192e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001930:	4b14      	ldr	r3, [pc, #80]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 8001932:	2200      	movs	r2, #0
 8001934:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 8001938:	2200      	movs	r2, #0
 800193a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800193c:	4811      	ldr	r0, [pc, #68]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 800193e:	f004 ff64 	bl	800680a <HAL_UART_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001948:	f000 f8e4 	bl	8001b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800194c:	2100      	movs	r1, #0
 800194e:	480d      	ldr	r0, [pc, #52]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 8001950:	f005 fc20 	bl	8007194 <HAL_UARTEx_SetTxFifoThreshold>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800195a:	f000 f8db 	bl	8001b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800195e:	2100      	movs	r1, #0
 8001960:	4808      	ldr	r0, [pc, #32]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 8001962:	f005 fc55 	bl	8007210 <HAL_UARTEx_SetRxFifoThreshold>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800196c:	f000 f8d2 	bl	8001b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <MX_USART2_UART_Init+0x90>)
 8001972:	f005 fbd6 	bl	8007122 <HAL_UARTEx_DisableFifoMode>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800197c:	f000 f8ca 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000384 	.word	0x20000384
 8001988:	40004400 	.word	0x40004400

0800198c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001990:	4b2a      	ldr	r3, [pc, #168]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 8001992:	4a2b      	ldr	r2, [pc, #172]	@ (8001a40 <MX_USART3_UART_Init+0xb4>)
 8001994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001996:	4b29      	ldr	r3, [pc, #164]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 8001998:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800199c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b25      	ldr	r3, [pc, #148]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b24      	ldr	r3, [pc, #144]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b22      	ldr	r3, [pc, #136]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019c8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ce:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019d4:	4819      	ldr	r0, [pc, #100]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019d6:	f004 ff18 	bl	800680a <HAL_UART_Init>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80019e0:	f000 f898 	bl	8001b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019e4:	2100      	movs	r1, #0
 80019e6:	4815      	ldr	r0, [pc, #84]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019e8:	f005 fbd4 	bl	8007194 <HAL_UARTEx_SetTxFifoThreshold>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80019f2:	f000 f88f 	bl	8001b14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f6:	2100      	movs	r1, #0
 80019f8:	4810      	ldr	r0, [pc, #64]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 80019fa:	f005 fc09 	bl	8007210 <HAL_UARTEx_SetRxFifoThreshold>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001a04:	f000 f886 	bl	8001b14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001a08:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <MX_USART3_UART_Init+0xb0>)
 8001a0a:	f005 fb8a 	bl	8007122 <HAL_UARTEx_DisableFifoMode>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001a14:	f000 f87e 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	203c      	movs	r0, #60	@ 0x3c
 8001a1e:	f000 fd2f 	bl	8002480 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a22:	203c      	movs	r0, #60	@ 0x3c
 8001a24:	f000 fd46 	bl	80024b4 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	203c      	movs	r0, #60	@ 0x3c
 8001a2e:	f000 fd27 	bl	8002480 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a32:	203c      	movs	r0, #60	@ 0x3c
 8001a34:	f000 fd3e 	bl	80024b4 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000418 	.word	0x20000418
 8001a40:	40004800 	.word	0x40004800

08001a44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <MX_GPIO_Init+0xc4>)
 8001a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a60:	4a29      	ldr	r2, [pc, #164]	@ (8001b08 <MX_GPIO_Init+0xc4>)
 8001a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a6a:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <MX_GPIO_Init+0xc4>)
 8001a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a78:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <MX_GPIO_Init+0xc4>)
 8001a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a7e:	4a22      	ldr	r2, [pc, #136]	@ (8001b08 <MX_GPIO_Init+0xc4>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a88:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <MX_GPIO_Init+0xc4>)
 8001a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a96:	4b1c      	ldr	r3, [pc, #112]	@ (8001b08 <MX_GPIO_Init+0xc4>)
 8001a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001b08 <MX_GPIO_Init+0xc4>)
 8001a9e:	f043 0302 	orr.w	r3, r3, #2
 8001aa2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001aa6:	4b18      	ldr	r3, [pc, #96]	@ (8001b08 <MX_GPIO_Init+0xc4>)
 8001aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	603b      	str	r3, [r7, #0]
 8001ab2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2120      	movs	r1, #32
 8001ab8:	4814      	ldr	r0, [pc, #80]	@ (8001b0c <MX_GPIO_Init+0xc8>)
 8001aba:	f001 f8cb 	bl	8002c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	4813      	ldr	r0, [pc, #76]	@ (8001b10 <MX_GPIO_Init+0xcc>)
 8001ac4:	f001 f8c6 	bl	8002c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	4619      	mov	r1, r3
 8001ade:	480b      	ldr	r0, [pc, #44]	@ (8001b0c <MX_GPIO_Init+0xc8>)
 8001ae0:	f000 ff66 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_GPIO_Init+0xcc>)
 8001afc:	f000 ff58 	bl	80029b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	44020c00 	.word	0x44020c00
 8001b0c:	42020000 	.word	0x42020000
 8001b10:	42020400 	.word	0x42020400

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b1c:	bf00      	nop
 8001b1e:	e7fd      	b.n	8001b1c <Error_Handler+0x8>

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_SBS_EnableVddIO2CompensationCell();
 8001b24:	f000 fbe2 	bl	80022ec <HAL_SBS_EnableVddIO2CompensationCell>
  HAL_SBS_EnableVddIO1CompensationCell();
 8001b28:	f000 fbce 	bl	80022c8 <HAL_SBS_EnableVddIO1CompensationCell>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b0ac      	sub	sp, #176	@ 0xb0
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2288      	movs	r2, #136	@ 0x88
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f006 fc7f 	bl	8008454 <memset>
  if(hspi->Instance==SPI1)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a31      	ldr	r2, [pc, #196]	@ (8001c20 <HAL_SPI_MspInit+0xf0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d15a      	bne.n	8001c16 <HAL_SPI_MspInit+0xe6>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001b60:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b64:	f04f 0300 	mov.w	r3, #0
 8001b68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 ffff 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8001b80:	f7ff ffc8 	bl	8001b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b84:	4b27      	ldr	r3, [pc, #156]	@ (8001c24 <HAL_SPI_MspInit+0xf4>)
 8001b86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b8a:	4a26      	ldr	r2, [pc, #152]	@ (8001c24 <HAL_SPI_MspInit+0xf4>)
 8001b8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b90:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001b94:	4b23      	ldr	r3, [pc, #140]	@ (8001c24 <HAL_SPI_MspInit+0xf4>)
 8001b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b20      	ldr	r3, [pc, #128]	@ (8001c24 <HAL_SPI_MspInit+0xf4>)
 8001ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8001c24 <HAL_SPI_MspInit+0xf4>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c24 <HAL_SPI_MspInit+0xf4>)
 8001bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA0     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA8     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8001bc0:	f240 1301 	movw	r3, #257	@ 0x101
 8001bc4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SPI1;
 8001bda:	230c      	movs	r3, #12
 8001bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001be4:	4619      	mov	r1, r3
 8001be6:	4810      	ldr	r0, [pc, #64]	@ (8001c28 <HAL_SPI_MspInit+0xf8>)
 8001be8:	f000 fee2 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c04:	2305      	movs	r3, #5
 8001c06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	@ (8001c28 <HAL_SPI_MspInit+0xf8>)
 8001c12:	f000 fecd 	bl	80029b0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c16:	bf00      	nop
 8001c18:	37b0      	adds	r7, #176	@ 0xb0
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40013000 	.word	0x40013000
 8001c24:	44020c00 	.word	0x44020c00
 8001c28:	42020000 	.word	0x42020000

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b0b0      	sub	sp, #192	@ 0xc0
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	2288      	movs	r2, #136	@ 0x88
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f006 fc01 	bl	8008454 <memset>
  if(huart->Instance==USART2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a5d      	ldr	r2, [pc, #372]	@ (8001dcc <HAL_UART_MspInit+0x1a0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d169      	bne.n	8001d30 <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c5c:	f04f 0202 	mov.w	r2, #2
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	4618      	mov	r0, r3
 8001c72:	f001 ff81 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001c7c:	f7ff ff4a 	bl	8001b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c80:	4b53      	ldr	r3, [pc, #332]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c86:	4a52      	ldr	r2, [pc, #328]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c8c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c90:	4b4f      	ldr	r3, [pc, #316]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c9a:	61fb      	str	r3, [r7, #28]
 8001c9c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cae:	4b48      	ldr	r3, [pc, #288]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbc:	4b44      	ldr	r3, [pc, #272]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cc2:	4a43      	ldr	r2, [pc, #268]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ccc:	4b40      	ldr	r3, [pc, #256]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PB1     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cda:	2304      	movs	r3, #4
 8001cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4835      	ldr	r0, [pc, #212]	@ (8001dd4 <HAL_UART_MspInit+0x1a8>)
 8001d00:	f000 fe56 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d04:	2302      	movs	r3, #2
 8001d06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF9_USART2;
 8001d1c:	2309      	movs	r3, #9
 8001d1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001d26:	4619      	mov	r1, r3
 8001d28:	482b      	ldr	r0, [pc, #172]	@ (8001dd8 <HAL_UART_MspInit+0x1ac>)
 8001d2a:	f000 fe41 	bl	80029b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d2e:	e049      	b.n	8001dc4 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART3)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a29      	ldr	r2, [pc, #164]	@ (8001ddc <HAL_UART_MspInit+0x1b0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d144      	bne.n	8001dc4 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d3a:	f04f 0204 	mov.w	r2, #4
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d46:	2300      	movs	r3, #0
 8001d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d4a:	f107 0320 	add.w	r3, r7, #32
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f001 ff12 	bl	8003b78 <HAL_RCCEx_PeriphCLKConfig>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001d5a:	f7ff fedb 	bl	8001b14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d64:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001d66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d6a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001d6e:	4b18      	ldr	r3, [pc, #96]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001d74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d82:	4a13      	ldr	r2, [pc, #76]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d8c:	4b10      	ldr	r3, [pc, #64]	@ (8001dd0 <HAL_UART_MspInit+0x1a4>)
 8001d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001d9a:	2318      	movs	r3, #24
 8001d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da0:	2302      	movs	r3, #2
 8001da2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_USART3;
 8001db2:	230d      	movs	r3, #13
 8001db4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <HAL_UART_MspInit+0x1a8>)
 8001dc0:	f000 fdf6 	bl	80029b0 <HAL_GPIO_Init>
}
 8001dc4:	bf00      	nop
 8001dc6:	37c0      	adds	r7, #192	@ 0xc0
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40004400 	.word	0x40004400
 8001dd0:	44020c00 	.word	0x44020c00
 8001dd4:	42020000 	.word	0x42020000
 8001dd8:	42020400 	.word	0x42020400
 8001ddc:	40004800 	.word	0x40004800

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <NMI_Handler+0x4>

08001de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <MemManage_Handler+0x4>

08001df8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e36:	f000 fa03 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  return 1;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_kill>:

int _kill(int pid, int sig)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e58:	f006 fb4e 	bl	80084f8 <__errno>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2216      	movs	r2, #22
 8001e60:	601a      	str	r2, [r3, #0]
  return -1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_exit>:

void _exit (int status)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e76:	f04f 31ff 	mov.w	r1, #4294967295
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffe7 	bl	8001e4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <_exit+0x12>

08001e84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	e00a      	b.n	8001eac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e96:	f3af 8000 	nop.w
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	60ba      	str	r2, [r7, #8]
 8001ea2:	b2ca      	uxtb	r2, r1
 8001ea4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dbf0      	blt.n	8001e96 <_read+0x12>
  }

  return len;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ebe:	b580      	push	{r7, lr}
 8001ec0:	b086      	sub	sp, #24
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	60f8      	str	r0, [r7, #12]
 8001ec6:	60b9      	str	r1, [r7, #8]
 8001ec8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e009      	b.n	8001ee4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	60ba      	str	r2, [r7, #8]
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fa61 	bl	80013a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbf1      	blt.n	8001ed0 <_write+0x12>
  }
  return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_close>:

int _close(int file)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f1e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_isatty>:

int _isatty(int file)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f36:	2301      	movs	r3, #1
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f68:	4a14      	ldr	r2, [pc, #80]	@ (8001fbc <_sbrk+0x5c>)
 8001f6a:	4b15      	ldr	r3, [pc, #84]	@ (8001fc0 <_sbrk+0x60>)
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f74:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <_sbrk+0x64>)
 8001f7e:	4a12      	ldr	r2, [pc, #72]	@ (8001fc8 <_sbrk+0x68>)
 8001f80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f82:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <_sbrk+0x64>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d207      	bcs.n	8001fa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f90:	f006 fab2 	bl	80084f8 <__errno>
 8001f94:	4603      	mov	r3, r0
 8001f96:	220c      	movs	r2, #12
 8001f98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f9e:	e009      	b.n	8001fb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa0:	4b08      	ldr	r3, [pc, #32]	@ (8001fc4 <_sbrk+0x64>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa6:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	4a05      	ldr	r2, [pc, #20]	@ (8001fc4 <_sbrk+0x64>)
 8001fb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3718      	adds	r7, #24
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20008000 	.word	0x20008000
 8001fc0:	00000400 	.word	0x00000400
 8001fc4:	200004c4 	.word	0x200004c4
 8001fc8:	20000618 	.word	0x20000618

08001fcc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001fd2:	4b30      	ldr	r3, [pc, #192]	@ (8002094 <SystemInit+0xc8>)
 8001fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fd8:	4a2e      	ldr	r2, [pc, #184]	@ (8002094 <SystemInit+0xc8>)
 8001fda:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8002098 <SystemInit+0xcc>)
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001fe8:	4b2b      	ldr	r3, [pc, #172]	@ (8002098 <SystemInit+0xcc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001fee:	4b2a      	ldr	r3, [pc, #168]	@ (8002098 <SystemInit+0xcc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001ff4:	4b28      	ldr	r3, [pc, #160]	@ (8002098 <SystemInit+0xcc>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4927      	ldr	r1, [pc, #156]	@ (8002098 <SystemInit+0xcc>)
 8001ffa:	4b28      	ldr	r3, [pc, #160]	@ (800209c <SystemInit+0xd0>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002000:	4b25      	ldr	r3, [pc, #148]	@ (8002098 <SystemInit+0xcc>)
 8002002:	2200      	movs	r2, #0
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8002006:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <SystemInit+0xcc>)
 8002008:	2200      	movs	r2, #0
 800200a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800200c:	4b22      	ldr	r3, [pc, #136]	@ (8002098 <SystemInit+0xcc>)
 800200e:	4a24      	ldr	r2, [pc, #144]	@ (80020a0 <SystemInit+0xd4>)
 8002010:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002012:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <SystemInit+0xcc>)
 8002014:	2200      	movs	r2, #0
 8002016:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002018:	4b1f      	ldr	r3, [pc, #124]	@ (8002098 <SystemInit+0xcc>)
 800201a:	4a21      	ldr	r2, [pc, #132]	@ (80020a0 <SystemInit+0xd4>)
 800201c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <SystemInit+0xcc>)
 8002020:	2200      	movs	r2, #0
 8002022:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002024:	4b1c      	ldr	r3, [pc, #112]	@ (8002098 <SystemInit+0xcc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <SystemInit+0xcc>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800202e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002030:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <SystemInit+0xcc>)
 8002032:	2200      	movs	r2, #0
 8002034:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002036:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <SystemInit+0xc8>)
 8002038:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800203c:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800203e:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <SystemInit+0xd8>)
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002046:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800204e:	d003      	beq.n	8002058 <SystemInit+0x8c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002056:	d117      	bne.n	8002088 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002058:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <SystemInit+0xd8>)
 800205a:	69db      	ldr	r3, [r3, #28]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002064:	4b0f      	ldr	r3, [pc, #60]	@ (80020a4 <SystemInit+0xd8>)
 8002066:	4a10      	ldr	r2, [pc, #64]	@ (80020a8 <SystemInit+0xdc>)
 8002068:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800206a:	4b0e      	ldr	r3, [pc, #56]	@ (80020a4 <SystemInit+0xd8>)
 800206c:	4a0f      	ldr	r2, [pc, #60]	@ (80020ac <SystemInit+0xe0>)
 800206e:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002070:	4b0c      	ldr	r3, [pc, #48]	@ (80020a4 <SystemInit+0xd8>)
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	4a0b      	ldr	r2, [pc, #44]	@ (80020a4 <SystemInit+0xd8>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <SystemInit+0xd8>)
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	4a08      	ldr	r2, [pc, #32]	@ (80020a4 <SystemInit+0xd8>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	61d3      	str	r3, [r2, #28]
  }
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000ed00 	.word	0xe000ed00
 8002098:	44020c00 	.word	0x44020c00
 800209c:	fae2eae3 	.word	0xfae2eae3
 80020a0:	01010280 	.word	0x01010280
 80020a4:	40022000 	.word	0x40022000
 80020a8:	08192a3b 	.word	0x08192a3b
 80020ac:	4c5d6e7f 	.word	0x4c5d6e7f

080020b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80020b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020b6:	e003      	b.n	80020c0 <LoopCopyDataInit>

080020b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020b8:	4b0c      	ldr	r3, [pc, #48]	@ (80020ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020be:	3104      	adds	r1, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020c0:	480b      	ldr	r0, [pc, #44]	@ (80020f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020c2:	4b0c      	ldr	r3, [pc, #48]	@ (80020f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020c8:	d3f6      	bcc.n	80020b8 <CopyDataInit>
	ldr	r2, =_sbss
 80020ca:	4a0b      	ldr	r2, [pc, #44]	@ (80020f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020cc:	e002      	b.n	80020d4 <LoopFillZerobss>

080020ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020d0:	f842 3b04 	str.w	r3, [r2], #4

080020d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <LoopForever+0x16>)
	cmp	r2, r3
 80020d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020d8:	d3f9      	bcc.n	80020ce <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020da:	f7ff ff77 	bl	8001fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020de:	f006 fa11 	bl	8008504 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020e2:	f7ff f971 	bl	80013c8 <main>

080020e6 <LoopForever>:

LoopForever:
    b LoopForever
 80020e6:	e7fe      	b.n	80020e6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80020e8:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 80020ec:	0800c8e0 	.word	0x0800c8e0
	ldr	r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80020f4:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 80020f8:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 80020fc:	20000618 	.word	0x20000618

08002100 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002100:	e7fe      	b.n	8002100 <ADC1_IRQHandler>
	...

08002104 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002108:	2003      	movs	r0, #3
 800210a:	f000 f9ae 	bl	800246a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800210e:	f001 fba9 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8002112:	4602      	mov	r2, r0
 8002114:	4b0c      	ldr	r3, [pc, #48]	@ (8002148 <HAL_Init+0x44>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	490b      	ldr	r1, [pc, #44]	@ (800214c <HAL_Init+0x48>)
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
 8002124:	4a0a      	ldr	r2, [pc, #40]	@ (8002150 <HAL_Init+0x4c>)
 8002126:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002128:	2004      	movs	r0, #4
 800212a:	f000 f9f3 	bl	8002514 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800212e:	200f      	movs	r0, #15
 8002130:	f000 f810 	bl	8002154 <HAL_InitTick>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e002      	b.n	8002144 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800213e:	f7ff fcef 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	44020c00 	.word	0x44020c00
 800214c:	0800c3f4 	.word	0x0800c3f4
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002160:	4b33      	ldr	r3, [pc, #204]	@ (8002230 <HAL_InitTick+0xdc>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e05c      	b.n	8002226 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 800216c:	4b31      	ldr	r3, [pc, #196]	@ (8002234 <HAL_InitTick+0xe0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0304 	and.w	r3, r3, #4
 8002174:	2b04      	cmp	r3, #4
 8002176:	d10c      	bne.n	8002192 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002178:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_InitTick+0xe4>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <HAL_InitTick+0xdc>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4619      	mov	r1, r3
 8002182:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002186:	fbb3 f3f1 	udiv	r3, r3, r1
 800218a:	fbb2 f3f3 	udiv	r3, r2, r3
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e037      	b.n	8002202 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002192:	f000 fa17 	bl	80025c4 <HAL_SYSTICK_GetCLKSourceConfig>
 8002196:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d023      	beq.n	80021e6 <HAL_InitTick+0x92>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d82d      	bhi.n	8002200 <HAL_InitTick+0xac>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_InitTick+0x5e>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d00d      	beq.n	80021cc <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80021b0:	e026      	b.n	8002200 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80021b2:	4b21      	ldr	r3, [pc, #132]	@ (8002238 <HAL_InitTick+0xe4>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <HAL_InitTick+0xdc>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	4619      	mov	r1, r3
 80021bc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80021c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	60fb      	str	r3, [r7, #12]
        break;
 80021ca:	e01a      	b.n	8002202 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80021cc:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <HAL_InitTick+0xdc>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80021da:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	60fb      	str	r3, [r7, #12]
        break;
 80021e4:	e00d      	b.n	8002202 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80021e6:	4b12      	ldr	r3, [pc, #72]	@ (8002230 <HAL_InitTick+0xdc>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80021f4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	60fb      	str	r3, [r7, #12]
        break;
 80021fe:	e000      	b.n	8002202 <HAL_InitTick+0xae>
        break;
 8002200:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f964 	bl	80024d0 <HAL_SYSTICK_Config>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e009      	b.n	8002226 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002212:	2200      	movs	r2, #0
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	f04f 30ff 	mov.w	r0, #4294967295
 800221a:	f000 f931 	bl	8002480 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800221e:	4a07      	ldr	r2, [pc, #28]	@ (800223c <HAL_InitTick+0xe8>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000000c 	.word	0x2000000c
 8002234:	e000e010 	.word	0xe000e010
 8002238:	20000004 	.word	0x20000004
 800223c:	20000008 	.word	0x20000008

08002240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002244:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_IncTick+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_IncTick+0x24>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	@ (8002264 <HAL_IncTick+0x24>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000000c 	.word	0x2000000c
 8002264:	200004c8 	.word	0x200004c8

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	@ (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	200004c8 	.word	0x200004c8

08002280 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002288:	f7ff ffee 	bl	8002268 <HAL_GetTick>
 800228c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d005      	beq.n	80022a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800229a:	4b0a      	ldr	r3, [pc, #40]	@ (80022c4 <HAL_Delay+0x44>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a6:	bf00      	nop
 80022a8:	f7ff ffde 	bl	8002268 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d8f7      	bhi.n	80022a8 <HAL_Delay+0x28>
  {
  }
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000000c 	.word	0x2000000c

080022c8 <HAL_SBS_EnableVddIO1CompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_SBS_EnableVddIO1CompensationCell(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  SET_BIT(SBS->CCCSR, SBS_CCCSR_EN1) ;
 80022cc:	4b06      	ldr	r3, [pc, #24]	@ (80022e8 <HAL_SBS_EnableVddIO1CompensationCell+0x20>)
 80022ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80022d2:	4a05      	ldr	r2, [pc, #20]	@ (80022e8 <HAL_SBS_EnableVddIO1CompensationCell+0x20>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	44000400 	.word	0x44000400

080022ec <HAL_SBS_EnableVddIO2CompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 2.4 to 3.6 V.
  * @retval None
  */
void HAL_SBS_EnableVddIO2CompensationCell(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  SET_BIT(SBS->CCCSR, SBS_CCCSR_EN2) ;
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_SBS_EnableVddIO2CompensationCell+0x20>)
 80022f2:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80022f6:	4a05      	ldr	r2, [pc, #20]	@ (800230c <HAL_SBS_EnableVddIO2CompensationCell+0x20>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	44000400 	.word	0x44000400

08002310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002320:	4b0c      	ldr	r3, [pc, #48]	@ (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800232c:	4013      	ands	r3, r2
 800232e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002338:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800233c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002342:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <__NVIC_SetPriorityGrouping+0x44>)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	60d3      	str	r3, [r2, #12]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800235c:	4b04      	ldr	r3, [pc, #16]	@ (8002370 <__NVIC_GetPriorityGrouping+0x18>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 0307 	and.w	r3, r3, #7
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00

08002374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800237e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002382:	2b00      	cmp	r3, #0
 8002384:	db0b      	blt.n	800239e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002386:	88fb      	ldrh	r3, [r7, #6]
 8002388:	f003 021f 	and.w	r2, r3, #31
 800238c:	4907      	ldr	r1, [pc, #28]	@ (80023ac <__NVIC_EnableIRQ+0x38>)
 800238e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	2001      	movs	r0, #1
 8002396:	fa00 f202 	lsl.w	r2, r0, r2
 800239a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	e000e100 	.word	0xe000e100

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	@ (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	@ (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	@ 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	@ 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ff4c 	bl	8002310 <__NVIC_SetPriorityGrouping>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800248e:	f7ff ff63 	bl	8002358 <__NVIC_GetPriorityGrouping>
 8002492:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68b9      	ldr	r1, [r7, #8]
 8002498:	6978      	ldr	r0, [r7, #20]
 800249a:	f7ff ffb3 	bl	8002404 <NVIC_EncodePriority>
 800249e:	4602      	mov	r2, r0
 80024a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024a4:	4611      	mov	r1, r2
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff82 	bl	80023b0 <__NVIC_SetPriority>
}
 80024ac:	bf00      	nop
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff56 	bl	8002374 <__NVIC_EnableIRQ>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024e0:	d301      	bcc.n	80024e6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80024e2:	2301      	movs	r3, #1
 80024e4:	e00d      	b.n	8002502 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80024e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <HAL_SYSTICK_Config+0x40>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80024ee:	4b08      	ldr	r3, [pc, #32]	@ (8002510 <HAL_SYSTICK_Config+0x40>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_SYSTICK_Config+0x40>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a05      	ldr	r2, [pc, #20]	@ (8002510 <HAL_SYSTICK_Config+0x40>)
 80024fa:	f043 0303 	orr.w	r3, r3, #3
 80024fe:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000e010 	.word	0xe000e010

08002514 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b04      	cmp	r3, #4
 8002520:	d844      	bhi.n	80025ac <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002522:	a201      	add	r2, pc, #4	@ (adr r2, 8002528 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002528:	0800254b 	.word	0x0800254b
 800252c:	08002569 	.word	0x08002569
 8002530:	0800258b 	.word	0x0800258b
 8002534:	080025ad 	.word	0x080025ad
 8002538:	0800253d 	.word	0x0800253d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800253c:	4b1f      	ldr	r3, [pc, #124]	@ (80025bc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1e      	ldr	r2, [pc, #120]	@ (80025bc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6013      	str	r3, [r2, #0]
      break;
 8002548:	e031      	b.n	80025ae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800254a:	4b1c      	ldr	r3, [pc, #112]	@ (80025bc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a1b      	ldr	r2, [pc, #108]	@ (80025bc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002550:	f023 0304 	bic.w	r3, r3, #4
 8002554:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002556:	4b1a      	ldr	r3, [pc, #104]	@ (80025c0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002558:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800255c:	4a18      	ldr	r2, [pc, #96]	@ (80025c0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800255e:	f023 030c 	bic.w	r3, r3, #12
 8002562:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002566:	e022      	b.n	80025ae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002568:	4b14      	ldr	r3, [pc, #80]	@ (80025bc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a13      	ldr	r2, [pc, #76]	@ (80025bc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800256e:	f023 0304 	bic.w	r3, r3, #4
 8002572:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002576:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800257a:	f023 030c 	bic.w	r3, r3, #12
 800257e:	4a10      	ldr	r2, [pc, #64]	@ (80025c0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002580:	f043 0304 	orr.w	r3, r3, #4
 8002584:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002588:	e011      	b.n	80025ae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800258a:	4b0c      	ldr	r3, [pc, #48]	@ (80025bc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a0b      	ldr	r2, [pc, #44]	@ (80025bc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002596:	4b0a      	ldr	r3, [pc, #40]	@ (80025c0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002598:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800259c:	f023 030c 	bic.w	r3, r3, #12
 80025a0:	4a07      	ldr	r2, [pc, #28]	@ (80025c0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80025a2:	f043 0308 	orr.w	r3, r3, #8
 80025a6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80025aa:	e000      	b.n	80025ae <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80025ac:	bf00      	nop
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e010 	.word	0xe000e010
 80025c0:	44020c00 	.word	0x44020c00

080025c4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80025ca:	4b17      	ldr	r3, [pc, #92]	@ (8002628 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80025d6:	2304      	movs	r3, #4
 80025d8:	607b      	str	r3, [r7, #4]
 80025da:	e01e      	b.n	800261a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80025dc:	4b13      	ldr	r3, [pc, #76]	@ (800262c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80025de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d00f      	beq.n	800260e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b08      	cmp	r3, #8
 80025f2:	d80f      	bhi.n	8002614 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d003      	beq.n	8002608 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002600:	e008      	b.n	8002614 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
        break;
 8002606:	e008      	b.n	800261a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002608:	2301      	movs	r3, #1
 800260a:	607b      	str	r3, [r7, #4]
        break;
 800260c:	e005      	b.n	800261a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800260e:	2302      	movs	r3, #2
 8002610:	607b      	str	r3, [r7, #4]
        break;
 8002612:	e002      	b.n	800261a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002614:	2300      	movs	r3, #0
 8002616:	607b      	str	r3, [r7, #4]
        break;
 8002618:	bf00      	nop
    }
  }
  return systick_source;
 800261a:	687b      	ldr	r3, [r7, #4]
}
 800261c:	4618      	mov	r0, r3
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e010 	.word	0xe000e010
 800262c:	44020c00 	.word	0x44020c00

08002630 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e02b      	b.n	800269c <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800264c:	f023 030f 	bic.w	r3, r3, #15
 8002650:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265a:	3b50      	subs	r3, #80	@ 0x50
 800265c:	09db      	lsrs	r3, r3, #7
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	2201      	movs	r2, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	d012      	beq.n	800269a <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f003 0311 	and.w	r3, r3, #17
 800267a:	2b11      	cmp	r3, #17
 800267c:	d106      	bne.n	800268c <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	431a      	orrs	r2, r3
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	e006      	b.n	800269a <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	43db      	mvns	r3, r3
 8002694:	401a      	ands	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 80026b0:	f7ff fdda 	bl	8002268 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e085      	b.n	80027cc <HAL_DMAEx_List_Init+0x124>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a43      	ldr	r2, [pc, #268]	@ (80027d4 <HAL_DMAEx_List_Init+0x12c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d049      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a42      	ldr	r2, [pc, #264]	@ (80027d8 <HAL_DMAEx_List_Init+0x130>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d044      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a40      	ldr	r2, [pc, #256]	@ (80027dc <HAL_DMAEx_List_Init+0x134>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d03f      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a3f      	ldr	r2, [pc, #252]	@ (80027e0 <HAL_DMAEx_List_Init+0x138>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d03a      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a3d      	ldr	r2, [pc, #244]	@ (80027e4 <HAL_DMAEx_List_Init+0x13c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d035      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a3c      	ldr	r2, [pc, #240]	@ (80027e8 <HAL_DMAEx_List_Init+0x140>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d030      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3a      	ldr	r2, [pc, #232]	@ (80027ec <HAL_DMAEx_List_Init+0x144>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d02b      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a39      	ldr	r2, [pc, #228]	@ (80027f0 <HAL_DMAEx_List_Init+0x148>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d026      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a37      	ldr	r2, [pc, #220]	@ (80027f4 <HAL_DMAEx_List_Init+0x14c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d021      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a36      	ldr	r2, [pc, #216]	@ (80027f8 <HAL_DMAEx_List_Init+0x150>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d01c      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a34      	ldr	r2, [pc, #208]	@ (80027fc <HAL_DMAEx_List_Init+0x154>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d017      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a33      	ldr	r2, [pc, #204]	@ (8002800 <HAL_DMAEx_List_Init+0x158>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d012      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a31      	ldr	r2, [pc, #196]	@ (8002804 <HAL_DMAEx_List_Init+0x15c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d00d      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a30      	ldr	r2, [pc, #192]	@ (8002808 <HAL_DMAEx_List_Init+0x160>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d008      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2e      	ldr	r2, [pc, #184]	@ (800280c <HAL_DMAEx_List_Init+0x164>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d003      	beq.n	800275e <HAL_DMAEx_List_Init+0xb6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2d      	ldr	r2, [pc, #180]	@ (8002810 <HAL_DMAEx_List_Init+0x168>)
 800275c:	4293      	cmp	r3, r2
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	695a      	ldr	r2, [r3, #20]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0206 	orr.w	r2, r2, #6
 800277c:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800277e:	e00f      	b.n	80027a0 <HAL_DMAEx_List_Init+0xf8>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002780:	f7ff fd72 	bl	8002268 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b05      	cmp	r3, #5
 800278c:	d908      	bls.n	80027a0 <HAL_DMAEx_List_Init+0xf8>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2210      	movs	r2, #16
 8002792:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2203      	movs	r2, #3
 8002798:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e015      	b.n	80027cc <HAL_DMAEx_List_Init+0x124>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1e8      	bne.n	8002780 <HAL_DMAEx_List_Init+0xd8>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f830 	bl	8002814 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40020050 	.word	0x40020050
 80027d8:	400200d0 	.word	0x400200d0
 80027dc:	40020150 	.word	0x40020150
 80027e0:	400201d0 	.word	0x400201d0
 80027e4:	40020250 	.word	0x40020250
 80027e8:	400202d0 	.word	0x400202d0
 80027ec:	40020350 	.word	0x40020350
 80027f0:	400203d0 	.word	0x400203d0
 80027f4:	40021050 	.word	0x40021050
 80027f8:	400210d0 	.word	0x400210d0
 80027fc:	40021150 	.word	0x40021150
 8002800:	400211d0 	.word	0x400211d0
 8002804:	40021250 	.word	0x40021250
 8002808:	400212d0 	.word	0x400212d0
 800280c:	40021350 	.word	0x40021350
 8002810:	400213d0 	.word	0x400213d0

08002814 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002824:	4313      	orrs	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a50      	ldr	r2, [pc, #320]	@ (8002970 <DMA_List_Init+0x15c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d04a      	beq.n	80028c8 <DMA_List_Init+0xb4>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a4f      	ldr	r2, [pc, #316]	@ (8002974 <DMA_List_Init+0x160>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d045      	beq.n	80028c8 <DMA_List_Init+0xb4>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a4d      	ldr	r2, [pc, #308]	@ (8002978 <DMA_List_Init+0x164>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d040      	beq.n	80028c8 <DMA_List_Init+0xb4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a4c      	ldr	r2, [pc, #304]	@ (800297c <DMA_List_Init+0x168>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d03b      	beq.n	80028c8 <DMA_List_Init+0xb4>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a4a      	ldr	r2, [pc, #296]	@ (8002980 <DMA_List_Init+0x16c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d036      	beq.n	80028c8 <DMA_List_Init+0xb4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a49      	ldr	r2, [pc, #292]	@ (8002984 <DMA_List_Init+0x170>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d031      	beq.n	80028c8 <DMA_List_Init+0xb4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a47      	ldr	r2, [pc, #284]	@ (8002988 <DMA_List_Init+0x174>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d02c      	beq.n	80028c8 <DMA_List_Init+0xb4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a46      	ldr	r2, [pc, #280]	@ (800298c <DMA_List_Init+0x178>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d027      	beq.n	80028c8 <DMA_List_Init+0xb4>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a44      	ldr	r2, [pc, #272]	@ (8002990 <DMA_List_Init+0x17c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d022      	beq.n	80028c8 <DMA_List_Init+0xb4>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a43      	ldr	r2, [pc, #268]	@ (8002994 <DMA_List_Init+0x180>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d01d      	beq.n	80028c8 <DMA_List_Init+0xb4>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a41      	ldr	r2, [pc, #260]	@ (8002998 <DMA_List_Init+0x184>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d018      	beq.n	80028c8 <DMA_List_Init+0xb4>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a40      	ldr	r2, [pc, #256]	@ (800299c <DMA_List_Init+0x188>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d013      	beq.n	80028c8 <DMA_List_Init+0xb4>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a3e      	ldr	r2, [pc, #248]	@ (80029a0 <DMA_List_Init+0x18c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00e      	beq.n	80028c8 <DMA_List_Init+0xb4>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3d      	ldr	r2, [pc, #244]	@ (80029a4 <DMA_List_Init+0x190>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d009      	beq.n	80028c8 <DMA_List_Init+0xb4>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a3b      	ldr	r2, [pc, #236]	@ (80029a8 <DMA_List_Init+0x194>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <DMA_List_Init+0xb4>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a3a      	ldr	r2, [pc, #232]	@ (80029ac <DMA_List_Init+0x198>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d101      	bne.n	80028cc <DMA_List_Init+0xb8>
 80028c8:	2301      	movs	r3, #1
 80028ca:	e000      	b.n	80028ce <DMA_List_Init+0xba>
 80028cc:	2300      	movs	r3, #0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d004      	beq.n	80028dc <DMA_List_Init+0xc8>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2200      	movs	r2, #0
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002900:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2200      	movs	r2, #0
 8002918:	651a      	str	r2, [r3, #80]	@ 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1a      	ldr	r2, [pc, #104]	@ (8002988 <DMA_List_Init+0x174>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d00e      	beq.n	8002942 <DMA_List_Init+0x12e>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a18      	ldr	r2, [pc, #96]	@ (800298c <DMA_List_Init+0x178>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d009      	beq.n	8002942 <DMA_List_Init+0x12e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1d      	ldr	r2, [pc, #116]	@ (80029a8 <DMA_List_Init+0x194>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d004      	beq.n	8002942 <DMA_List_Init+0x12e>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1b      	ldr	r2, [pc, #108]	@ (80029ac <DMA_List_Init+0x198>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d101      	bne.n	8002946 <DMA_List_Init+0x132>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <DMA_List_Init+0x134>
 8002946:	2300      	movs	r3, #0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <DMA_List_Init+0x148>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2200      	movs	r2, #0
 8002952:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2200      	movs	r2, #0
 800295a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2200      	movs	r2, #0
 8002962:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	40020050 	.word	0x40020050
 8002974:	400200d0 	.word	0x400200d0
 8002978:	40020150 	.word	0x40020150
 800297c:	400201d0 	.word	0x400201d0
 8002980:	40020250 	.word	0x40020250
 8002984:	400202d0 	.word	0x400202d0
 8002988:	40020350 	.word	0x40020350
 800298c:	400203d0 	.word	0x400203d0
 8002990:	40021050 	.word	0x40021050
 8002994:	400210d0 	.word	0x400210d0
 8002998:	40021150 	.word	0x40021150
 800299c:	400211d0 	.word	0x400211d0
 80029a0:	40021250 	.word	0x40021250
 80029a4:	400212d0 	.word	0x400212d0
 80029a8:	40021350 	.word	0x40021350
 80029ac:	400213d0 	.word	0x400213d0

080029b0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b087      	sub	sp, #28
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029be:	e136      	b.n	8002c2e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2101      	movs	r1, #1
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	4013      	ands	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 8128 	beq.w	8002c28 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d003      	beq.n	80029e8 <HAL_GPIO_Init+0x38>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b12      	cmp	r3, #18
 80029e6:	d125      	bne.n	8002a34 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	220f      	movs	r2, #15
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f003 020f 	and.w	r2, r3, #15
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	08da      	lsrs	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3208      	adds	r2, #8
 8002a2e:	6979      	ldr	r1, [r7, #20]
 8002a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0203 	and.w	r2, r3, #3
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d00b      	beq.n	8002a88 <HAL_GPIO_Init+0xd8>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d007      	beq.n	8002a88 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a7c:	2b11      	cmp	r3, #17
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b12      	cmp	r3, #18
 8002a86:	d130      	bne.n	8002aea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	2203      	movs	r2, #3
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002abe:	2201      	movs	r2, #1
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4013      	ands	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	091b      	lsrs	r3, r3, #4
 8002ad4:	f003 0201 	and.w	r2, r3, #1
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d017      	beq.n	8002b22 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	2203      	movs	r2, #3
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43db      	mvns	r3, r3
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4013      	ands	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d07c      	beq.n	8002c28 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002b2e:	4a47      	ldr	r2, [pc, #284]	@ (8002c4c <HAL_GPIO_Init+0x29c>)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3318      	adds	r3, #24
 8002b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0a9a      	lsrs	r2, r3, #10
 8002b56:	4b3e      	ldr	r3, [pc, #248]	@ (8002c50 <HAL_GPIO_Init+0x2a0>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	f002 0203 	and.w	r2, r2, #3
 8002b60:	00d2      	lsls	r2, r2, #3
 8002b62:	4093      	lsls	r3, r2
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002b6a:	4938      	ldr	r1, [pc, #224]	@ (8002c4c <HAL_GPIO_Init+0x29c>)
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	3318      	adds	r3, #24
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002b78:	4b34      	ldr	r3, [pc, #208]	@ (8002c4c <HAL_GPIO_Init+0x29c>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4013      	ands	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c4c <HAL_GPIO_Init+0x29c>)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c4c <HAL_GPIO_Init+0x29c>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	43db      	mvns	r3, r3
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002bc6:	4a21      	ldr	r2, [pc, #132]	@ (8002c4c <HAL_GPIO_Init+0x29c>)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c4c <HAL_GPIO_Init+0x29c>)
 8002bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bd2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002bf2:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <HAL_GPIO_Init+0x29c>)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002bfa:	4b14      	ldr	r3, [pc, #80]	@ (8002c4c <HAL_GPIO_Init+0x29c>)
 8002bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <HAL_GPIO_Init+0x29c>)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f47f aec1 	bne.w	80029c0 <HAL_GPIO_Init+0x10>
  }
}
 8002c3e:	bf00      	nop
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	44022000 	.word	0x44022000
 8002c50:	002f7f7f 	.word	0x002f7f7f

08002c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
 8002c60:	4613      	mov	r3, r2
 8002c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c64:	787b      	ldrb	r3, [r7, #1]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c6a:	887a      	ldrh	r2, [r7, #2]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c70:	e002      	b.n	8002c78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	f000 bc28 	b.w	80034e8 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c98:	4b94      	ldr	r3, [pc, #592]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 0318 	and.w	r3, r3, #24
 8002ca0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8002ca2:	4b92      	ldr	r3, [pc, #584]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05b      	beq.n	8002d70 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d005      	beq.n	8002cca <HAL_RCC_OscConfig+0x46>
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	2b18      	cmp	r3, #24
 8002cc2:	d114      	bne.n	8002cee <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d111      	bne.n	8002cee <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d102      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f000 bc08 	b.w	80034e8 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002cd8:	4b84      	ldr	r3, [pc, #528]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	041b      	lsls	r3, r3, #16
 8002ce6:	4981      	ldr	r1, [pc, #516]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8002cec:	e040      	b.n	8002d70 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d023      	beq.n	8002d3e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d02:	f7ff fab1 	bl	8002268 <HAL_GetTick>
 8002d06:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d08:	e008      	b.n	8002d1c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002d0a:	f7ff faad 	bl	8002268 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d901      	bls.n	8002d1c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e3e5      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8002d1c:	4b73      	ldr	r3, [pc, #460]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0f0      	beq.n	8002d0a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8002d28:	4b70      	ldr	r3, [pc, #448]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	041b      	lsls	r3, r3, #16
 8002d36:	496d      	ldr	r1, [pc, #436]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	618b      	str	r3, [r1, #24]
 8002d3c:	e018      	b.n	8002d70 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d3e:	4b6b      	ldr	r3, [pc, #428]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6a      	ldr	r2, [pc, #424]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002d44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7ff fa8d 	bl	8002268 <HAL_GetTick>
 8002d4e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8002d52:	f7ff fa89 	bl	8002268 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e3c1      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8002d64:	4b61      	ldr	r3, [pc, #388]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1f0      	bne.n	8002d52 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 80a0 	beq.w	8002ebe <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	2b10      	cmp	r3, #16
 8002d82:	d005      	beq.n	8002d90 <HAL_RCC_OscConfig+0x10c>
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b18      	cmp	r3, #24
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f040 8092 	bne.w	8002ebe <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e3a4      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x132>
 8002da8:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a4f      	ldr	r2, [pc, #316]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002db2:	6013      	str	r3, [r2, #0]
 8002db4:	e058      	b.n	8002e68 <HAL_RCC_OscConfig+0x1e4>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d112      	bne.n	8002de4 <HAL_RCC_OscConfig+0x160>
 8002dbe:	4b4b      	ldr	r3, [pc, #300]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002dc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b48      	ldr	r3, [pc, #288]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a47      	ldr	r2, [pc, #284]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002dd0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	4b45      	ldr	r3, [pc, #276]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a44      	ldr	r2, [pc, #272]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e041      	b.n	8002e68 <HAL_RCC_OscConfig+0x1e4>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dec:	d112      	bne.n	8002e14 <HAL_RCC_OscConfig+0x190>
 8002dee:	4b3f      	ldr	r3, [pc, #252]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a3e      	ldr	r2, [pc, #248]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a3b      	ldr	r2, [pc, #236]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e00:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	4b39      	ldr	r3, [pc, #228]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a38      	ldr	r2, [pc, #224]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e029      	b.n	8002e68 <HAL_RCC_OscConfig+0x1e4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8002e1c:	d112      	bne.n	8002e44 <HAL_RCC_OscConfig+0x1c0>
 8002e1e:	4b33      	ldr	r3, [pc, #204]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a32      	ldr	r2, [pc, #200]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b30      	ldr	r3, [pc, #192]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a2f      	ldr	r2, [pc, #188]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e30:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b2d      	ldr	r3, [pc, #180]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e011      	b.n	8002e68 <HAL_RCC_OscConfig+0x1e4>
 8002e44:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a28      	ldr	r2, [pc, #160]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e4e:	6013      	str	r3, [r2, #0]
 8002e50:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a25      	ldr	r2, [pc, #148]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b23      	ldr	r3, [pc, #140]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a22      	ldr	r2, [pc, #136]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e62:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e70:	f7ff f9fa 	bl	8002268 <HAL_GetTick>
 8002e74:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002e78:	f7ff f9f6 	bl	8002268 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	@ 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e32e      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8a:	4b18      	ldr	r3, [pc, #96]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0x1f4>
 8002e96:	e012      	b.n	8002ebe <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7ff f9e6 	bl	8002268 <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002ea0:	f7ff f9e2 	bl	8002268 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	@ 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e31a      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <HAL_RCC_OscConfig+0x268>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 809a 	beq.w	8003000 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_RCC_OscConfig+0x25a>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	2b18      	cmp	r3, #24
 8002ed6:	d149      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d146      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d104      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e2fe      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
 8002eea:	bf00      	nop
 8002eec:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8002ef6:	4b9a      	ldr	r3, [pc, #616]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0218 	and.w	r2, r3, #24
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d014      	beq.n	8002f30 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002f06:	4b96      	ldr	r3, [pc, #600]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 0218 	bic.w	r2, r3, #24
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	4993      	ldr	r1, [pc, #588]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8002f18:	f000 fdd0 	bl	8003abc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f1c:	4b91      	ldr	r3, [pc, #580]	@ (8003164 <HAL_RCC_OscConfig+0x4e0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff f917 	bl	8002154 <HAL_InitTick>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e2db      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7ff f99a 	bl	8002268 <HAL_GetTick>
 8002f34:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f38:	f7ff f996 	bl	8002268 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e2ce      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4a:	4b85      	ldr	r3, [pc, #532]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002f56:	4b82      	ldr	r3, [pc, #520]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	041b      	lsls	r3, r3, #16
 8002f64:	497e      	ldr	r1, [pc, #504]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8002f6a:	e049      	b.n	8003000 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d02c      	beq.n	8002fce <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8002f74:	4b7a      	ldr	r3, [pc, #488]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f023 0218 	bic.w	r2, r3, #24
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4977      	ldr	r1, [pc, #476]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8002f86:	4b76      	ldr	r3, [pc, #472]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a75      	ldr	r2, [pc, #468]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7ff f969 	bl	8002268 <HAL_GetTick>
 8002f96:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f9a:	f7ff f965 	bl	8002268 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e29d      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fac:	4b6c      	ldr	r3, [pc, #432]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8002fb8:	4b69      	ldr	r3, [pc, #420]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	041b      	lsls	r3, r3, #16
 8002fc6:	4966      	ldr	r1, [pc, #408]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	610b      	str	r3, [r1, #16]
 8002fcc:	e018      	b.n	8003000 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fce:	4b64      	ldr	r3, [pc, #400]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a63      	ldr	r2, [pc, #396]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002fd4:	f023 0301 	bic.w	r3, r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fda:	f7ff f945 	bl	8002268 <HAL_GetTick>
 8002fde:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002fe2:	f7ff f941 	bl	8002268 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e279      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ff4:	4b5a      	ldr	r3, [pc, #360]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0302 	and.w	r3, r3, #2
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1f0      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d03c      	beq.n	8003086 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01c      	beq.n	800304e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003014:	4b52      	ldr	r3, [pc, #328]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003016:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800301a:	4a51      	ldr	r2, [pc, #324]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 800301c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003020:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003024:	f7ff f920 	bl	8002268 <HAL_GetTick>
 8003028:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800302c:	f7ff f91c 	bl	8002268 <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e254      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800303e:	4b48      	ldr	r3, [pc, #288]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003040:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0ef      	beq.n	800302c <HAL_RCC_OscConfig+0x3a8>
 800304c:	e01b      	b.n	8003086 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304e:	4b44      	ldr	r3, [pc, #272]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003054:	4a42      	ldr	r2, [pc, #264]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003056:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800305a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305e:	f7ff f903 	bl	8002268 <HAL_GetTick>
 8003062:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003064:	e008      	b.n	8003078 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003066:	f7ff f8ff 	bl	8002268 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e237      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003078:	4b39      	ldr	r3, [pc, #228]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 800307a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800307e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1ef      	bne.n	8003066 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80d2 	beq.w	8003238 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003094:	4b34      	ldr	r3, [pc, #208]	@ (8003168 <HAL_RCC_OscConfig+0x4e4>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d118      	bne.n	80030d2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80030a0:	4b31      	ldr	r3, [pc, #196]	@ (8003168 <HAL_RCC_OscConfig+0x4e4>)
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	4a30      	ldr	r2, [pc, #192]	@ (8003168 <HAL_RCC_OscConfig+0x4e4>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ac:	f7ff f8dc 	bl	8002268 <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b4:	f7ff f8d8 	bl	8002268 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e210      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80030c6:	4b28      	ldr	r3, [pc, #160]	@ (8003168 <HAL_RCC_OscConfig+0x4e4>)
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d108      	bne.n	80030ec <HAL_RCC_OscConfig+0x468>
 80030da:	4b21      	ldr	r3, [pc, #132]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 80030dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030ea:	e074      	b.n	80031d6 <HAL_RCC_OscConfig+0x552>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d118      	bne.n	8003126 <HAL_RCC_OscConfig+0x4a2>
 80030f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 80030f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030fa:	4a19      	ldr	r2, [pc, #100]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003104:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800310a:	4a15      	ldr	r2, [pc, #84]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 800310c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003110:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003114:	4b12      	ldr	r3, [pc, #72]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800311a:	4a11      	ldr	r2, [pc, #68]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003124:	e057      	b.n	80031d6 <HAL_RCC_OscConfig+0x552>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	2b05      	cmp	r3, #5
 800312c:	d11e      	bne.n	800316c <HAL_RCC_OscConfig+0x4e8>
 800312e:	4b0c      	ldr	r3, [pc, #48]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003134:	4a0a      	ldr	r2, [pc, #40]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800313e:	4b08      	ldr	r3, [pc, #32]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003144:	4a06      	ldr	r2, [pc, #24]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003146:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800314a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800314e:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003154:	4a02      	ldr	r2, [pc, #8]	@ (8003160 <HAL_RCC_OscConfig+0x4dc>)
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800315e:	e03a      	b.n	80031d6 <HAL_RCC_OscConfig+0x552>
 8003160:	44020c00 	.word	0x44020c00
 8003164:	20000008 	.word	0x20000008
 8003168:	44020800 	.word	0x44020800
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	2b85      	cmp	r3, #133	@ 0x85
 8003172:	d118      	bne.n	80031a6 <HAL_RCC_OscConfig+0x522>
 8003174:	4ba2      	ldr	r3, [pc, #648]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003176:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800317a:	4aa1      	ldr	r2, [pc, #644]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003184:	4b9e      	ldr	r3, [pc, #632]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003186:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800318a:	4a9d      	ldr	r2, [pc, #628]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 800318c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003190:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003194:	4b9a      	ldr	r3, [pc, #616]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800319a:	4a99      	ldr	r2, [pc, #612]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031a4:	e017      	b.n	80031d6 <HAL_RCC_OscConfig+0x552>
 80031a6:	4b96      	ldr	r3, [pc, #600]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80031a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031ac:	4a94      	ldr	r2, [pc, #592]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031b6:	4b92      	ldr	r3, [pc, #584]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80031b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031bc:	4a90      	ldr	r2, [pc, #576]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80031c6:	4b8e      	ldr	r3, [pc, #568]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80031c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80031cc:	4a8c      	ldr	r2, [pc, #560]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80031ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031de:	f7ff f843 	bl	8002268 <HAL_GetTick>
 80031e2:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031e4:	e00a      	b.n	80031fc <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e6:	f7ff f83f 	bl	8002268 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e175      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fc:	4b80      	ldr	r3, [pc, #512]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80031fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0ed      	beq.n	80031e6 <HAL_RCC_OscConfig+0x562>
 800320a:	e015      	b.n	8003238 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800320c:	f7ff f82c 	bl	8002268 <HAL_GetTick>
 8003210:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003212:	e00a      	b.n	800322a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003214:	f7ff f828 	bl	8002268 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e15e      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800322a:	4b75      	ldr	r3, [pc, #468]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 800322c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ed      	bne.n	8003214 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d036      	beq.n	80032b2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	d019      	beq.n	8003280 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800324c:	4b6c      	ldr	r3, [pc, #432]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a6b      	ldr	r2, [pc, #428]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003252:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003256:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003258:	f7ff f806 	bl	8002268 <HAL_GetTick>
 800325c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003260:	f7ff f802 	bl	8002268 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e13a      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003272:	4b63      	ldr	r3, [pc, #396]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x5dc>
 800327e:	e018      	b.n	80032b2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003280:	4b5f      	ldr	r3, [pc, #380]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a5e      	ldr	r2, [pc, #376]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003286:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800328a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fe ffec 	bl	8002268 <HAL_GetTick>
 8003290:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8003294:	f7fe ffe8 	bl	8002268 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e120      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80032a6:	4b56      	ldr	r3, [pc, #344]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8115 	beq.w	80034e6 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b18      	cmp	r3, #24
 80032c0:	f000 80af 	beq.w	8003422 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	f040 8086 	bne.w	80033da <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80032ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a4b      	ldr	r2, [pc, #300]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80032d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032da:	f7fe ffc5 	bl	8002268 <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80032e2:	f7fe ffc1 	bl	8002268 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0f9      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80032f4:	4b42      	ldr	r3, [pc, #264]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f0      	bne.n	80032e2 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8003300:	4b3f      	ldr	r3, [pc, #252]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003308:	f023 0303 	bic.w	r3, r3, #3
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003314:	0212      	lsls	r2, r2, #8
 8003316:	430a      	orrs	r2, r1
 8003318:	4939      	ldr	r1, [pc, #228]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 800331a:	4313      	orrs	r3, r2
 800331c:	628b      	str	r3, [r1, #40]	@ 0x28
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003322:	3b01      	subs	r3, #1
 8003324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332c:	3b01      	subs	r3, #1
 800332e:	025b      	lsls	r3, r3, #9
 8003330:	b29b      	uxth	r3, r3
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003338:	3b01      	subs	r3, #1
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003340:	431a      	orrs	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	3b01      	subs	r3, #1
 8003348:	061b      	lsls	r3, r3, #24
 800334a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800334e:	492c      	ldr	r1, [pc, #176]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003350:	4313      	orrs	r3, r2
 8003352:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8003354:	4b2a      	ldr	r3, [pc, #168]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003358:	4a29      	ldr	r2, [pc, #164]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 800335a:	f023 0310 	bic.w	r3, r3, #16
 800335e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003364:	4a26      	ldr	r2, [pc, #152]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800336a:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 800336c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800336e:	4a24      	ldr	r2, [pc, #144]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003370:	f043 0310 	orr.w	r3, r3, #16
 8003374:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8003376:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	f023 020c 	bic.w	r2, r3, #12
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003382:	491f      	ldr	r1, [pc, #124]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003384:	4313      	orrs	r3, r2
 8003386:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8003388:	4b1d      	ldr	r3, [pc, #116]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 800338a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338c:	f023 0220 	bic.w	r2, r3, #32
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003394:	491a      	ldr	r1, [pc, #104]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800339a:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 800339c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339e:	4a18      	ldr	r2, [pc, #96]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80033a6:	4b16      	ldr	r3, [pc, #88]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a15      	ldr	r2, [pc, #84]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80033ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fe ff59 	bl	8002268 <HAL_GetTick>
 80033b6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80033ba:	f7fe ff55 	bl	8002268 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e08d      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80033cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x736>
 80033d8:	e085      	b.n	80034e6 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80033da:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a08      	ldr	r2, [pc, #32]	@ (8003400 <HAL_RCC_OscConfig+0x77c>)
 80033e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fe ff3f 	bl	8002268 <HAL_GetTick>
 80033ea:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80033ee:	f7fe ff3b 	bl	8002268 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d903      	bls.n	8003404 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e073      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
 8003400:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003404:	4b3a      	ldr	r3, [pc, #232]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ee      	bne.n	80033ee <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003410:	4b37      	ldr	r3, [pc, #220]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 8003412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003414:	4a36      	ldr	r2, [pc, #216]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 8003416:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800341a:	f023 0303 	bic.w	r3, r3, #3
 800341e:	6293      	str	r3, [r2, #40]	@ 0x28
 8003420:	e061      	b.n	80034e6 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003422:	4b33      	ldr	r3, [pc, #204]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 8003424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003426:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003428:	4b31      	ldr	r3, [pc, #196]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 800342a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800342c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003432:	2b01      	cmp	r3, #1
 8003434:	d031      	beq.n	800349a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d12a      	bne.n	800349a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d122      	bne.n	800349a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d11a      	bne.n	800349a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	0a5b      	lsrs	r3, r3, #9
 8003468:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003470:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8003472:	429a      	cmp	r2, r3
 8003474:	d111      	bne.n	800349a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003482:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d108      	bne.n	800349a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	0e1b      	lsrs	r3, r3, #24
 800348c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d001      	beq.n	800349e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e024      	b.n	80034e8 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800349e:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 80034a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a2:	08db      	lsrs	r3, r3, #3
 80034a4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d01a      	beq.n	80034e6 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80034b0:	4b0f      	ldr	r3, [pc, #60]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 80034b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b4:	4a0e      	ldr	r2, [pc, #56]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 80034b6:	f023 0310 	bic.w	r3, r3, #16
 80034ba:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe fed4 	bl	8002268 <HAL_GetTick>
 80034c0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80034c2:	bf00      	nop
 80034c4:	f7fe fed0 	bl	8002268 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d0f9      	beq.n	80034c4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d4:	4a06      	ldr	r2, [pc, #24]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 80034dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034de:	4a04      	ldr	r2, [pc, #16]	@ (80034f0 <HAL_RCC_OscConfig+0x86c>)
 80034e0:	f043 0310 	orr.w	r3, r3, #16
 80034e4:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	44020c00 	.word	0x44020c00

080034f4 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d101      	bne.n	8003508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e19e      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003508:	4b83      	ldr	r3, [pc, #524]	@ (8003718 <HAL_RCC_ClockConfig+0x224>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 030f 	and.w	r3, r3, #15
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d910      	bls.n	8003538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b80      	ldr	r3, [pc, #512]	@ (8003718 <HAL_RCC_ClockConfig+0x224>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 020f 	bic.w	r2, r3, #15
 800351e:	497e      	ldr	r1, [pc, #504]	@ (8003718 <HAL_RCC_ClockConfig+0x224>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b7c      	ldr	r3, [pc, #496]	@ (8003718 <HAL_RCC_ClockConfig+0x224>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e186      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d012      	beq.n	800356a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695a      	ldr	r2, [r3, #20]
 8003548:	4b74      	ldr	r3, [pc, #464]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	0a1b      	lsrs	r3, r3, #8
 800354e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003552:	429a      	cmp	r2, r3
 8003554:	d909      	bls.n	800356a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003556:	4b71      	ldr	r3, [pc, #452]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	496d      	ldr	r1, [pc, #436]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 8003566:	4313      	orrs	r3, r2
 8003568:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d012      	beq.n	800359c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691a      	ldr	r2, [r3, #16]
 800357a:	4b68      	ldr	r3, [pc, #416]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003584:	429a      	cmp	r2, r3
 8003586:	d909      	bls.n	800359c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8003588:	4b64      	ldr	r3, [pc, #400]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	4961      	ldr	r1, [pc, #388]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 8003598:	4313      	orrs	r3, r2
 800359a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	4b5b      	ldr	r3, [pc, #364]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d908      	bls.n	80035ca <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80035b8:	4b58      	ldr	r3, [pc, #352]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	4955      	ldr	r1, [pc, #340]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d010      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689a      	ldr	r2, [r3, #8]
 80035da:	4b50      	ldr	r3, [pc, #320]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f003 030f 	and.w	r3, r3, #15
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d908      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80035e6:	4b4d      	ldr	r3, [pc, #308]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 020f 	bic.w	r2, r3, #15
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	494a      	ldr	r1, [pc, #296]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 8093 	beq.w	800372c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d107      	bne.n	800361e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800360e:	4b43      	ldr	r3, [pc, #268]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d121      	bne.n	800365e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e113      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003626:	4b3d      	ldr	r3, [pc, #244]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d115      	bne.n	800365e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e107      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800363e:	4b37      	ldr	r3, [pc, #220]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0fb      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800364e:	4b33      	ldr	r3, [pc, #204]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e0f3      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800365e:	4b2f      	ldr	r3, [pc, #188]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	492c      	ldr	r1, [pc, #176]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 800366c:	4313      	orrs	r3, r2
 800366e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003670:	f7fe fdfa 	bl	8002268 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b03      	cmp	r3, #3
 800367c:	d112      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7fe fdf2 	bl	8002268 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e0d7      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003696:	4b21      	ldr	r3, [pc, #132]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f003 0318 	and.w	r3, r3, #24
 800369e:	2b18      	cmp	r3, #24
 80036a0:	d1ee      	bne.n	8003680 <HAL_RCC_ClockConfig+0x18c>
 80036a2:	e043      	b.n	800372c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d112      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80036ae:	f7fe fddb 	bl	8002268 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0c0      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80036c4:	4b15      	ldr	r3, [pc, #84]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f003 0318 	and.w	r3, r3, #24
 80036cc:	2b10      	cmp	r3, #16
 80036ce:	d1ee      	bne.n	80036ae <HAL_RCC_ClockConfig+0x1ba>
 80036d0:	e02c      	b.n	800372c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d122      	bne.n	8003720 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80036dc:	f7fe fdc4 	bl	8002268 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0a9      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80036f2:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <HAL_RCC_ClockConfig+0x228>)
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	f003 0318 	and.w	r3, r3, #24
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d1ee      	bne.n	80036dc <HAL_RCC_ClockConfig+0x1e8>
 80036fe:	e015      	b.n	800372c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7fe fdb2 	bl	8002268 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d906      	bls.n	8003720 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e097      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
 8003716:	bf00      	nop
 8003718:	40022000 	.word	0x40022000
 800371c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003720:	4b4b      	ldr	r3, [pc, #300]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f003 0318 	and.w	r3, r3, #24
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e9      	bne.n	8003700 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d010      	beq.n	800375a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	4b44      	ldr	r3, [pc, #272]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	429a      	cmp	r2, r3
 8003746:	d208      	bcs.n	800375a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8003748:	4b41      	ldr	r3, [pc, #260]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f023 020f 	bic.w	r2, r3, #15
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	493e      	ldr	r1, [pc, #248]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 8003756:	4313      	orrs	r3, r2
 8003758:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800375a:	4b3e      	ldr	r3, [pc, #248]	@ (8003854 <HAL_RCC_ClockConfig+0x360>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d210      	bcs.n	800378a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003768:	4b3a      	ldr	r3, [pc, #232]	@ (8003854 <HAL_RCC_ClockConfig+0x360>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 020f 	bic.w	r2, r3, #15
 8003770:	4938      	ldr	r1, [pc, #224]	@ (8003854 <HAL_RCC_ClockConfig+0x360>)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003778:	4b36      	ldr	r3, [pc, #216]	@ (8003854 <HAL_RCC_ClockConfig+0x360>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d001      	beq.n	800378a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e05d      	b.n	8003846 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0304 	and.w	r3, r3, #4
 8003792:	2b00      	cmp	r3, #0
 8003794:	d010      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d208      	bcs.n	80037b8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80037a6:	4b2a      	ldr	r3, [pc, #168]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	4927      	ldr	r1, [pc, #156]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	4b21      	ldr	r3, [pc, #132]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d209      	bcs.n	80037ea <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80037d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	491a      	ldr	r1, [pc, #104]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d012      	beq.n	800381c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	4b15      	ldr	r3, [pc, #84]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003804:	429a      	cmp	r2, r3
 8003806:	d209      	bcs.n	800381c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8003808:	4b11      	ldr	r3, [pc, #68]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	490e      	ldr	r1, [pc, #56]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800381c:	f000 f822 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003820:	4602      	mov	r2, r0
 8003822:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <HAL_RCC_ClockConfig+0x35c>)
 8003824:	6a1b      	ldr	r3, [r3, #32]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	490b      	ldr	r1, [pc, #44]	@ (8003858 <HAL_RCC_ClockConfig+0x364>)
 800382c:	5ccb      	ldrb	r3, [r1, r3]
 800382e:	fa22 f303 	lsr.w	r3, r2, r3
 8003832:	4a0a      	ldr	r2, [pc, #40]	@ (800385c <HAL_RCC_ClockConfig+0x368>)
 8003834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003836:	4b0a      	ldr	r3, [pc, #40]	@ (8003860 <HAL_RCC_ClockConfig+0x36c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe fc8a 	bl	8002154 <HAL_InitTick>
 8003840:	4603      	mov	r3, r0
 8003842:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8003844:	7afb      	ldrb	r3, [r7, #11]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	44020c00 	.word	0x44020c00
 8003854:	40022000 	.word	0x40022000
 8003858:	0800c3f4 	.word	0x0800c3f4
 800385c:	20000004 	.word	0x20000004
 8003860:	20000008 	.word	0x20000008

08003864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	b089      	sub	sp, #36	@ 0x24
 8003868:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800386a:	4b8c      	ldr	r3, [pc, #560]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 800386c:	69db      	ldr	r3, [r3, #28]
 800386e:	f003 0318 	and.w	r3, r3, #24
 8003872:	2b08      	cmp	r3, #8
 8003874:	d102      	bne.n	800387c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003876:	4b8a      	ldr	r3, [pc, #552]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e107      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800387c:	4b87      	ldr	r3, [pc, #540]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	f003 0318 	and.w	r3, r3, #24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d112      	bne.n	80038ae <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003888:	4b84      	ldr	r3, [pc, #528]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0320 	and.w	r3, r3, #32
 8003890:	2b00      	cmp	r3, #0
 8003892:	d009      	beq.n	80038a8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8003894:	4b81      	ldr	r3, [pc, #516]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	08db      	lsrs	r3, r3, #3
 800389a:	f003 0303 	and.w	r3, r3, #3
 800389e:	4a81      	ldr	r2, [pc, #516]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x240>)
 80038a0:	fa22 f303 	lsr.w	r3, r2, r3
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e0f1      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80038a8:	4b7e      	ldr	r3, [pc, #504]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x240>)
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	e0ee      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038ae:	4b7b      	ldr	r3, [pc, #492]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f003 0318 	and.w	r3, r3, #24
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d102      	bne.n	80038c0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038ba:	4b7b      	ldr	r3, [pc, #492]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0x244>)
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	e0e5      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038c0:	4b76      	ldr	r3, [pc, #472]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f003 0318 	and.w	r3, r3, #24
 80038c8:	2b18      	cmp	r3, #24
 80038ca:	f040 80dd 	bne.w	8003a88 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80038ce:	4b73      	ldr	r3, [pc, #460]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	f003 0303 	and.w	r3, r3, #3
 80038d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80038d8:	4b70      	ldr	r3, [pc, #448]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 80038da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80038e4:	4b6d      	ldr	r3, [pc, #436]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 80038e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80038f0:	4b6a      	ldr	r3, [pc, #424]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80038f4:	08db      	lsrs	r3, r3, #3
 80038f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	fb02 f303 	mul.w	r3, r2, r3
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003908:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80b7 	beq.w	8003a82 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d003      	beq.n	8003922 <HAL_RCC_GetSysClockFreq+0xbe>
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d056      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x16a>
 8003920:	e077      	b.n	8003a12 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8003922:	4b5e      	ldr	r3, [pc, #376]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02d      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800392e:	4b5b      	ldr	r3, [pc, #364]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	08db      	lsrs	r3, r3, #3
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	4a5a      	ldr	r2, [pc, #360]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x240>)
 800393a:	fa22 f303 	lsr.w	r3, r2, r3
 800393e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	ee07 3a90 	vmov	s15, r3
 8003950:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003954:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003958:	4b50      	ldr	r3, [pc, #320]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 800395a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800395c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003960:	ee07 3a90 	vmov	s15, r3
 8003964:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003968:	ed97 6a02 	vldr	s12, [r7, #8]
 800396c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8003aac <HAL_RCC_GetSysClockFreq+0x248>
 8003970:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003974:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8003978:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800397c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003984:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8003988:	e065      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003994:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8003ab0 <HAL_RCC_GetSysClockFreq+0x24c>
 8003998:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800399c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 800399e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a4:	ee07 3a90 	vmov	s15, r3
 80039a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80039ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80039b0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8003aac <HAL_RCC_GetSysClockFreq+0x248>
 80039b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80039bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80039cc:	e043      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003ab4 <HAL_RCC_GetSysClockFreq+0x250>
 80039dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039e0:	4b2e      	ldr	r3, [pc, #184]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 80039e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e8:	ee07 3a90 	vmov	s15, r3
 80039ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80039f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80039f4:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8003aac <HAL_RCC_GetSysClockFreq+0x248>
 80039f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80039fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a0c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8003a10:	e021      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	ee07 3a90 	vmov	s15, r3
 8003a18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a1c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003ab8 <HAL_RCC_GetSysClockFreq+0x254>
 8003a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a24:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2c:	ee07 3a90 	vmov	s15, r3
 8003a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a34:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a38:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8003aac <HAL_RCC_GetSysClockFreq+0x248>
 8003a3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a50:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8003a54:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8003a56:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x238>)
 8003a58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a5a:	0a5b      	lsrs	r3, r3, #9
 8003a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a60:	3301      	adds	r3, #1
 8003a62:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a6e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a7a:	ee17 3a90 	vmov	r3, s15
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e004      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	e001      	b.n	8003a8c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8003a88:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x240>)
 8003a8a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8003a8c:	69fb      	ldr	r3, [r7, #28]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3724      	adds	r7, #36	@ 0x24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	44020c00 	.word	0x44020c00
 8003aa0:	003d0900 	.word	0x003d0900
 8003aa4:	03d09000 	.word	0x03d09000
 8003aa8:	016e3600 	.word	0x016e3600
 8003aac:	46000000 	.word	0x46000000
 8003ab0:	4c742400 	.word	0x4c742400
 8003ab4:	4bb71b00 	.word	0x4bb71b00
 8003ab8:	4a742400 	.word	0x4a742400

08003abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003ac0:	f7ff fed0 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <HAL_RCC_GetHCLKFreq+0x2c>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003aca:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003ace:	4907      	ldr	r1, [pc, #28]	@ (8003aec <HAL_RCC_GetHCLKFreq+0x30>)
 8003ad0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8003ad2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8003ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8003ada:	4a05      	ldr	r2, [pc, #20]	@ (8003af0 <HAL_RCC_GetHCLKFreq+0x34>)
 8003adc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8003ade:	4b04      	ldr	r3, [pc, #16]	@ (8003af0 <HAL_RCC_GetHCLKFreq+0x34>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	44020c00 	.word	0x44020c00
 8003aec:	0800c3f4 	.word	0x0800c3f4
 8003af0:	20000004 	.word	0x20000004

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8003af8:	f7ff ffe0 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003afc:	4602      	mov	r2, r0
 8003afe:	4b06      	ldr	r3, [pc, #24]	@ (8003b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	4904      	ldr	r1, [pc, #16]	@ (8003b1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b0a:	5ccb      	ldrb	r3, [r1, r3]
 8003b0c:	f003 031f 	and.w	r3, r3, #31
 8003b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	44020c00 	.word	0x44020c00
 8003b1c:	0800c404 	.word	0x0800c404

08003b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8003b24:	f7ff ffca 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	4904      	ldr	r1, [pc, #16]	@ (8003b48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b36:	5ccb      	ldrb	r3, [r1, r3]
 8003b38:	f003 031f 	and.w	r3, r3, #31
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	44020c00 	.word	0x44020c00
 8003b48:	0800c404 	.word	0x0800c404

08003b4c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8003b50:	f7ff ffb4 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b06      	ldr	r3, [pc, #24]	@ (8003b70 <HAL_RCC_GetPCLK3Freq+0x24>)
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	0b1b      	lsrs	r3, r3, #12
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4904      	ldr	r1, [pc, #16]	@ (8003b74 <HAL_RCC_GetPCLK3Freq+0x28>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	44020c00 	.word	0x44020c00
 8003b74:	0800c404 	.word	0x0800c404

08003b78 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8003b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b7c:	b0aa      	sub	sp, #168	@ 0xa8
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b84:	2300      	movs	r3, #0
 8003b86:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8003b9c:	2500      	movs	r5, #0
 8003b9e:	ea54 0305 	orrs.w	r3, r4, r5
 8003ba2:	d00b      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8003ba4:	4bb8      	ldr	r3, [pc, #736]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ba6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003baa:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8003bae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	4ab4      	ldr	r2, [pc, #720]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	f002 0801 	and.w	r8, r2, #1
 8003bc8:	f04f 0900 	mov.w	r9, #0
 8003bcc:	ea58 0309 	orrs.w	r3, r8, r9
 8003bd0:	d038      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8003bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bd8:	2b05      	cmp	r3, #5
 8003bda:	d819      	bhi.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003bdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003be4 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003c19 	.word	0x08003c19
 8003be8:	08003bfd 	.word	0x08003bfd
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c19 	.word	0x08003c19
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003bfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c00:	3308      	adds	r3, #8
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 ffee 	bl	8005be4 <RCCEx_PLL2_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8003c0e:	e004      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 8003c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10c      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8003c22:	4b99      	ldr	r3, [pc, #612]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c28:	f023 0107 	bic.w	r1, r3, #7
 8003c2c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c32:	4a95      	ldr	r2, [pc, #596]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c34:	430b      	orrs	r3, r1
 8003c36:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003c3a:	e003      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003c40:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f002 0a02 	and.w	sl, r2, #2
 8003c50:	f04f 0b00 	mov.w	fp, #0
 8003c54:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c58:	d03c      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8003c5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c60:	2b28      	cmp	r3, #40	@ 0x28
 8003c62:	d01b      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x124>
 8003c64:	2b28      	cmp	r3, #40	@ 0x28
 8003c66:	d815      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d019      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d811      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003c70:	2b18      	cmp	r3, #24
 8003c72:	d017      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8003c74:	2b18      	cmp	r3, #24
 8003c76:	d80d      	bhi.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d015      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d109      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003c84:	3308      	adds	r3, #8
 8003c86:	4618      	mov	r0, r3
 8003c88:	f001 ffac 	bl	8005be4 <RCCEx_PLL2_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 8003c92:	e00a      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003c9a:	e006      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003c9c:	bf00      	nop
 8003c9e:	e004      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003ca0:	bf00      	nop
 8003ca2:	e002      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003ca4:	bf00      	nop
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 8003ca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003caa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003cb2:	4b75      	ldr	r3, [pc, #468]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003cb8:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003cbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc2:	4a71      	ldr	r2, [pc, #452]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cc4:	430b      	orrs	r3, r1
 8003cc6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003cca:	e003      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ccc:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003cd0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cdc:	f002 0304 	and.w	r3, r2, #4
 8003ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003cea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	d040      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8003cf4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003cfe:	d01e      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8003d00:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003d04:	d817      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d0a:	d01a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8003d0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d10:	d811      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d14:	d017      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003d16:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d18:	d80d      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d015      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003d1e:	2b40      	cmp	r3, #64	@ 0x40
 8003d20:	d109      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003d22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d26:	3308      	adds	r3, #8
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 ff5b 	bl	8005be4 <RCCEx_PLL2_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8003d34:	e00a      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003d3c:	e006      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003d3e:	bf00      	nop
 8003d40:	e004      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003d42:	bf00      	nop
 8003d44:	e002      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003d46:	bf00      	nop
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8003d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10c      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8003d54:	4b4c      	ldr	r3, [pc, #304]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003d5a:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003d5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d64:	4a48      	ldr	r2, [pc, #288]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003d72:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d76:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003d82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d8c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003d90:	460b      	mov	r3, r1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	d043      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8003d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003da0:	d021      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003da2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003da6:	d81a      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003da8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dac:	d01d      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x272>
 8003dae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003db2:	d814      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003db4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003db8:	d019      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x276>
 8003dba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003dbe:	d80e      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x266>
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d016      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8003dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dc8:	d109      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003dca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003dce:	3308      	adds	r3, #8
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 ff07 	bl	8005be4 <RCCEx_PLL2_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003de4:	e006      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003de6:	bf00      	nop
 8003de8:	e004      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003dea:	bf00      	nop
 8003dec:	e002      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8003df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10c      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8003dfc:	4b22      	ldr	r3, [pc, #136]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e02:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003e06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e14:	e003      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e16:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e1a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e26:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e30:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003e34:	460b      	mov	r3, r1
 8003e36:	4313      	orrs	r3, r2
 8003e38:	d03e      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8003e3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e44:	d01b      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003e46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e4a:	d814      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e50:	d017      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8003e52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e56:	d80e      	bhi.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d017      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e60:	d109      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003e62:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e66:	3308      	adds	r3, #8
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f001 febb 	bl	8005be4 <RCCEx_PLL2_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8003e74:	e00b      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003e7c:	e007      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003e7e:	bf00      	nop
 8003e80:	e005      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 8003e82:	bf00      	nop
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8003e86:	bf00      	nop
 8003e88:	44020c00 	.word	0x44020c00
        break;
 8003e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8003e96:	4ba5      	ldr	r3, [pc, #660]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003e98:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003e9c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea6:	4aa1      	ldr	r2, [pc, #644]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003ea8:	430b      	orrs	r3, r1
 8003eaa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003eae:	e003      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003eb4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ec0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ec4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	677b      	str	r3, [r7, #116]	@ 0x74
 8003eca:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	d03b      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8003ed4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ed8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003eda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ede:	d01b      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8003ee0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003ee4:	d814      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003ee6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003eea:	d017      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003eec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ef0:	d80e      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d014      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003ef6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003efa:	d109      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003efc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f00:	3308      	adds	r3, #8
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 fe6e 	bl	8005be4 <RCCEx_PLL2_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8003f0e:	e008      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10c      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8003f2a:	4b80      	ldr	r3, [pc, #512]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003f2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003f30:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8003f34:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f3a:	4a7c      	ldr	r2, [pc, #496]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003f42:	e003      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f44:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003f48:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003f4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003f58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003f62:	460b      	mov	r3, r1
 8003f64:	4313      	orrs	r3, r2
 8003f66:	d033      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8003f68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f72:	d015      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8003f74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f78:	d80e      	bhi.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d012      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8003f7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f82:	d109      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003f84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f88:	3308      	adds	r3, #8
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f001 fe2a 	bl	8005be4 <RCCEx_PLL2_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8003f96:	e006      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8003f9e:	e002      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003fa0:	bf00      	nop
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8003fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003fae:	4b5f      	ldr	r3, [pc, #380]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003fb0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003fb4:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8003fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fbe:	4a5b      	ldr	r2, [pc, #364]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8003fc6:	e003      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8003fcc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8003fd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	2100      	movs	r1, #0
 8003fda:	6639      	str	r1, [r7, #96]	@ 0x60
 8003fdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003fe0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fe2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	d033      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8003fec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003ff0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ff6:	d015      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8003ff8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ffc:	d80e      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d012      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004002:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004006:	d109      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004008:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800400c:	3308      	adds	r3, #8
 800400e:	4618      	mov	r0, r3
 8004010:	f001 fde8 	bl	8005be4 <RCCEx_PLL2_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 800401a:	e006      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004022:	e002      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004024:	bf00      	nop
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8004028:	bf00      	nop
    }
    if (ret == HAL_OK)
 800402a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10c      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8004032:	4b3e      	ldr	r3, [pc, #248]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004034:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004038:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800403c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004042:	4a3a      	ldr	r2, [pc, #232]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004044:	430b      	orrs	r3, r1
 8004046:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800404a:	e003      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004050:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004054:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	2100      	movs	r1, #0
 800405e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004060:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004066:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800406a:	460b      	mov	r3, r1
 800406c:	4313      	orrs	r3, r2
 800406e:	d00e      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8004070:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4a2d      	ldr	r2, [pc, #180]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004076:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800407a:	61d3      	str	r3, [r2, #28]
 800407c:	4b2b      	ldr	r3, [pc, #172]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800407e:	69d9      	ldr	r1, [r3, #28]
 8004080:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004088:	4a28      	ldr	r2, [pc, #160]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 800408a:	430b      	orrs	r3, r1
 800408c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800408e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800409a:	653b      	str	r3, [r7, #80]	@ 0x50
 800409c:	2300      	movs	r3, #0
 800409e:	657b      	str	r3, [r7, #84]	@ 0x54
 80040a0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80040a4:	460b      	mov	r3, r1
 80040a6:	4313      	orrs	r3, r2
 80040a8:	d046      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80040aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b0:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040b4:	d021      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x582>
 80040b6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80040ba:	d81a      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c0:	d01d      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x586>
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c6:	d814      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80040c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040cc:	d019      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 80040ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040d2:	d80e      	bhi.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d016      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x58e>
 80040d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040dc:	d109      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80040de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040e2:	3308      	adds	r3, #8
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fd7d 	bl	8005be4 <RCCEx_PLL2_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80040f0:	e00a      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80040f8:	e006      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8004106:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004108:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10f      	bne.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004110:	4b06      	ldr	r3, [pc, #24]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004112:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004116:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800411a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800411e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004120:	4a02      	ldr	r2, [pc, #8]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8004122:	430b      	orrs	r3, r1
 8004124:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8004128:	e006      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800412a:	bf00      	nop
 800412c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004130:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004134:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004138:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004146:	2300      	movs	r3, #0
 8004148:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800414a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800414e:	460b      	mov	r3, r1
 8004150:	4313      	orrs	r3, r2
 8004152:	d043      	beq.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8004154:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800415e:	d021      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8004160:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004164:	d81a      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004166:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800416a:	d01d      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x630>
 800416c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004170:	d814      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x624>
 8004172:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004176:	d019      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x634>
 8004178:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800417c:	d80e      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x624>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d016      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8004182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004186:	d109      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004188:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800418c:	3308      	adds	r3, #8
 800418e:	4618      	mov	r0, r3
 8004190:	f001 fd28 	bl	8005be4 <RCCEx_PLL2_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800419a:	e00a      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80041a2:	e006      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80041a4:	bf00      	nop
 80041a6:	e004      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80041a8:	bf00      	nop
 80041aa:	e002      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 80041b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80041ba:	4bb6      	ldr	r3, [pc, #728]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80041bc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80041c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80041c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	4ab2      	ldr	r2, [pc, #712]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80041cc:	430b      	orrs	r3, r1
 80041ce:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80041d2:	e003      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80041d8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80041dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80041e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80041ea:	2300      	movs	r3, #0
 80041ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80041ee:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80041f2:	460b      	mov	r3, r1
 80041f4:	4313      	orrs	r3, r2
 80041f6:	d030      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80041f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d80f      	bhi.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8004202:	2b03      	cmp	r3, #3
 8004204:	d211      	bcs.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8004206:	2b01      	cmp	r3, #1
 8004208:	d911      	bls.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800420a:	2b02      	cmp	r3, #2
 800420c:	d109      	bne.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800420e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004212:	3308      	adds	r3, #8
 8004214:	4618      	mov	r0, r3
 8004216:	f001 fce5 	bl	8005be4 <RCCEx_PLL2_Config>
 800421a:	4603      	mov	r3, r0
 800421c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004220:	e006      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 800422e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004230:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10c      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004238:	4b96      	ldr	r3, [pc, #600]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800423a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800423e:	f023 0107 	bic.w	r1, r3, #7
 8004242:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004248:	4a92      	ldr	r2, [pc, #584]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800424a:	430b      	orrs	r3, r1
 800424c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004250:	e003      	b.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004252:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004256:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800425a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800425e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004262:	2100      	movs	r1, #0
 8004264:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800426a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800426c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004270:	460b      	mov	r3, r1
 8004272:	4313      	orrs	r3, r2
 8004274:	d022      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8004276:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800427a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x714>
 8004280:	2b08      	cmp	r3, #8
 8004282:	d005      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800428a:	e002      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 800428c:	bf00      	nop
 800428e:	e000      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8004290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004292:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10c      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800429a:	4b7e      	ldr	r3, [pc, #504]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800429c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042a0:	f023 0108 	bic.w	r1, r3, #8
 80042a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042aa:	4a7a      	ldr	r2, [pc, #488]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80042ac:	430b      	orrs	r3, r1
 80042ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042b2:	e003      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80042b8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80042bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80042c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ca:	2300      	movs	r3, #0
 80042cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80042d2:	460b      	mov	r3, r1
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f000 80b0 	beq.w	800443a <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80042da:	4b6f      	ldr	r3, [pc, #444]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80042dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042de:	4a6e      	ldr	r2, [pc, #440]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80042e6:	f7fd ffbf 	bl	8002268 <HAL_GetTick>
 80042ea:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80042ee:	e00b      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f0:	f7fd ffba 	bl	8002268 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d903      	bls.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004306:	e005      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004308:	4b63      	ldr	r3, [pc, #396]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x920>)
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ed      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8004314:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004318:	2b00      	cmp	r3, #0
 800431a:	f040 808a 	bne.w	8004432 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800431e:	4b5d      	ldr	r3, [pc, #372]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004328:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800432c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d022      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x802>
 8004334:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004338:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800433a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800433e:	429a      	cmp	r2, r3
 8004340:	d01b      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004342:	4b54      	ldr	r3, [pc, #336]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800434c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004350:	4b50      	ldr	r3, [pc, #320]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004352:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004356:	4a4f      	ldr	r2, [pc, #316]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800435c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004360:	4b4c      	ldr	r3, [pc, #304]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004362:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004366:	4a4b      	ldr	r2, [pc, #300]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800436c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004370:	4a48      	ldr	r2, [pc, #288]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004372:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004376:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800437a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d019      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004386:	f7fd ff6f 	bl	8002268 <HAL_GetTick>
 800438a:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438e:	e00d      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004390:	f7fd ff6a 	bl	8002268 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d903      	bls.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 80043aa:	e006      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043ac:	4b39      	ldr	r3, [pc, #228]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0ea      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 80043ba:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d132      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80043c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d0:	d10f      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80043d2:	4b30      	ldr	r3, [pc, #192]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80043da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80043de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80043e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80043ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043ec:	430b      	orrs	r3, r1
 80043ee:	61d3      	str	r3, [r2, #28]
 80043f0:	e005      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x886>
 80043f2:	4b28      	ldr	r3, [pc, #160]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	4a27      	ldr	r2, [pc, #156]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 80043f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043fc:	61d3      	str	r3, [r2, #28]
 80043fe:	4b25      	ldr	r3, [pc, #148]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004404:	4a23      	ldr	r2, [pc, #140]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800440a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800440e:	4b21      	ldr	r3, [pc, #132]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004410:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8004414:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800441a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441e:	4a1d      	ldr	r2, [pc, #116]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004420:	430b      	orrs	r3, r1
 8004422:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004426:	e008      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004428:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800442c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8004430:	e003      	b.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004432:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004436:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800443a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8004446:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004448:	2300      	movs	r3, #0
 800444a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800444c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004450:	460b      	mov	r3, r1
 8004452:	4313      	orrs	r3, r2
 8004454:	d038      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8004456:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800445a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800445c:	2b30      	cmp	r3, #48	@ 0x30
 800445e:	d014      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x912>
 8004460:	2b30      	cmp	r3, #48	@ 0x30
 8004462:	d80e      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8004464:	2b20      	cmp	r3, #32
 8004466:	d012      	beq.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x916>
 8004468:	2b20      	cmp	r3, #32
 800446a:	d80a      	bhi.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 800446c:	2b00      	cmp	r3, #0
 800446e:	d015      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004470:	2b10      	cmp	r3, #16
 8004472:	d106      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004474:	4b07      	ldr	r3, [pc, #28]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8004476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004478:	4a06      	ldr	r2, [pc, #24]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 800447a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800447e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8004480:	e00d      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004488:	e009      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800448a:	bf00      	nop
 800448c:	e007      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 800448e:	bf00      	nop
 8004490:	e005      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x926>
 8004492:	bf00      	nop
 8004494:	44020c00 	.word	0x44020c00
 8004498:	44020800 	.word	0x44020800
        break;
 800449c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80044a6:	4bb5      	ldr	r3, [pc, #724]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80044a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80044ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80044b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b6:	49b1      	ldr	r1, [pc, #708]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80044be:	e003      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c0:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80044c4:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80044c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d0:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80044d4:	623b      	str	r3, [r7, #32]
 80044d6:	2300      	movs	r3, #0
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044de:	460b      	mov	r3, r1
 80044e0:	4313      	orrs	r3, r2
 80044e2:	d03c      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80044e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80044e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d81d      	bhi.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 80044ee:	a201      	add	r2, pc, #4	@ (adr r2, 80044f4 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004509 	.word	0x08004509
 80044f8:	08004517 	.word	0x08004517
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004533 	.word	0x08004533
 8004504:	08004533 	.word	0x08004533
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004508:	4b9c      	ldr	r3, [pc, #624]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	4a9b      	ldr	r2, [pc, #620]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800450e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004512:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004514:	e00e      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004516:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800451a:	3308      	adds	r3, #8
 800451c:	4618      	mov	r0, r3
 800451e:	f001 fb61 	bl	8005be4 <RCCEx_PLL2_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8004528:	e004      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004530:	e000      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8004532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004534:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10c      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800453c:	4b8f      	ldr	r3, [pc, #572]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800453e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004542:	f023 0207 	bic.w	r2, r3, #7
 8004546:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800454a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800454c:	498b      	ldr	r1, [pc, #556]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004554:	e003      	b.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004556:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800455a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800455e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004574:	460b      	mov	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	d03c      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800457a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800457e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004580:	2b20      	cmp	r3, #32
 8004582:	d01f      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8004584:	2b20      	cmp	r3, #32
 8004586:	d819      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8004588:	2b18      	cmp	r3, #24
 800458a:	d01d      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 800458c:	2b18      	cmp	r3, #24
 800458e:	d815      	bhi.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xa44>
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xa22>
 8004594:	2b08      	cmp	r3, #8
 8004596:	d007      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004598:	e010      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800459a:	4b78      	ldr	r3, [pc, #480]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	4a77      	ldr	r2, [pc, #476]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80045a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045a4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80045a6:	e010      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80045a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045ac:	3308      	adds	r3, #8
 80045ae:	4618      	mov	r0, r3
 80045b0:	f001 fb18 	bl	8005be4 <RCCEx_PLL2_Config>
 80045b4:	4603      	mov	r3, r0
 80045b6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80045ba:	e006      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80045c2:	e002      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80045c4:	bf00      	nop
 80045c6:	e000      	b.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 80045c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10c      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80045d2:	4b6a      	ldr	r3, [pc, #424]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80045d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045d8:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 80045dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e2:	4966      	ldr	r1, [pc, #408]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80045ea:	e003      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80045f0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80045f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800460a:	460b      	mov	r3, r1
 800460c:	4313      	orrs	r3, r2
 800460e:	d03e      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8004610:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004616:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800461a:	d020      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xae6>
 800461c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004620:	d819      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xade>
 8004622:	2bc0      	cmp	r3, #192	@ 0xc0
 8004624:	d01d      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 8004626:	2bc0      	cmp	r3, #192	@ 0xc0
 8004628:	d815      	bhi.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xade>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 800462e:	2b40      	cmp	r3, #64	@ 0x40
 8004630:	d007      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8004632:	e010      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004634:	4b51      	ldr	r3, [pc, #324]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004638:	4a50      	ldr	r2, [pc, #320]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800463a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800463e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004640:	e010      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004642:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004646:	3308      	adds	r3, #8
 8004648:	4618      	mov	r0, r3
 800464a:	f001 facb 	bl	8005be4 <RCCEx_PLL2_Config>
 800464e:	4603      	mov	r3, r0
 8004650:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8004654:	e006      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800465c:	e002      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 8004662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004664:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10c      	bne.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800466c:	4b43      	ldr	r3, [pc, #268]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800466e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004672:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 8004676:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800467a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467c:	493f      	ldr	r1, [pc, #252]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8004684:	e003      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004686:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800468a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800468e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	2100      	movs	r1, #0
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046a4:	460b      	mov	r3, r1
 80046a6:	4313      	orrs	r3, r2
 80046a8:	d038      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80046aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046b4:	d00e      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80046b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046ba:	d815      	bhi.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xb70>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d017      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 80046c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c4:	d110      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046c6:	4b2d      	ldr	r3, [pc, #180]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	4a2c      	ldr	r2, [pc, #176]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80046cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046d0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80046d2:	e00e      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80046d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80046d8:	3308      	adds	r3, #8
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fa82 	bl	8005be4 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80046e6:	e004      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80046ee:	e000      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 80046f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046f2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10c      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80046fa:	4b20      	ldr	r3, [pc, #128]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80046fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004700:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004704:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470a:	491c      	ldr	r1, [pc, #112]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8004712:	e003      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004718:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800471c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	2100      	movs	r1, #0
 8004726:	6039      	str	r1, [r7, #0]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	607b      	str	r3, [r7, #4]
 800472e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004732:	460b      	mov	r3, r1
 8004734:	4313      	orrs	r3, r2
 8004736:	d039      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8004738:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800473c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800473e:	2b30      	cmp	r3, #48	@ 0x30
 8004740:	d01e      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004742:	2b30      	cmp	r3, #48	@ 0x30
 8004744:	d815      	bhi.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 8004746:	2b10      	cmp	r3, #16
 8004748:	d002      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800474a:	2b20      	cmp	r3, #32
 800474c:	d007      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 800474e:	e010      	b.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004750:	4b0a      	ldr	r3, [pc, #40]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004754:	4a09      	ldr	r2, [pc, #36]	@ (800477c <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8004756:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800475a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 800475c:	e011      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800475e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004762:	3308      	adds	r3, #8
 8004764:	4618      	mov	r0, r3
 8004766:	f001 fa3d 	bl	8005be4 <RCCEx_PLL2_Config>
 800476a:	4603      	mov	r3, r0
 800476c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8004770:	e007      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8004778:	e003      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 800477a:	bf00      	nop
 800477c:	44020c00 	.word	0x44020c00
        break;
 8004780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004782:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10c      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800478a:	4b0c      	ldr	r3, [pc, #48]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800478c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004790:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004794:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004798:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800479a:	4908      	ldr	r1, [pc, #32]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800479c:	4313      	orrs	r3, r2
 800479e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80047a2:	e003      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80047a8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80047ac:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	37a8      	adds	r7, #168	@ 0xa8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ba:	bf00      	nop
 80047bc:	44020c00 	.word	0x44020c00

080047c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b08b      	sub	sp, #44	@ 0x2c
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80047c8:	4bad      	ldr	r3, [pc, #692]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80047d2:	4bab      	ldr	r3, [pc, #684]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80047dc:	4ba8      	ldr	r3, [pc, #672]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e0:	0a1b      	lsrs	r3, r3, #8
 80047e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047e6:	61bb      	str	r3, [r7, #24]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80047e8:	4ba5      	ldr	r3, [pc, #660]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	f003 0310 	and.w	r3, r3, #16
 80047f0:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80047f2:	4ba3      	ldr	r3, [pc, #652]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80047f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f6:	08db      	lsrs	r3, r3, #3
 80047f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	fb02 f303 	mul.w	r3, r2, r3
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480a:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 8126 	beq.w	8004a62 <HAL_RCCEx_GetPLL1ClockFreq+0x2a2>
  {
    switch (pll1source)
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2b03      	cmp	r3, #3
 800481a:	d053      	beq.n	80048c4 <HAL_RCCEx_GetPLL1ClockFreq+0x104>
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d86f      	bhi.n	8004902 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d003      	beq.n	8004830 <HAL_RCCEx_GetPLL1ClockFreq+0x70>
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d02b      	beq.n	8004886 <HAL_RCCEx_GetPLL1ClockFreq+0xc6>
 800482e:	e068      	b.n	8004902 <HAL_RCCEx_GetPLL1ClockFreq+0x142>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004830:	4b93      	ldr	r3, [pc, #588]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	08db      	lsrs	r3, r3, #3
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	4a92      	ldr	r2, [pc, #584]	@ (8004a84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
 8004840:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004864:	ed97 6a04 	vldr	s12, [r7, #16]
 8004868:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8004a88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800486c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004874:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800487c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004880:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004884:	e068      	b.n	8004958 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004890:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8004a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8004894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	ee07 3a90 	vmov	s15, r3
 800489e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048a2:	ed97 6a04 	vldr	s12, [r7, #16]
 80048a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80048aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80048c2:	e049      	b.n	8004958 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	ee07 3a90 	vmov	s15, r3
 80048ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ce:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80048d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	ee07 3a90 	vmov	s15, r3
 80048dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e0:	ed97 6a04 	vldr	s12, [r7, #16]
 80048e4:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8004a88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80048e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004900:	e02a      	b.n	8004958 <HAL_RCCEx_GetPLL1ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004902:	4b5f      	ldr	r3, [pc, #380]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	08db      	lsrs	r3, r3, #3
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	4a5d      	ldr	r2, [pc, #372]	@ (8004a84 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800490e:	fa22 f303 	lsr.w	r3, r2, r3
 8004912:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	ee07 3a90 	vmov	s15, r3
 8004924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004936:	ed97 6a04 	vldr	s12, [r7, #16]
 800493a:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004a88 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800493e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800494a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004956:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004958:	4b49      	ldr	r3, [pc, #292]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004960:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004964:	d121      	bne.n	80049aa <HAL_RCCEx_GetPLL1ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8004966:	4b46      	ldr	r3, [pc, #280]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d017      	beq.n	80049a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004972:	4b43      	ldr	r3, [pc, #268]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004976:	0a5b      	lsrs	r3, r3, #9
 8004978:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800497c:	ee07 3a90 	vmov	s15, r3
 8004980:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8004984:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004988:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800498c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004998:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	e006      	b.n	80049b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	e002      	b.n	80049b0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049b0:	4b33      	ldr	r3, [pc, #204]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049bc:	d121      	bne.n	8004a02 <HAL_RCCEx_GetPLL1ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80049be:	4b30      	ldr	r3, [pc, #192]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d017      	beq.n	80049fa <HAL_RCCEx_GetPLL1ClockFreq+0x23a>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80049ca:	4b2d      	ldr	r3, [pc, #180]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80049cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ce:	0c1b      	lsrs	r3, r3, #16
 80049d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049d4:	ee07 3a90 	vmov	s15, r3
 80049d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80049dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049e0:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80049e4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80049e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049f0:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	605a      	str	r2, [r3, #4]
 80049f8:	e006      	b.n	8004a08 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	605a      	str	r2, [r3, #4]
 8004a00:	e002      	b.n	8004a08 <HAL_RCCEx_GetPLL1ClockFreq+0x248>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a08:	4b1d      	ldr	r3, [pc, #116]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a14:	d121      	bne.n	8004a5a <HAL_RCCEx_GetPLL1ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8004a16:	4b1a      	ldr	r3, [pc, #104]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d017      	beq.n	8004a52 <HAL_RCCEx_GetPLL1ClockFreq+0x292>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8004a22:	4b17      	ldr	r3, [pc, #92]	@ (8004a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8004a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a26:	0e1b      	lsrs	r3, r3, #24
 8004a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a2c:	ee07 3a90 	vmov	s15, r3
 8004a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8004a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a38:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8004a3c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a48:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8004a50:	e010      	b.n	8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	609a      	str	r2, [r3, #8]
}
 8004a58:	e00c      	b.n	8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	609a      	str	r2, [r3, #8]
}
 8004a60:	e008      	b.n	8004a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2b4>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	609a      	str	r2, [r3, #8]
}
 8004a74:	bf00      	nop
 8004a76:	372c      	adds	r7, #44	@ 0x2c
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr
 8004a80:	44020c00 	.word	0x44020c00
 8004a84:	03d09000 	.word	0x03d09000
 8004a88:	46000000 	.word	0x46000000
 8004a8c:	4a742400 	.word	0x4a742400
 8004a90:	4bb71b00 	.word	0x4bb71b00

08004a94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b08b      	sub	sp, #44	@ 0x2c
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8004a9c:	4bad      	ldr	r3, [pc, #692]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8004aa6:	4bab      	ldr	r3, [pc, #684]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8004ab0:	4ba8      	ldr	r3, [pc, #672]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004aba:	61bb      	str	r3, [r7, #24]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8004abc:	4ba5      	ldr	r3, [pc, #660]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac0:	f003 0310 	and.w	r3, r3, #16
 8004ac4:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8004ac6:	4ba3      	ldr	r3, [pc, #652]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	08db      	lsrs	r3, r3, #3
 8004acc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	fb02 f303 	mul.w	r3, r2, r3
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8126 	beq.w	8004d36 <HAL_RCCEx_GetPLL2ClockFreq+0x2a2>
  {
    switch (pll2source)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2b03      	cmp	r3, #3
 8004aee:	d053      	beq.n	8004b98 <HAL_RCCEx_GetPLL2ClockFreq+0x104>
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b03      	cmp	r3, #3
 8004af4:	d86f      	bhi.n	8004bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d003      	beq.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x70>
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d02b      	beq.n	8004b5a <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8004b02:	e068      	b.n	8004bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x142>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004b04:	4b93      	ldr	r3, [pc, #588]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	08db      	lsrs	r3, r3, #3
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	4a92      	ldr	r2, [pc, #584]	@ (8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
 8004b14:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	ee07 3a90 	vmov	s15, r3
 8004b34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b38:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b3c:	eddf 5a87 	vldr	s11, [pc, #540]	@ 8004d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004b40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004b58:	e068      	b.n	8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	ee07 3a90 	vmov	s15, r3
 8004b60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b64:	eddf 6a7e 	vldr	s13, [pc, #504]	@ 8004d60 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8004b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	ee07 3a90 	vmov	s15, r3
 8004b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b76:	ed97 6a04 	vldr	s12, [r7, #16]
 8004b7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b92:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004b96:	e049      	b.n	8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8004d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8004ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	ee07 3a90 	vmov	s15, r3
 8004bb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb4:	ed97 6a04 	vldr	s12, [r7, #16]
 8004bb8:	eddf 5a68 	vldr	s11, [pc, #416]	@ 8004d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004bbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8004bd4:	e02a      	b.n	8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x198>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	08db      	lsrs	r3, r3, #3
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	4a5d      	ldr	r2, [pc, #372]	@ (8004d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0a:	ed97 6a04 	vldr	s12, [r7, #16]
 8004c0e:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8004d5c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8004c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c26:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8004c2a:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c2c:	4b49      	ldr	r3, [pc, #292]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c38:	d121      	bne.n	8004c7e <HAL_RCCEx_GetPLL2ClockFreq+0x1ea>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8004c3a:	4b46      	ldr	r3, [pc, #280]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d017      	beq.n	8004c76 <HAL_RCCEx_GetPLL2ClockFreq+0x1e2>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c46:	4b43      	ldr	r3, [pc, #268]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4a:	0a5b      	lsrs	r3, r3, #9
 8004c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8004c58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004c60:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c6c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	e006      	b.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	e002      	b.n	8004c84 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c84:	4b33      	ldr	r3, [pc, #204]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c8c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c90:	d121      	bne.n	8004cd6 <HAL_RCCEx_GetPLL2ClockFreq+0x242>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8004c92:	4b30      	ldr	r3, [pc, #192]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d017      	beq.n	8004cce <HAL_RCCEx_GetPLL2ClockFreq+0x23a>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca2:	0c1b      	lsrs	r3, r3, #16
 8004ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ca8:	ee07 3a90 	vmov	s15, r3
 8004cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8004cb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004cb8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc4:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	e006      	b.n	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	605a      	str	r2, [r3, #4]
 8004cd4:	e002      	b.n	8004cdc <HAL_RCCEx_GetPLL2ClockFreq+0x248>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce8:	d121      	bne.n	8004d2e <HAL_RCCEx_GetPLL2ClockFreq+0x29a>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8004cea:	4b1a      	ldr	r3, [pc, #104]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d017      	beq.n	8004d26 <HAL_RCCEx_GetPLL2ClockFreq+0x292>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8004cf6:	4b17      	ldr	r3, [pc, #92]	@ (8004d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfa:	0e1b      	lsrs	r3, r3, #24
 8004cfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d00:	ee07 3a90 	vmov	s15, r3
 8004d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8004d08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d0c:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8004d10:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1c:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d24:	e010      	b.n	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	e00c      	b.n	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	609a      	str	r2, [r3, #8]
}
 8004d34:	e008      	b.n	8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2b4>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]
}
 8004d48:	bf00      	nop
 8004d4a:	372c      	adds	r7, #44	@ 0x2c
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	44020c00 	.word	0x44020c00
 8004d58:	03d09000 	.word	0x03d09000
 8004d5c:	46000000 	.word	0x46000000
 8004d60:	4a742400 	.word	0x4a742400
 8004d64:	4bb71b00 	.word	0x4bb71b00

08004d68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08c      	sub	sp, #48	@ 0x30
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8004d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d76:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 8004d7a:	430b      	orrs	r3, r1
 8004d7c:	d14b      	bne.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004d7e:	4bc4      	ldr	r3, [pc, #784]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8004d8a:	4bc1      	ldr	r3, [pc, #772]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d108      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d9e:	d104      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8004da0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004da6:	f000 bf14 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8004daa:	4bb9      	ldr	r3, [pc, #740]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004db0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004db8:	d108      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dc0:	d104      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8004dc2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc8:	f000 bf03 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8004dcc:	4bb0      	ldr	r3, [pc, #704]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004dd8:	d119      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8004dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ddc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004de0:	d115      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004de2:	4bab      	ldr	r3, [pc, #684]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8004dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dee:	d30a      	bcc.n	8004e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8004df0:	4ba7      	ldr	r3, [pc, #668]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	0a1b      	lsrs	r3, r3, #8
 8004df6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dfa:	4aa6      	ldr	r2, [pc, #664]	@ (8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004e02:	f000 bee6 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8004e0a:	f000 bee2 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e12:	f000 bede 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8004e16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e1a:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 8004e1e:	ea52 0301 	orrs.w	r3, r2, r1
 8004e22:	f000 838e 	beq.w	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8004e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e2a:	2a01      	cmp	r2, #1
 8004e2c:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 8004e30:	f080 86cc 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004e34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e38:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8004e3c:	ea52 0301 	orrs.w	r3, r2, r1
 8004e40:	f000 82aa 	beq.w	8005398 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e48:	2a01      	cmp	r2, #1
 8004e4a:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 8004e4e:	f080 86bd 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004e52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e56:	f1a3 0110 	sub.w	r1, r3, #16
 8004e5a:	ea52 0301 	orrs.w	r3, r2, r1
 8004e5e:	f000 8681 	beq.w	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 8004e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e66:	2a01      	cmp	r2, #1
 8004e68:	f173 0310 	sbcs.w	r3, r3, #16
 8004e6c:	f080 86ae 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e74:	1f19      	subs	r1, r3, #4
 8004e76:	ea52 0301 	orrs.w	r3, r2, r1
 8004e7a:	f000 84b1 	beq.w	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 8004e7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e82:	2a01      	cmp	r2, #1
 8004e84:	f173 0304 	sbcs.w	r3, r3, #4
 8004e88:	f080 86a0 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e90:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8004e94:	430b      	orrs	r3, r1
 8004e96:	f000 85aa 	beq.w	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 8004e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e9e:	497e      	ldr	r1, [pc, #504]	@ (8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 8004ea0:	428a      	cmp	r2, r1
 8004ea2:	f173 0300 	sbcs.w	r3, r3, #0
 8004ea6:	f080 8691 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eae:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8004eb2:	430b      	orrs	r3, r1
 8004eb4:	f000 8532 	beq.w	800591c <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8004eb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ebc:	4977      	ldr	r1, [pc, #476]	@ (800509c <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8004ebe:	428a      	cmp	r2, r1
 8004ec0:	f173 0300 	sbcs.w	r3, r3, #0
 8004ec4:	f080 8682 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ecc:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	f000 84bc 	beq.w	800584e <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8004ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eda:	4971      	ldr	r1, [pc, #452]	@ (80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8004edc:	428a      	cmp	r2, r1
 8004ede:	f173 0300 	sbcs.w	r3, r3, #0
 8004ee2:	f080 8673 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004ee6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eea:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	f000 85f2 	beq.w	8005ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8004ef4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ef8:	496a      	ldr	r1, [pc, #424]	@ (80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8004efa:	428a      	cmp	r2, r1
 8004efc:	f173 0300 	sbcs.w	r3, r3, #0
 8004f00:	f080 8664 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f08:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8004f0c:	430b      	orrs	r3, r1
 8004f0e:	f000 81e5 	beq.w	80052dc <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8004f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f16:	4964      	ldr	r1, [pc, #400]	@ (80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8004f18:	428a      	cmp	r2, r1
 8004f1a:	f173 0300 	sbcs.w	r3, r3, #0
 8004f1e:	f080 8655 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004f22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f26:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	f000 83cc 	beq.w	80056c8 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8004f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f34:	495d      	ldr	r1, [pc, #372]	@ (80050ac <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8004f36:	428a      	cmp	r2, r1
 8004f38:	f173 0300 	sbcs.w	r3, r3, #0
 8004f3c:	f080 8646 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f44:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	f000 8331 	beq.w	80055b0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8004f4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f52:	4957      	ldr	r1, [pc, #348]	@ (80050b0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8004f54:	428a      	cmp	r2, r1
 8004f56:	f173 0300 	sbcs.w	r3, r3, #0
 8004f5a:	f080 8637 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004f5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f62:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8004f66:	430b      	orrs	r3, r1
 8004f68:	f000 82bb 	beq.w	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8004f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f70:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8004f74:	f173 0300 	sbcs.w	r3, r3, #0
 8004f78:	f080 8628 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004f7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f80:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8004f84:	430b      	orrs	r3, r1
 8004f86:	f000 826d 	beq.w	8005464 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8004f8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f8e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8004f92:	428a      	cmp	r2, r1
 8004f94:	f173 0300 	sbcs.w	r3, r3, #0
 8004f98:	f080 8618 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004f9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004fa4:	430b      	orrs	r3, r1
 8004fa6:	f000 821e 	beq.w	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8004faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fae:	f242 0101 	movw	r1, #8193	@ 0x2001
 8004fb2:	428a      	cmp	r2, r1
 8004fb4:	f173 0300 	sbcs.w	r3, r3, #0
 8004fb8:	f080 8608 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004fbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc0:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004fc4:	430b      	orrs	r3, r1
 8004fc6:	f000 8137 	beq.w	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8004fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fce:	f241 0101 	movw	r1, #4097	@ 0x1001
 8004fd2:	428a      	cmp	r2, r1
 8004fd4:	f173 0300 	sbcs.w	r3, r3, #0
 8004fd8:	f080 85f8 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004fdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fe0:	1f11      	subs	r1, r2, #4
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	f000 80d2 	beq.w	800518c <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8004fe8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fec:	2a05      	cmp	r2, #5
 8004fee:	f173 0300 	sbcs.w	r3, r3, #0
 8004ff2:	f080 85eb 	bcs.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8004ff6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ffa:	1e51      	subs	r1, r2, #1
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	d006      	beq.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8005000:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005004:	1e91      	subs	r1, r2, #2
 8005006:	430b      	orrs	r3, r1
 8005008:	d06c      	beq.n	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 800500a:	f000 bddf 	b.w	8005bcc <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800500e:	4b20      	ldr	r3, [pc, #128]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005010:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005014:	f003 0307 	and.w	r3, r3, #7
 8005018:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8005020:	f7fe fd7e 	bl	8003b20 <HAL_RCC_GetPCLK2Freq>
 8005024:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005026:	f000 bdd4 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 800502a:	4b19      	ldr	r3, [pc, #100]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005032:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005036:	d10a      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8005038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503a:	2b01      	cmp	r3, #1
 800503c:	d107      	bne.n	800504e <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800503e:	f107 030c 	add.w	r3, r7, #12
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fd26 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800504c:	e048      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800504e:	4b10      	ldr	r3, [pc, #64]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b02      	cmp	r3, #2
 8005058:	d10c      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 800505a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505c:	2b03      	cmp	r3, #3
 800505e:	d109      	bne.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	08db      	lsrs	r3, r3, #3
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	4a12      	ldr	r2, [pc, #72]	@ (80050b4 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
 8005070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005072:	e035      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8005074:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800507c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005080:	d11c      	bne.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8005082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005084:	2b04      	cmp	r3, #4
 8005086:	d119      	bne.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8005088:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 800508a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800508c:	e028      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800508e:	bf00      	nop
 8005090:	44020c00 	.word	0x44020c00
 8005094:	016e3600 	.word	0x016e3600
 8005098:	20000001 	.word	0x20000001
 800509c:	10000001 	.word	0x10000001
 80050a0:	08000001 	.word	0x08000001
 80050a4:	04000001 	.word	0x04000001
 80050a8:	00200001 	.word	0x00200001
 80050ac:	00040001 	.word	0x00040001
 80050b0:	00020001 	.word	0x00020001
 80050b4:	03d09000 	.word	0x03d09000
 80050b8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80050bc:	4b9f      	ldr	r3, [pc, #636]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80050be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d106      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80050ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050cc:	2b05      	cmp	r3, #5
 80050ce:	d103      	bne.n	80050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 80050d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050d6:	e003      	b.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050dc:	f000 bd79 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80050e0:	f000 bd77 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80050e4:	4b95      	ldr	r3, [pc, #596]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80050e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80050ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80050f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d104      	bne.n	8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80050f6:	f7fe fcfd 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 80050fa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 80050fc:	f000 bd69 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8005100:	4b8e      	ldr	r3, [pc, #568]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005108:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800510c:	d10a      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 800510e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005110:	2b08      	cmp	r3, #8
 8005112:	d107      	bne.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005114:	f107 030c 	add.w	r3, r7, #12
 8005118:	4618      	mov	r0, r3
 800511a:	f7ff fcbb 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005122:	e031      	b.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8005124:	4b85      	ldr	r3, [pc, #532]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b02      	cmp	r3, #2
 800512e:	d10c      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005132:	2b18      	cmp	r3, #24
 8005134:	d109      	bne.n	800514a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005136:	4b81      	ldr	r3, [pc, #516]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	08db      	lsrs	r3, r3, #3
 800513c:	f003 0303 	and.w	r3, r3, #3
 8005140:	4a7f      	ldr	r2, [pc, #508]	@ (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8005142:	fa22 f303 	lsr.w	r3, r2, r3
 8005146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005148:	e01e      	b.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800514a:	4b7c      	ldr	r3, [pc, #496]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8005158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515a:	2b20      	cmp	r3, #32
 800515c:	d102      	bne.n	8005164 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 800515e:	4b79      	ldr	r3, [pc, #484]	@ (8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005162:	e011      	b.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8005164:	4b75      	ldr	r3, [pc, #468]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005166:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b02      	cmp	r3, #2
 8005170:	d106      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8005172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005174:	2b28      	cmp	r3, #40	@ 0x28
 8005176:	d103      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8005178:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800517e:	e003      	b.n	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005184:	f000 bd25 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005188:	f000 bd23 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800518c:	4b6b      	ldr	r3, [pc, #428]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800518e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005192:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8005196:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519a:	2b00      	cmp	r3, #0
 800519c:	d104      	bne.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800519e:	f7fe fca9 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 80051a2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80051a4:	f000 bd15 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80051a8:	4b64      	ldr	r3, [pc, #400]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051b4:	d10a      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 80051b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b8:	2b40      	cmp	r3, #64	@ 0x40
 80051ba:	d107      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051bc:	f107 030c 	add.w	r3, r7, #12
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff fc67 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ca:	e033      	b.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80051cc:	4b5b      	ldr	r3, [pc, #364]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d10c      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 80051d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051da:	2bc0      	cmp	r3, #192	@ 0xc0
 80051dc:	d109      	bne.n	80051f2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051de:	4b57      	ldr	r3, [pc, #348]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	08db      	lsrs	r3, r3, #3
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	4a55      	ldr	r2, [pc, #340]	@ (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 80051ea:	fa22 f303 	lsr.w	r3, r2, r3
 80051ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051f0:	e020      	b.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80051f2:	4b52      	ldr	r3, [pc, #328]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051fe:	d106      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8005200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005202:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005206:	d102      	bne.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8005208:	4b4e      	ldr	r3, [pc, #312]	@ (8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 800520a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800520c:	e012      	b.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800520e:	4b4b      	ldr	r3, [pc, #300]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b02      	cmp	r3, #2
 800521a:	d107      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800521c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800521e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005222:	d103      	bne.n	800522c <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8005224:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800522a:	e003      	b.n	8005234 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005230:	f000 bccf 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005234:	f000 bccd 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005238:	4b40      	ldr	r3, [pc, #256]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 800523a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800523e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005242:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8005244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005246:	2b00      	cmp	r3, #0
 8005248:	d104      	bne.n	8005254 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800524a:	f7fe fc7f 	bl	8003b4c <HAL_RCC_GetPCLK3Freq>
 800524e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8005250:	f000 bcbf 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8005254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800525a:	d108      	bne.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800525c:	f107 030c 	add.w	r3, r7, #12
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff fc17 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800526a:	f000 bcb2 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800526e:	4b33      	ldr	r3, [pc, #204]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b02      	cmp	r3, #2
 8005278:	d10d      	bne.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 800527a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005280:	d109      	bne.n	8005296 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005282:	4b2e      	ldr	r3, [pc, #184]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	08db      	lsrs	r3, r3, #3
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	4a2c      	ldr	r2, [pc, #176]	@ (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 800528e:	fa22 f303 	lsr.w	r3, r2, r3
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005294:	e020      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8005296:	4b29      	ldr	r3, [pc, #164]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800529e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052a2:	d106      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80052aa:	d102      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 80052ac:	4b25      	ldr	r3, [pc, #148]	@ (8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 80052ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052b0:	e012      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80052b2:	4b22      	ldr	r3, [pc, #136]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80052b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d107      	bne.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80052c6:	d103      	bne.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 80052c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ce:	e003      	b.n	80052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80052d4:	f000 bc7d 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80052d8:	f000 bc7b 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80052dc:	4b17      	ldr	r3, [pc, #92]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80052de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80052e2:	f003 0307 	and.w	r3, r3, #7
 80052e6:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d104      	bne.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80052ee:	f7fe fbe5 	bl	8003abc <HAL_RCC_GetHCLKFreq>
 80052f2:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80052f4:	f000 bc6d 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80052f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d104      	bne.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 80052fe:	f7fe fab1 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8005302:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8005304:	f000 bc65 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8005308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530a:	2b02      	cmp	r3, #2
 800530c:	d108      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800530e:	f107 030c 	add.w	r3, r7, #12
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff fbbe 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800531c:	f000 bc59 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8005320:	4b06      	ldr	r3, [pc, #24]	@ (800533c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800532c:	d10e      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800532e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005330:	2b03      	cmp	r3, #3
 8005332:	d10b      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8005334:	4b04      	ldr	r3, [pc, #16]	@ (8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8005336:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005338:	e02c      	b.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 800533a:	bf00      	nop
 800533c:	44020c00 	.word	0x44020c00
 8005340:	03d09000 	.word	0x03d09000
 8005344:	003d0900 	.word	0x003d0900
 8005348:	016e3600 	.word	0x016e3600
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800534c:	4b95      	ldr	r3, [pc, #596]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d10c      	bne.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	2b04      	cmp	r3, #4
 800535c:	d109      	bne.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800535e:	4b91      	ldr	r3, [pc, #580]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	08db      	lsrs	r3, r3, #3
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	4a8f      	ldr	r2, [pc, #572]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800536a:	fa22 f303 	lsr.w	r3, r2, r3
 800536e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005370:	e010      	b.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8005372:	4b8c      	ldr	r3, [pc, #560]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800537a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800537e:	d105      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8005380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005382:	2b05      	cmp	r3, #5
 8005384:	d102      	bne.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8005386:	4b89      	ldr	r3, [pc, #548]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800538a:	e003      	b.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005390:	f000 bc1f 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005394:	f000 bc1d 	b.w	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8005398:	4b82      	ldr	r3, [pc, #520]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800539a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80053a4:	4b7f      	ldr	r3, [pc, #508]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80053a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d106      	bne.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 80053b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 80053b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053be:	e011      	b.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80053c0:	4b78      	ldr	r3, [pc, #480]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80053c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053ce:	d106      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 80053d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d103      	bne.n	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 80053d6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80053da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053dc:	e002      	b.n	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80053e2:	e3f6      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80053e4:	e3f5      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80053e6:	4b6f      	ldr	r3, [pc, #444]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80053e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80053ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d103      	bne.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80053f8:	f7fe fb7c 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 80053fc:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80053fe:	e3e8      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8005400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005402:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005406:	d107      	bne.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005408:	f107 030c 	add.w	r3, r7, #12
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff fb41 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005416:	e3dc      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8005418:	4b62      	ldr	r3, [pc, #392]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b02      	cmp	r3, #2
 8005422:	d10d      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800542a:	d109      	bne.n	8005440 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800542c:	4b5d      	ldr	r3, [pc, #372]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	08db      	lsrs	r3, r3, #3
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	4a5c      	ldr	r2, [pc, #368]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
 800543c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800543e:	e010      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8005440:	4b58      	ldr	r3, [pc, #352]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800544c:	d106      	bne.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800544e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005450:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005454:	d102      	bne.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8005456:	4b55      	ldr	r3, [pc, #340]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8005458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800545a:	e002      	b.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005460:	e3b7      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005462:	e3b6      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005464:	4b4f      	ldr	r3, [pc, #316]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005466:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800546a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800546e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8005470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d103      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8005476:	f7fe fb3d 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 800547a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800547c:	e3a9      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 800547e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005480:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005484:	d107      	bne.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005486:	f107 030c 	add.w	r3, r7, #12
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff fb02 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005494:	e39d      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8005496:	4b43      	ldr	r3, [pc, #268]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d10d      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 80054a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054a8:	d109      	bne.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80054aa:	4b3e      	ldr	r3, [pc, #248]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	08db      	lsrs	r3, r3, #3
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	4a3c      	ldr	r2, [pc, #240]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80054b6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054bc:	e010      	b.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80054be:	4b39      	ldr	r3, [pc, #228]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054ca:	d106      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80054cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054d2:	d102      	bne.n	80054da <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 80054d4:	4b35      	ldr	r3, [pc, #212]	@ (80055ac <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80054d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d8:	e002      	b.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80054de:	e378      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80054e0:	e377      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80054e2:	4b30      	ldr	r3, [pc, #192]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80054e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054e8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80054ec:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80054f4:	f7fe fafe 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 80054f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80054fa:	e36a      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 80054fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005502:	d107      	bne.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005504:	f107 030c 	add.w	r3, r7, #12
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff fac3 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005512:	e35e      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8005514:	4b23      	ldr	r3, [pc, #140]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b02      	cmp	r3, #2
 800551e:	d10d      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 8005520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005522:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005526:	d109      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005528:	4b1e      	ldr	r3, [pc, #120]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	08db      	lsrs	r3, r3, #3
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	4a1d      	ldr	r2, [pc, #116]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005534:	fa22 f303 	lsr.w	r3, r2, r3
 8005538:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800553a:	e34a      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800553c:	2300      	movs	r3, #0
 800553e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005540:	e347      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 8005542:	4b18      	ldr	r3, [pc, #96]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005544:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005548:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800554c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800554e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8005554:	f7fe fafa 	bl	8003b4c <HAL_RCC_GetPCLK3Freq>
 8005558:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800555a:	e33a      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 800555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005562:	d107      	bne.n	8005574 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005564:	f107 030c 	add.w	r3, r7, #12
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fa93 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005572:	e32e      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 8005574:	4b0b      	ldr	r3, [pc, #44]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b02      	cmp	r3, #2
 800557e:	d10d      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8005580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005582:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005586:	d109      	bne.n	800559c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005588:	4b06      	ldr	r3, [pc, #24]	@ (80055a4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	08db      	lsrs	r3, r3, #3
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	4a05      	ldr	r2, [pc, #20]	@ (80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
 8005598:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800559a:	e31a      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80055a0:	e317      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80055a2:	bf00      	nop
 80055a4:	44020c00 	.word	0x44020c00
 80055a8:	03d09000 	.word	0x03d09000
 80055ac:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80055b0:	4b9b      	ldr	r3, [pc, #620]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80055b2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80055b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80055ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80055c2:	d044      	beq.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80055ca:	d879      	bhi.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80055cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055d2:	d02d      	beq.n	8005630 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80055d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055da:	d871      	bhi.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80055dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055e2:	d017      	beq.n	8005614 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80055e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055ea:	d869      	bhi.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d004      	beq.n	80055fc <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80055f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055f8:	d004      	beq.n	8005604 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 80055fa:	e061      	b.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x958>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80055fc:	f7fe faa6 	bl	8003b4c <HAL_RCC_GetPCLK3Freq>
 8005600:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8005602:	e060      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005604:	f107 030c 	add.w	r3, r7, #12
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff fa43 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005612:	e058      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005614:	4b82      	ldr	r3, [pc, #520]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b02      	cmp	r3, #2
 8005620:	d103      	bne.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 8005622:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005626:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005628:	e04d      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800562e:	e04a      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005630:	4b7b      	ldr	r3, [pc, #492]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005636:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800563a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800563e:	d103      	bne.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 8005640:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005644:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005646:	e03e      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800564c:	e03b      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800564e:	4b74      	ldr	r3, [pc, #464]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005654:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005658:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800565a:	4b71      	ldr	r3, [pc, #452]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b02      	cmp	r3, #2
 8005664:	d10c      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800566c:	4b6c      	ldr	r3, [pc, #432]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	08db      	lsrs	r3, r3, #3
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	4a6b      	ldr	r2, [pc, #428]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
 800567c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800567e:	e01e      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005680:	4b67      	ldr	r3, [pc, #412]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005688:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800568c:	d106      	bne.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 800568e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005694:	d102      	bne.n	800569c <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005696:	4b64      	ldr	r3, [pc, #400]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 8005698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800569a:	e010      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800569c:	4b60      	ldr	r3, [pc, #384]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80056a8:	d106      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056b0:	d102      	bne.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80056b2:	4b5e      	ldr	r3, [pc, #376]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80056b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056b6:	e002      	b.n	80056be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80056b8:	2300      	movs	r3, #0
 80056ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80056bc:	e003      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 80056be:	e002      	b.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 80056c0:	2300      	movs	r3, #0
 80056c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80056c4:	bf00      	nop
          }
        }
        break;
 80056c6:	e284      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80056c8:	4b55      	ldr	r3, [pc, #340]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80056ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80056ce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80056d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80056da:	d044      	beq.n	8005766 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 80056dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80056e2:	d879      	bhi.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80056e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056ea:	d02d      	beq.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 80056ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056f2:	d871      	bhi.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056fa:	d017      	beq.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005702:	d869      	bhi.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8005704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005706:	2b00      	cmp	r3, #0
 8005708:	d004      	beq.n	8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 800570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005710:	d004      	beq.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8005712:	e061      	b.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8005714:	f7fe f9ee 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 8005718:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800571a:	e060      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800571c:	f107 030c 	add.w	r3, r7, #12
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff f9b7 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800572a:	e058      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800572c:	4b3c      	ldr	r3, [pc, #240]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800572e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b02      	cmp	r3, #2
 8005738:	d103      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 800573a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8005740:	e04d      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005746:	e04a      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8005748:	4b35      	ldr	r3, [pc, #212]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800574a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800574e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005756:	d103      	bne.n	8005760 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 8005758:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800575c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800575e:	e03e      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005764:	e03b      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005766:	4b2e      	ldr	r3, [pc, #184]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800576c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005772:	4b2b      	ldr	r3, [pc, #172]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b02      	cmp	r3, #2
 800577c:	d10c      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	d109      	bne.n	8005798 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005784:	4b26      	ldr	r3, [pc, #152]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	08db      	lsrs	r3, r3, #3
 800578a:	f003 0303 	and.w	r3, r3, #3
 800578e:	4a25      	ldr	r2, [pc, #148]	@ (8005824 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 8005790:	fa22 f303 	lsr.w	r3, r2, r3
 8005794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005796:	e01e      	b.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005798:	4b21      	ldr	r3, [pc, #132]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057a4:	d106      	bne.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80057a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057ac:	d102      	bne.n	80057b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80057ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005828 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80057b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057b2:	e010      	b.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057b4:	4b1a      	ldr	r3, [pc, #104]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057c0:	d106      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057c8:	d102      	bne.n	80057d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80057ca:	4b18      	ldr	r3, [pc, #96]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 80057cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057ce:	e002      	b.n	80057d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80057d4:	e003      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80057d6:	e002      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80057dc:	bf00      	nop
          }
        }
        break;
 80057de:	e1f8      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80057e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80057e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80057e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ea:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80057ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057f8:	d105      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 8005800:	4b0a      	ldr	r3, [pc, #40]	@ (800582c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8005802:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8005804:	e1e5      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800580c:	d110      	bne.n	8005830 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800580e:	f107 0318 	add.w	r3, r7, #24
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe ffd4 	bl	80047c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800581c:	e1d9      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800581e:	bf00      	nop
 8005820:	44020c00 	.word	0x44020c00
 8005824:	03d09000 	.word	0x03d09000
 8005828:	003d0900 	.word	0x003d0900
 800582c:	016e3600 	.word	0x016e3600
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8005830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005832:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005836:	d107      	bne.n	8005848 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005838:	f107 030c 	add.w	r3, r7, #12
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff f929 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005846:	e1c4      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800584c:	e1c1      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800584e:	4b9d      	ldr	r3, [pc, #628]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	2b04      	cmp	r3, #4
 800585e:	d859      	bhi.n	8005914 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 8005860:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8005862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005866:	bf00      	nop
 8005868:	0800587d 	.word	0x0800587d
 800586c:	0800588d 	.word	0x0800588d
 8005870:	08005915 	.word	0x08005915
 8005874:	0800589d 	.word	0x0800589d
 8005878:	080058a3 	.word	0x080058a3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800587c:	f107 0318 	add.w	r3, r7, #24
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe ff9d 	bl	80047c0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800588a:	e046      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800588c:	f107 030c 	add.w	r3, r7, #12
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff f8ff 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800589a:	e03e      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800589c:	4b8a      	ldr	r3, [pc, #552]	@ (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800589e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80058a0:	e03b      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80058a2:	4b88      	ldr	r3, [pc, #544]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80058a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80058ac:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80058ae:	4b85      	ldr	r3, [pc, #532]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d10c      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80058c0:	4b80      	ldr	r3, [pc, #512]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	08db      	lsrs	r3, r3, #3
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	4a80      	ldr	r2, [pc, #512]	@ (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
 80058d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058d2:	e01e      	b.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80058d4:	4b7b      	ldr	r3, [pc, #492]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058e0:	d106      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 80058e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e8:	d102      	bne.n	80058f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80058ea:	4b79      	ldr	r3, [pc, #484]	@ (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ee:	e010      	b.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80058f0:	4b74      	ldr	r3, [pc, #464]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058fc:	d106      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005904:	d102      	bne.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005906:	4b73      	ldr	r3, [pc, #460]	@ (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800590a:	e002      	b.n	8005912 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005910:	e003      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 8005912:	e002      	b.n	800591a <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8005914:	2300      	movs	r3, #0
 8005916:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005918:	bf00      	nop
          }
        }
        break;
 800591a:	e15a      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800591c:	4b69      	ldr	r3, [pc, #420]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800591e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005926:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592a:	2b20      	cmp	r3, #32
 800592c:	d022      	beq.n	8005974 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 800592e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005930:	2b20      	cmp	r3, #32
 8005932:	d858      	bhi.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005936:	2b18      	cmp	r3, #24
 8005938:	d019      	beq.n	800596e <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	2b18      	cmp	r3, #24
 800593e:	d852      	bhi.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8005940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	d003      	beq.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	2b08      	cmp	r3, #8
 800594a:	d008      	beq.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800594c:	e04b      	b.n	80059e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800594e:	f107 0318 	add.w	r3, r7, #24
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe ff34 	bl	80047c0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800595c:	e046      	b.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595e:	f107 030c 	add.w	r3, r7, #12
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff f896 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800596c:	e03e      	b.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800596e:	4b56      	ldr	r3, [pc, #344]	@ (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005970:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005972:	e03b      	b.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005974:	4b53      	ldr	r3, [pc, #332]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005976:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800597a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800597e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005980:	4b50      	ldr	r3, [pc, #320]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b02      	cmp	r3, #2
 800598a:	d10c      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	d109      	bne.n	80059a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005992:	4b4c      	ldr	r3, [pc, #304]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	08db      	lsrs	r3, r3, #3
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	4a4b      	ldr	r2, [pc, #300]	@ (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800599e:	fa22 f303 	lsr.w	r3, r2, r3
 80059a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059a4:	e01e      	b.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059a6:	4b47      	ldr	r3, [pc, #284]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80059b2:	d106      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 80059b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ba:	d102      	bne.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80059bc:	4b44      	ldr	r3, [pc, #272]	@ (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80059be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059c0:	e010      	b.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059c2:	4b40      	ldr	r3, [pc, #256]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ce:	d106      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80059d6:	d102      	bne.n	80059de <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80059d8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80059da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059dc:	e002      	b.n	80059e4 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 80059e2:	e003      	b.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 80059e4:	e002      	b.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80059ea:	bf00      	nop
          }
        }
        break;
 80059ec:	e0f1      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80059ee:	4b35      	ldr	r3, [pc, #212]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80059f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059f4:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80059f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a00:	d023      	beq.n	8005a4a <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 8005a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a08:	d858      	bhi.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0c:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a0e:	d019      	beq.n	8005a44 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	2bc0      	cmp	r3, #192	@ 0xc0
 8005a14:	d852      	bhi.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8005a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8005a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1e:	2b40      	cmp	r3, #64	@ 0x40
 8005a20:	d008      	beq.n	8005a34 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 8005a22:	e04b      	b.n	8005abc <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a24:	f107 0318 	add.w	r3, r7, #24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe fec9 	bl	80047c0 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005a32:	e046      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a34:	f107 030c 	add.w	r3, r7, #12
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7ff f82b 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005a42:	e03e      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8005a44:	4b20      	ldr	r3, [pc, #128]	@ (8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8005a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005a48:	e03b      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005a50:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a56:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d10c      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8005a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a68:	4b16      	ldr	r3, [pc, #88]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	08db      	lsrs	r3, r3, #3
 8005a6e:	f003 0303 	and.w	r3, r3, #3
 8005a72:	4a16      	ldr	r2, [pc, #88]	@ (8005acc <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
 8005a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a7a:	e01e      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a7c:	4b11      	ldr	r3, [pc, #68]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a88:	d106      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a90:	d102      	bne.n	8005a98 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8005a92:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8005a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a96:	e010      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a98:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aa4:	d106      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005aac:	d102      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8005aae:	4b09      	ldr	r3, [pc, #36]	@ (8005ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8005ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ab2:	e002      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8005ab8:	e003      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8005aba:	e002      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8005ac0:	bf00      	nop
          }
        }
        break;
 8005ac2:	e086      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005ac4:	44020c00 	.word	0x44020c00
 8005ac8:	00bb8000 	.word	0x00bb8000
 8005acc:	03d09000 	.word	0x03d09000
 8005ad0:	003d0900 	.word	0x003d0900
 8005ad4:	016e3600 	.word	0x016e3600
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8005ad8:	4b40      	ldr	r3, [pc, #256]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ade:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005ae2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8005ae4:	4b3d      	ldr	r3, [pc, #244]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af0:	d105      	bne.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 8005af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d102      	bne.n	8005afe <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8005af8:	4b39      	ldr	r3, [pc, #228]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005afc:	e031      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8005afe:	4b37      	ldr	r3, [pc, #220]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b0a:	d10a      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8005b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0e:	2b10      	cmp	r3, #16
 8005b10:	d107      	bne.n	8005b22 <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b12:	f107 0318 	add.w	r3, r7, #24
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fe52 	bl	80047c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b20:	e01f      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8005b22:	4b2e      	ldr	r3, [pc, #184]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d106      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 8005b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d103      	bne.n	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8005b36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b3c:	e011      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8005b3e:	4b27      	ldr	r3, [pc, #156]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005b40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005b44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b4c:	d106      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	2b30      	cmp	r3, #48	@ 0x30
 8005b52:	d103      	bne.n	8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 8005b54:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b5a:	e002      	b.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8005b60:	e037      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005b62:	e036      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8005b64:	4b1d      	ldr	r3, [pc, #116]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005b66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b6a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b6e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8005b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b72:	2b10      	cmp	r3, #16
 8005b74:	d107      	bne.n	8005b86 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005b76:	f107 0318 	add.w	r3, r7, #24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fe20 	bl	80047c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 8005b84:	e025      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 8005b86:	4b15      	ldr	r3, [pc, #84]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b92:	d10a      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 8005b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d107      	bne.n	8005baa <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b9a:	f107 030c 	add.w	r3, r7, #12
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe ff78 	bl	8004a94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ba8:	e00f      	b.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8005baa:	4b0c      	ldr	r3, [pc, #48]	@ (8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bb6:	d105      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8005bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bba:	2b30      	cmp	r3, #48	@ 0x30
 8005bbc:	d102      	bne.n	8005bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 8005bbe:	4b08      	ldr	r3, [pc, #32]	@ (8005be0 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8005bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bc2:	e002      	b.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8005bc8:	e003      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8005bca:	e002      	b.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005bd0:	bf00      	nop
        }
        break;
#endif /* RCC_CCIPR4_ETHCLKSEL */
    }
  }
  return (frequency);
 8005bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3730      	adds	r7, #48	@ 0x30
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	44020c00 	.word	0x44020c00
 8005be0:	02dc6c00 	.word	0x02dc6c00

08005be4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8005bec:	4b48      	ldr	r3, [pc, #288]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a47      	ldr	r2, [pc, #284]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005bf2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bf6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bf8:	f7fc fb36 	bl	8002268 <HAL_GetTick>
 8005bfc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bfe:	e008      	b.n	8005c12 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c00:	f7fc fb32 	bl	8002268 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e07a      	b.n	8005d08 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c12:	4b3f      	ldr	r3, [pc, #252]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c22:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005c26:	f023 0303 	bic.w	r3, r3, #3
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	6811      	ldr	r1, [r2, #0]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	6852      	ldr	r2, [r2, #4]
 8005c32:	0212      	lsls	r2, r2, #8
 8005c34:	430a      	orrs	r2, r1
 8005c36:	4936      	ldr	r1, [pc, #216]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	3b01      	subs	r3, #1
 8005c42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	025b      	lsls	r3, r3, #9
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	431a      	orrs	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	041b      	lsls	r3, r3, #16
 8005c5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	3b01      	subs	r3, #1
 8005c66:	061b      	lsls	r3, r3, #24
 8005c68:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c6c:	4928      	ldr	r1, [pc, #160]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8005c72:	4b27      	ldr	r3, [pc, #156]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	f023 020c 	bic.w	r2, r3, #12
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	4924      	ldr	r1, [pc, #144]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005c80:	4313      	orrs	r3, r2
 8005c82:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8005c84:	4b22      	ldr	r3, [pc, #136]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c88:	f023 0220 	bic.w	r2, r3, #32
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	69db      	ldr	r3, [r3, #28]
 8005c90:	491f      	ldr	r1, [pc, #124]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005c96:	4b1e      	ldr	r3, [pc, #120]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9e:	491c      	ldr	r1, [pc, #112]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8005ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca8:	4a19      	ldr	r2, [pc, #100]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005caa:	f023 0310 	bic.w	r3, r3, #16
 8005cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8005cb0:	4b17      	ldr	r3, [pc, #92]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cb8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6a12      	ldr	r2, [r2, #32]
 8005cc0:	00d2      	lsls	r2, r2, #3
 8005cc2:	4913      	ldr	r1, [pc, #76]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8005cc8:	4b11      	ldr	r3, [pc, #68]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	4a10      	ldr	r2, [pc, #64]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005cce:	f043 0310 	orr.w	r3, r3, #16
 8005cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8005cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005cda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cde:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ce0:	f7fc fac2 	bl	8002268 <HAL_GetTick>
 8005ce4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ce6:	e008      	b.n	8005cfa <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ce8:	f7fc fabe 	bl	8002268 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d901      	bls.n	8005cfa <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e006      	b.n	8005d08 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cfa:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <RCCEx_PLL2_Config+0x12c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0f0      	beq.n	8005ce8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8005d06:	2300      	movs	r3, #0

}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	44020c00 	.word	0x44020c00

08005d14 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e0e7      	b.n	8005ef6 <HAL_SPI_Init+0x1e2>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d105      	bne.n	8005d40 <HAL_SPI_Init+0x2c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2b0f      	cmp	r3, #15
 8005d3a:	d901      	bls.n	8005d40 <HAL_SPI_Init+0x2c>
  {
    return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0da      	b.n	8005ef6 <HAL_SPI_Init+0x1e2>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fd47 	bl	80067d4 <SPI_GetPacketSize>
 8005d46:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d102      	bne.n	8005d56 <HAL_SPI_Init+0x42>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d811      	bhi.n	8005d7a <HAL_SPI_Init+0x66>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d5a:	4a69      	ldr	r2, [pc, #420]	@ (8005f00 <HAL_SPI_Init+0x1ec>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_SPI_Init+0x60>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a67      	ldr	r2, [pc, #412]	@ (8005f04 <HAL_SPI_Init+0x1f0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_SPI_Init+0x60>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a66      	ldr	r2, [pc, #408]	@ (8005f08 <HAL_SPI_Init+0x1f4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d104      	bne.n	8005d7e <HAL_SPI_Init+0x6a>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d901      	bls.n	8005d7e <HAL_SPI_Init+0x6a>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e0bb      	b.n	8005ef6 <HAL_SPI_Init+0x1e2>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_SPI_Init+0x84>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fb fecc 	bl	8001b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0201 	bic.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8005dba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	699b      	ldr	r3, [r3, #24]
 8005dc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005dc4:	d119      	bne.n	8005dfa <HAL_SPI_Init+0xe6>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005dce:	d103      	bne.n	8005dd8 <HAL_SPI_Init+0xc4>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_SPI_Init+0xd6>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10c      	bne.n	8005dfa <HAL_SPI_Init+0xe6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8005de4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005de8:	d107      	bne.n	8005dfa <HAL_SPI_Init+0xe6>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005df8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00f      	beq.n	8005e26 <HAL_SPI_Init+0x112>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	2b06      	cmp	r3, #6
 8005e0c:	d90b      	bls.n	8005e26 <HAL_SPI_Init+0x112>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	430a      	orrs	r2, r1
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	e007      	b.n	8005e36 <HAL_SPI_Init+0x122>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e48:	ea42 0103 	orr.w	r1, r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e66:	431a      	orrs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ea2:	ea42 0103 	orr.w	r1, r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <HAL_SPI_Init+0x1d0>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40013000 	.word	0x40013000
 8005f04:	40003800 	.word	0x40003800
 8005f08:	40003c00 	.word	0x40003c00

08005f0c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	603b      	str	r3, [r7, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3320      	adds	r3, #32
 8005f22:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f24:	f7fc f9a0 	bl	8002268 <HAL_GetTick>
 8005f28:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d001      	beq.n	8005f3a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8005f36:	2302      	movs	r3, #2
 8005f38:	e1e5      	b.n	8006306 <HAL_SPI_Transmit+0x3fa>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_SPI_Transmit+0x3a>
 8005f40:	88fb      	ldrh	r3, [r7, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e1dd      	b.n	8006306 <HAL_SPI_Transmit+0x3fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d101      	bne.n	8005f58 <HAL_SPI_Transmit+0x4c>
 8005f54:	2302      	movs	r3, #2
 8005f56:	e1d6      	b.n	8006306 <HAL_SPI_Transmit+0x3fa>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2203      	movs	r2, #3
 8005f64:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	88fa      	ldrh	r2, [r7, #6]
 8005f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	88fa      	ldrh	r2, [r7, #6]
 8005f82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8005fb0:	d108      	bne.n	8005fc4 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	e009      	b.n	8005fd8 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005fd6:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	0c1b      	lsrs	r3, r3, #16
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	88f9      	ldrh	r1, [r7, #6]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	6812      	ldr	r2, [r2, #0]
 8005fe8:	430b      	orrs	r3, r1
 8005fea:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f042 0201 	orr.w	r2, r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006004:	d107      	bne.n	8006016 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006014:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d956      	bls.n	80060cc <HAL_SPI_Transmit+0x1c0>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a8d      	ldr	r2, [pc, #564]	@ (8006258 <HAL_SPI_Transmit+0x34c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d04a      	beq.n	80060be <HAL_SPI_Transmit+0x1b2>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a8b      	ldr	r2, [pc, #556]	@ (800625c <HAL_SPI_Transmit+0x350>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d045      	beq.n	80060be <HAL_SPI_Transmit+0x1b2>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a8a      	ldr	r2, [pc, #552]	@ (8006260 <HAL_SPI_Transmit+0x354>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d147      	bne.n	80060cc <HAL_SPI_Transmit+0x1c0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800603c:	e03f      	b.n	80060be <HAL_SPI_Transmit+0x1b2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b02      	cmp	r3, #2
 800604a:	d114      	bne.n	8006076 <HAL_SPI_Transmit+0x16a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6812      	ldr	r2, [r2, #0]
 8006056:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800605c:	1d1a      	adds	r2, r3, #4
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006068:	b29b      	uxth	r3, r3
 800606a:	3b01      	subs	r3, #1
 800606c:	b29a      	uxth	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006074:	e023      	b.n	80060be <HAL_SPI_Transmit+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006076:	f7fc f8f7 	bl	8002268 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	683a      	ldr	r2, [r7, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d803      	bhi.n	800608e <HAL_SPI_Transmit+0x182>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608c:	d102      	bne.n	8006094 <HAL_SPI_Transmit+0x188>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d114      	bne.n	80060be <HAL_SPI_Transmit+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 facf 	bl	8006638 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e123      	b.n	8006306 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1b9      	bne.n	800603e <HAL_SPI_Transmit+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80060ca:	e0f6      	b.n	80062ba <HAL_SPI_Transmit+0x3ae>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	2b07      	cmp	r3, #7
 80060d2:	f240 80eb 	bls.w	80062ac <HAL_SPI_Transmit+0x3a0>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80060d6:	e05d      	b.n	8006194 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d132      	bne.n	800614c <HAL_SPI_Transmit+0x240>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d918      	bls.n	8006124 <HAL_SPI_Transmit+0x218>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d014      	beq.n	8006124 <HAL_SPI_Transmit+0x218>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800610a:	1d1a      	adds	r2, r3, #4
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006116:	b29b      	uxth	r3, r3
 8006118:	3b02      	subs	r3, #2
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006122:	e037      	b.n	8006194 <HAL_SPI_Transmit+0x288>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006128:	881a      	ldrh	r2, [r3, #0]
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006132:	1c9a      	adds	r2, r3, #2
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800613e:	b29b      	uxth	r3, r3
 8006140:	3b01      	subs	r3, #1
 8006142:	b29a      	uxth	r2, r3
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800614a:	e023      	b.n	8006194 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800614c:	f7fc f88c 	bl	8002268 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	429a      	cmp	r2, r3
 800615a:	d803      	bhi.n	8006164 <HAL_SPI_Transmit+0x258>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	d102      	bne.n	800616a <HAL_SPI_Transmit+0x25e>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d114      	bne.n	8006194 <HAL_SPI_Transmit+0x288>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fa64 	bl	8006638 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006176:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e0b8      	b.n	8006306 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b00      	cmp	r3, #0
 800619e:	d19b      	bne.n	80060d8 <HAL_SPI_Transmit+0x1cc>
 80061a0:	e08b      	b.n	80062ba <HAL_SPI_Transmit+0x3ae>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d159      	bne.n	8006264 <HAL_SPI_Transmit+0x358>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b03      	cmp	r3, #3
 80061ba:	d918      	bls.n	80061ee <HAL_SPI_Transmit+0x2e2>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c0:	2b40      	cmp	r3, #64	@ 0x40
 80061c2:	d914      	bls.n	80061ee <HAL_SPI_Transmit+0x2e2>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061d4:	1d1a      	adds	r2, r3, #4
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b04      	subs	r3, #4
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80061ec:	e05e      	b.n	80062ac <HAL_SPI_Transmit+0x3a0>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d917      	bls.n	800622a <HAL_SPI_Transmit+0x31e>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d013      	beq.n	800622a <HAL_SPI_Transmit+0x31e>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006206:	881a      	ldrh	r2, [r3, #0]
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006210:	1c9a      	adds	r2, r3, #2
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800621c:	b29b      	uxth	r3, r3
 800621e:	3b02      	subs	r3, #2
 8006220:	b29a      	uxth	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006228:	e040      	b.n	80062ac <HAL_SPI_Transmit+0x3a0>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3320      	adds	r3, #32
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b29a      	uxth	r2, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8006254:	e02a      	b.n	80062ac <HAL_SPI_Transmit+0x3a0>
 8006256:	bf00      	nop
 8006258:	40013000 	.word	0x40013000
 800625c:	40003800 	.word	0x40003800
 8006260:	40003c00 	.word	0x40003c00
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006264:	f7fc f800 	bl	8002268 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	429a      	cmp	r2, r3
 8006272:	d803      	bhi.n	800627c <HAL_SPI_Transmit+0x370>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	d102      	bne.n	8006282 <HAL_SPI_Transmit+0x376>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d114      	bne.n	80062ac <HAL_SPI_Transmit+0x3a0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f9d8 	bl	8006638 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800628e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e02c      	b.n	8006306 <HAL_SPI_Transmit+0x3fa>
    while (hspi->TxXferCount > 0UL)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f47f af74 	bne.w	80061a2 <HAL_SPI_Transmit+0x296>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2200      	movs	r2, #0
 80062c2:	2108      	movs	r1, #8
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 fa57 	bl	8006778 <SPI_WaitOnFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <HAL_SPI_Transmit+0x3d4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062d6:	f043 0220 	orr.w	r2, r3, #32
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 f9a9 	bl	8006638 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2201      	movs	r2, #1
 80062ea:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <HAL_SPI_Transmit+0x3f8>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <HAL_SPI_Transmit+0x3fa>
  }
  else
  {
    return HAL_OK;
 8006304:	2300      	movs	r3, #0
  }
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop

08006310 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	4613      	mov	r3, r2
 800631e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3330      	adds	r3, #48	@ 0x30
 8006326:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006328:	f7fb ff9e 	bl	8002268 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	d001      	beq.n	800633e <HAL_SPI_Receive+0x2e>
  {
    return HAL_BUSY;
 800633a:	2302      	movs	r3, #2
 800633c:	e172      	b.n	8006624 <HAL_SPI_Receive+0x314>
  }

  if ((pData == NULL) || (Size == 0UL))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d002      	beq.n	800634a <HAL_SPI_Receive+0x3a>
 8006344:	88fb      	ldrh	r3, [r7, #6]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_SPI_Receive+0x3e>
  {
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e16a      	b.n	8006624 <HAL_SPI_Receive+0x314>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8006354:	2b01      	cmp	r3, #1
 8006356:	d101      	bne.n	800635c <HAL_SPI_Receive+0x4c>
 8006358:	2302      	movs	r3, #2
 800635a:	e163      	b.n	8006624 <HAL_SPI_Receive+0x314>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2204      	movs	r2, #4
 8006368:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68ba      	ldr	r2, [r7, #8]
 8006378:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	88fa      	ldrh	r2, [r7, #6]
 800637e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	88fa      	ldrh	r2, [r7, #6]
 8006386:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80063b4:	d108      	bne.n	80063c8 <HAL_SPI_Receive+0xb8>
  {
    SPI_1LINE_RX(hspi);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80063c4:	601a      	str	r2, [r3, #0]
 80063c6:	e009      	b.n	80063dc <HAL_SPI_Receive+0xcc>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80063da:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	0c1b      	lsrs	r3, r3, #16
 80063e4:	041b      	lsls	r3, r3, #16
 80063e6:	88f9      	ldrh	r1, [r7, #6]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	6812      	ldr	r2, [r2, #0]
 80063ec:	430b      	orrs	r3, r1
 80063ee:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f042 0201 	orr.w	r2, r2, #1
 80063fe:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006408:	d107      	bne.n	800641a <HAL_SPI_Receive+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006418:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	2b0f      	cmp	r3, #15
 8006420:	d957      	bls.n	80064d2 <HAL_SPI_Receive+0x1c2>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a81      	ldr	r2, [pc, #516]	@ (800662c <HAL_SPI_Receive+0x31c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d04b      	beq.n	80064c4 <HAL_SPI_Receive+0x1b4>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a7f      	ldr	r2, [pc, #508]	@ (8006630 <HAL_SPI_Receive+0x320>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d046      	beq.n	80064c4 <HAL_SPI_Receive+0x1b4>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a7e      	ldr	r2, [pc, #504]	@ (8006634 <HAL_SPI_Receive+0x324>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d148      	bne.n	80064d2 <HAL_SPI_Receive+0x1c2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006440:	e040      	b.n	80064c4 <HAL_SPI_Receive+0x1b4>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695a      	ldr	r2, [r3, #20]
 8006448:	f248 0308 	movw	r3, #32776	@ 0x8008
 800644c:	4013      	ands	r3, r2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d014      	beq.n	800647c <HAL_SPI_Receive+0x16c>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800645a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800645c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006462:	1d1a      	adds	r2, r3, #4
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800646e:	b29b      	uxth	r3, r3
 8006470:	3b01      	subs	r3, #1
 8006472:	b29a      	uxth	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800647a:	e023      	b.n	80064c4 <HAL_SPI_Receive+0x1b4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800647c:	f7fb fef4 	bl	8002268 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	429a      	cmp	r2, r3
 800648a:	d803      	bhi.n	8006494 <HAL_SPI_Receive+0x184>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d102      	bne.n	800649a <HAL_SPI_Receive+0x18a>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d114      	bne.n	80064c4 <HAL_SPI_Receive+0x1b4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f8cc 	bl	8006638 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e0af      	b.n	8006624 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1b8      	bne.n	8006442 <HAL_SPI_Receive+0x132>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80064d0:	e095      	b.n	80065fe <HAL_SPI_Receive+0x2ee>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b07      	cmp	r3, #7
 80064d8:	f240 808b 	bls.w	80065f2 <HAL_SPI_Receive+0x2e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 80064dc:	e03f      	b.n	800655e <HAL_SPI_Receive+0x24e>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d114      	bne.n	8006516 <HAL_SPI_Receive+0x206>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	8812      	ldrh	r2, [r2, #0]
 80064f4:	b292      	uxth	r2, r2
 80064f6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064fc:	1c9a      	adds	r2, r3, #2
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006508:	b29b      	uxth	r3, r3
 800650a:	3b01      	subs	r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8006514:	e023      	b.n	800655e <HAL_SPI_Receive+0x24e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006516:	f7fb fea7 	bl	8002268 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d803      	bhi.n	800652e <HAL_SPI_Receive+0x21e>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652c:	d102      	bne.n	8006534 <HAL_SPI_Receive+0x224>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d114      	bne.n	800655e <HAL_SPI_Receive+0x24e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f87f 	bl	8006638 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006540:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2201      	movs	r2, #1
 800654e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800655a:	2303      	movs	r3, #3
 800655c:	e062      	b.n	8006624 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1b9      	bne.n	80064de <HAL_SPI_Receive+0x1ce>
 800656a:	e048      	b.n	80065fe <HAL_SPI_Receive+0x2ee>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695b      	ldr	r3, [r3, #20]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b01      	cmp	r3, #1
 8006578:	d117      	bne.n	80065aa <HAL_SPI_Receive+0x29a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006586:	7812      	ldrb	r2, [r2, #0]
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006590:	1c5a      	adds	r2, r3, #1
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80065a8:	e023      	b.n	80065f2 <HAL_SPI_Receive+0x2e2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065aa:	f7fb fe5d 	bl	8002268 <HAL_GetTick>
 80065ae:	4602      	mov	r2, r0
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	1ad3      	subs	r3, r2, r3
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d803      	bhi.n	80065c2 <HAL_SPI_Receive+0x2b2>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c0:	d102      	bne.n	80065c8 <HAL_SPI_Receive+0x2b8>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d114      	bne.n	80065f2 <HAL_SPI_Receive+0x2e2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f835 	bl	8006638 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e018      	b.n	8006624 <HAL_SPI_Receive+0x314>
    while (hspi->RxXferCount > 0UL)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d1b6      	bne.n	800656c <HAL_SPI_Receive+0x25c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 f81a 	bl	8006638 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <HAL_SPI_Receive+0x312>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <HAL_SPI_Receive+0x314>
  }
  else
  {
    return HAL_OK;
 8006622:	2300      	movs	r3, #0
  }
}
 8006624:	4618      	mov	r0, r3
 8006626:	3718      	adds	r7, #24
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40013000 	.word	0x40013000
 8006630:	40003800 	.word	0x40003800
 8006634:	40003c00 	.word	0x40003c00

08006638 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0208 	orr.w	r2, r2, #8
 8006656:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	699a      	ldr	r2, [r3, #24]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 0210 	orr.w	r2, r2, #16
 8006666:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8006686:	f023 0303 	bic.w	r3, r3, #3
 800668a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800669a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d014      	beq.n	80066d2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00f      	beq.n	80066d2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066b8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699a      	ldr	r2, [r3, #24]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f042 0220 	orr.w	r2, r2, #32
 80066d0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b03      	cmp	r3, #3
 80066dc:	d014      	beq.n	8006708 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00f      	beq.n	8006708 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066ee:	f043 0204 	orr.w	r2, r3, #4
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006706:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00f      	beq.n	8006732 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006718:	f043 0201 	orr.w	r2, r3, #1
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006730:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00f      	beq.n	800675c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006742:	f043 0208 	orr.w	r2, r3, #8
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800675a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	4613      	mov	r3, r2
 8006786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8006788:	e010      	b.n	80067ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800678a:	f7fb fd6d 	bl	8002268 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d803      	bhi.n	80067a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a0:	d102      	bne.n	80067a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e00f      	b.n	80067cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695a      	ldr	r2, [r3, #20]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	4013      	ands	r3, r2
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	bf0c      	ite	eq
 80067bc:	2301      	moveq	r3, #1
 80067be:	2300      	movne	r3, #0
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	79fb      	ldrb	r3, [r7, #7]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d0df      	beq.n	800678a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b085      	sub	sp, #20
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	3301      	adds	r3, #1
 80067e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	3307      	adds	r3, #7
 80067f2:	08db      	lsrs	r3, r3, #3
 80067f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	fb02 f303 	mul.w	r3, r2, r3
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e042      	b.n	80068a2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f7fb f9fc 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2224      	movs	r2, #36	@ 0x24
 8006838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 0201 	bic.w	r2, r2, #1
 800684a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fa45 	bl	8006ce4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f8c4 	bl	80069e8 <UART_SetConfig>
 8006860:	4603      	mov	r3, r0
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e01b      	b.n	80068a2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006878:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006888:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0201 	orr.w	r2, r2, #1
 8006898:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fac4 	bl	8006e28 <UART_CheckIdleState>
 80068a0:	4603      	mov	r3, r0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b08a      	sub	sp, #40	@ 0x28
 80068ae:	af02      	add	r7, sp, #8
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c0:	2b20      	cmp	r3, #32
 80068c2:	f040 808b 	bne.w	80069dc <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_UART_Transmit+0x28>
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e083      	b.n	80069de <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068e0:	2b80      	cmp	r3, #128	@ 0x80
 80068e2:	d107      	bne.n	80068f4 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689a      	ldr	r2, [r3, #8]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80068f2:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2221      	movs	r2, #33	@ 0x21
 8006900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006904:	f7fb fcb0 	bl	8002268 <HAL_GetTick>
 8006908:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	88fa      	ldrh	r2, [r7, #6]
 800690e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	88fa      	ldrh	r2, [r7, #6]
 8006916:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006922:	d108      	bne.n	8006936 <HAL_UART_Transmit+0x8c>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d104      	bne.n	8006936 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800692c:	2300      	movs	r3, #0
 800692e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	61bb      	str	r3, [r7, #24]
 8006934:	e003      	b.n	800693e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800693a:	2300      	movs	r3, #0
 800693c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800693e:	e030      	b.n	80069a2 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	2200      	movs	r2, #0
 8006948:	2180      	movs	r1, #128	@ 0x80
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 fb16 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e03d      	b.n	80069de <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10b      	bne.n	8006980 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	881b      	ldrh	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006976:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	3302      	adds	r3, #2
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	e007      	b.n	8006990 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	781a      	ldrb	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	3301      	adds	r3, #1
 800698e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1c8      	bne.n	8006940 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2200      	movs	r2, #0
 80069b6:	2140      	movs	r1, #64	@ 0x40
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fadf 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d005      	beq.n	80069d0 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e006      	b.n	80069de <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	e000      	b.n	80069de <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80069dc:	2302      	movs	r3, #2
  }
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
	...

080069e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069ec:	b094      	sub	sp, #80	@ 0x50
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	431a      	orrs	r2, r3
 8006a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	498a      	ldr	r1, [pc, #552]	@ (8006c40 <UART_SetConfig+0x258>)
 8006a18:	4019      	ands	r1, r3
 8006a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a20:	430b      	orrs	r3, r1
 8006a22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a30:	68d9      	ldr	r1, [r3, #12]
 8006a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	ea40 0301 	orr.w	r3, r0, r1
 8006a3a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	4b7f      	ldr	r3, [pc, #508]	@ (8006c44 <UART_SetConfig+0x25c>)
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d004      	beq.n	8006a56 <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a4e:	6a1a      	ldr	r2, [r3, #32]
 8006a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a52:	4313      	orrs	r3, r2
 8006a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8006a60:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8006a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a74:	f023 000f 	bic.w	r0, r3, #15
 8006a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	ea40 0301 	orr.w	r3, r0, r1
 8006a84:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b6f      	ldr	r3, [pc, #444]	@ (8006c48 <UART_SetConfig+0x260>)
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d102      	bne.n	8006a96 <UART_SetConfig+0xae>
 8006a90:	2301      	movs	r3, #1
 8006a92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a94:	e01a      	b.n	8006acc <UART_SetConfig+0xe4>
 8006a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	4b6c      	ldr	r3, [pc, #432]	@ (8006c4c <UART_SetConfig+0x264>)
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d102      	bne.n	8006aa6 <UART_SetConfig+0xbe>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aa4:	e012      	b.n	8006acc <UART_SetConfig+0xe4>
 8006aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	4b69      	ldr	r3, [pc, #420]	@ (8006c50 <UART_SetConfig+0x268>)
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d102      	bne.n	8006ab6 <UART_SetConfig+0xce>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ab4:	e00a      	b.n	8006acc <UART_SetConfig+0xe4>
 8006ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	4b62      	ldr	r3, [pc, #392]	@ (8006c44 <UART_SetConfig+0x25c>)
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d103      	bne.n	8006ac8 <UART_SetConfig+0xe0>
 8006ac0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006ac4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ac6:	e001      	b.n	8006acc <UART_SetConfig+0xe4>
 8006ac8:	2300      	movs	r3, #0
 8006aca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4b5c      	ldr	r3, [pc, #368]	@ (8006c44 <UART_SetConfig+0x25c>)
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d171      	bne.n	8006bba <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006ad6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ad8:	2200      	movs	r2, #0
 8006ada:	623b      	str	r3, [r7, #32]
 8006adc:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ade:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ae2:	f7fe f941 	bl	8004d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8006ae6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8006ae8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	f000 80e2 	beq.w	8006cb4 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	4a57      	ldr	r2, [pc, #348]	@ (8006c54 <UART_SetConfig+0x26c>)
 8006af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006afa:	461a      	mov	r2, r3
 8006afc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b02:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	005b      	lsls	r3, r3, #1
 8006b0c:	4413      	add	r3, r2
 8006b0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d305      	bcc.n	8006b20 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d903      	bls.n	8006b28 <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006b26:	e0c5      	b.n	8006cb4 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	61fa      	str	r2, [r7, #28]
 8006b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b34:	4a47      	ldr	r2, [pc, #284]	@ (8006c54 <UART_SetConfig+0x26c>)
 8006b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	613b      	str	r3, [r7, #16]
 8006b40:	617a      	str	r2, [r7, #20]
 8006b42:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006b4a:	f7fa f8b1 	bl	8000cb0 <__aeabi_uldivmod>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4610      	mov	r0, r2
 8006b54:	4619      	mov	r1, r3
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	f04f 0300 	mov.w	r3, #0
 8006b5e:	020b      	lsls	r3, r1, #8
 8006b60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b64:	0202      	lsls	r2, r0, #8
 8006b66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b68:	6849      	ldr	r1, [r1, #4]
 8006b6a:	0849      	lsrs	r1, r1, #1
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	4605      	mov	r5, r0
 8006b72:	eb12 0804 	adds.w	r8, r2, r4
 8006b76:	eb43 0905 	adc.w	r9, r3, r5
 8006b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	60fa      	str	r2, [r7, #12]
 8006b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b88:	4640      	mov	r0, r8
 8006b8a:	4649      	mov	r1, r9
 8006b8c:	f7fa f890 	bl	8000cb0 <__aeabi_uldivmod>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4613      	mov	r3, r2
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b9e:	d308      	bcc.n	8006bb2 <UART_SetConfig+0x1ca>
 8006ba0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ba6:	d204      	bcs.n	8006bb2 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 8006ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006bae:	60da      	str	r2, [r3, #12]
 8006bb0:	e080      	b.n	8006cb4 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006bb8:	e07c      	b.n	8006cb4 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bc2:	d149      	bne.n	8006c58 <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006bc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	603b      	str	r3, [r7, #0]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006bd0:	f7fe f8ca 	bl	8004d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8006bd4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d06b      	beq.n	8006cb4 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006be0:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <UART_SetConfig+0x26c>)
 8006be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006be6:	461a      	mov	r2, r3
 8006be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bee:	005a      	lsls	r2, r3, #1
 8006bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	085b      	lsrs	r3, r3, #1
 8006bf6:	441a      	add	r2, r3
 8006bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c04:	2b0f      	cmp	r3, #15
 8006c06:	d916      	bls.n	8006c36 <UART_SetConfig+0x24e>
 8006c08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c0e:	d212      	bcs.n	8006c36 <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	f023 030f 	bic.w	r3, r3, #15
 8006c18:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1c:	085b      	lsrs	r3, r3, #1
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8006c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8006c32:	60da      	str	r2, [r3, #12]
 8006c34:	e03e      	b.n	8006cb4 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006c3c:	e03a      	b.n	8006cb4 <UART_SetConfig+0x2cc>
 8006c3e:	bf00      	nop
 8006c40:	cfff69f3 	.word	0xcfff69f3
 8006c44:	44002400 	.word	0x44002400
 8006c48:	40013800 	.word	0x40013800
 8006c4c:	40004400 	.word	0x40004400
 8006c50:	40004800 	.word	0x40004800
 8006c54:	0800c40c 	.word	0x0800c40c
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8006c58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	469a      	mov	sl, r3
 8006c5e:	4693      	mov	fp, r2
 8006c60:	4650      	mov	r0, sl
 8006c62:	4659      	mov	r1, fp
 8006c64:	f7fe f880 	bl	8004d68 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c68:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8006c6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d021      	beq.n	8006cb4 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c74:	4a1a      	ldr	r2, [pc, #104]	@ (8006ce0 <UART_SetConfig+0x2f8>)
 8006c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c7e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	441a      	add	r2, r3
 8006c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c96:	2b0f      	cmp	r3, #15
 8006c98:	d909      	bls.n	8006cae <UART_SetConfig+0x2c6>
 8006c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ca0:	d205      	bcs.n	8006cae <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	60da      	str	r2, [r3, #12]
 8006cac:	e002      	b.n	8006cb4 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ccc:	2200      	movs	r2, #0
 8006cce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006cd0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3750      	adds	r7, #80	@ 0x50
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cde:	bf00      	nop
 8006ce0:	0800c40c 	.word	0x0800c40c

08006ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006de2:	d10a      	bne.n	8006dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b098      	sub	sp, #96	@ 0x60
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e38:	f7fb fa16 	bl	8002268 <HAL_GetTick>
 8006e3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d12f      	bne.n	8006eac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e54:	2200      	movs	r2, #0
 8006e56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f88e 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d022      	beq.n	8006eac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e6      	bne.n	8006e66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e063      	b.n	8006f74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d149      	bne.n	8006f4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f857 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d03c      	beq.n	8006f4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e6      	bne.n	8006ed4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f26:	61fa      	str	r2, [r7, #28]
 8006f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	69b9      	ldr	r1, [r7, #24]
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	617b      	str	r3, [r7, #20]
   return(result);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e5      	bne.n	8006f06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e012      	b.n	8006f74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3758      	adds	r7, #88	@ 0x58
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8c:	e04f      	b.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f94:	d04b      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f96:	f7fb f967 	bl	8002268 <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d302      	bcc.n	8006fac <UART_WaitOnFlagUntilTimeout+0x30>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e04e      	b.n	800704e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d037      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b80      	cmp	r3, #128	@ 0x80
 8006fc2:	d034      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b40      	cmp	r3, #64	@ 0x40
 8006fc8:	d031      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d110      	bne.n	8006ffa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f838 	bl	8007056 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e029      	b.n	800704e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007008:	d111      	bne.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f81e 	bl	8007056 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e00f      	b.n	800704e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4013      	ands	r3, r2
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	429a      	cmp	r2, r3
 800704a:	d0a0      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007056:	b480      	push	{r7}
 8007058:	b095      	sub	sp, #84	@ 0x54
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800706c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800706e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007072:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	461a      	mov	r2, r3
 800707a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800707c:	643b      	str	r3, [r7, #64]	@ 0x40
 800707e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007082:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800708a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e6      	bne.n	800705e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3308      	adds	r3, #8
 8007096:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	61fb      	str	r3, [r7, #28]
   return(result);
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070a6:	f023 0301 	bic.w	r3, r3, #1
 80070aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3308      	adds	r3, #8
 80070b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80070b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070bc:	e841 2300 	strex	r3, r2, [r1]
 80070c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80070c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1e3      	bne.n	8007090 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d118      	bne.n	8007102 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	e853 3f00 	ldrex	r3, [r3]
 80070dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f023 0310 	bic.w	r3, r3, #16
 80070e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80070ee:	61bb      	str	r3, [r7, #24]
 80070f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f2:	6979      	ldr	r1, [r7, #20]
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	e841 2300 	strex	r3, r2, [r1]
 80070fa:	613b      	str	r3, [r7, #16]
   return(result);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1e6      	bne.n	80070d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2220      	movs	r2, #32
 8007106:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007116:	bf00      	nop
 8007118:	3754      	adds	r7, #84	@ 0x54
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007122:	b480      	push	{r7}
 8007124:	b085      	sub	sp, #20
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007130:	2b01      	cmp	r3, #1
 8007132:	d101      	bne.n	8007138 <HAL_UARTEx_DisableFifoMode+0x16>
 8007134:	2302      	movs	r3, #2
 8007136:	e027      	b.n	8007188 <HAL_UARTEx_DisableFifoMode+0x66>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2224      	movs	r2, #36	@ 0x24
 8007144:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0201 	bic.w	r2, r2, #1
 800715e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007166:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2220      	movs	r2, #32
 800717a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d101      	bne.n	80071ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e02d      	b.n	8007208 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2224      	movs	r2, #36	@ 0x24
 80071b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0201 	bic.w	r2, r2, #1
 80071d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	683a      	ldr	r2, [r7, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f84f 	bl	800728c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007224:	2302      	movs	r3, #2
 8007226:	e02d      	b.n	8007284 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2224      	movs	r2, #36	@ 0x24
 8007234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f022 0201 	bic.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	430a      	orrs	r2, r1
 8007262:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 f811 	bl	800728c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800728c:	b480      	push	{r7}
 800728e:	b085      	sub	sp, #20
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007298:	2b00      	cmp	r3, #0
 800729a:	d108      	bne.n	80072ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072ac:	e031      	b.n	8007312 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072ae:	2308      	movs	r3, #8
 80072b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072b2:	2308      	movs	r3, #8
 80072b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	0e5b      	lsrs	r3, r3, #25
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	f003 0307 	and.w	r3, r3, #7
 80072c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	0f5b      	lsrs	r3, r3, #29
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	7b3a      	ldrb	r2, [r7, #12]
 80072da:	4911      	ldr	r1, [pc, #68]	@ (8007320 <UARTEx_SetNbDataToProcess+0x94>)
 80072dc:	5c8a      	ldrb	r2, [r1, r2]
 80072de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80072e2:	7b3a      	ldrb	r2, [r7, #12]
 80072e4:	490f      	ldr	r1, [pc, #60]	@ (8007324 <UARTEx_SetNbDataToProcess+0x98>)
 80072e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80072e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	7b7a      	ldrb	r2, [r7, #13]
 80072f8:	4909      	ldr	r1, [pc, #36]	@ (8007320 <UARTEx_SetNbDataToProcess+0x94>)
 80072fa:	5c8a      	ldrb	r2, [r1, r2]
 80072fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007300:	7b7a      	ldrb	r2, [r7, #13]
 8007302:	4908      	ldr	r1, [pc, #32]	@ (8007324 <UARTEx_SetNbDataToProcess+0x98>)
 8007304:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007306:	fb93 f3f2 	sdiv	r3, r3, r2
 800730a:	b29a      	uxth	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007312:	bf00      	nop
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	0800c424 	.word	0x0800c424
 8007324:	0800c42c 	.word	0x0800c42c

08007328 <__cvt>:
 8007328:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	ec57 6b10 	vmov	r6, r7, d0
 8007330:	2f00      	cmp	r7, #0
 8007332:	460c      	mov	r4, r1
 8007334:	4619      	mov	r1, r3
 8007336:	463b      	mov	r3, r7
 8007338:	bfb4      	ite	lt
 800733a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800733e:	2300      	movge	r3, #0
 8007340:	4691      	mov	r9, r2
 8007342:	bfbf      	itttt	lt
 8007344:	4632      	movlt	r2, r6
 8007346:	461f      	movlt	r7, r3
 8007348:	232d      	movlt	r3, #45	@ 0x2d
 800734a:	4616      	movlt	r6, r2
 800734c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007350:	700b      	strb	r3, [r1, #0]
 8007352:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007354:	f023 0820 	bic.w	r8, r3, #32
 8007358:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800735c:	d005      	beq.n	800736a <__cvt+0x42>
 800735e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007362:	d100      	bne.n	8007366 <__cvt+0x3e>
 8007364:	3401      	adds	r4, #1
 8007366:	2102      	movs	r1, #2
 8007368:	e000      	b.n	800736c <__cvt+0x44>
 800736a:	2103      	movs	r1, #3
 800736c:	ab03      	add	r3, sp, #12
 800736e:	4622      	mov	r2, r4
 8007370:	9301      	str	r3, [sp, #4]
 8007372:	ab02      	add	r3, sp, #8
 8007374:	ec47 6b10 	vmov	d0, r6, r7
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	4653      	mov	r3, sl
 800737c:	f001 f98c 	bl	8008698 <_dtoa_r>
 8007380:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007384:	4605      	mov	r5, r0
 8007386:	d119      	bne.n	80073bc <__cvt+0x94>
 8007388:	f019 0f01 	tst.w	r9, #1
 800738c:	d00e      	beq.n	80073ac <__cvt+0x84>
 800738e:	eb00 0904 	add.w	r9, r0, r4
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	4630      	mov	r0, r6
 8007398:	4639      	mov	r1, r7
 800739a:	f7f9 fba9 	bl	8000af0 <__aeabi_dcmpeq>
 800739e:	b108      	cbz	r0, 80073a4 <__cvt+0x7c>
 80073a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80073a4:	2230      	movs	r2, #48	@ 0x30
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	454b      	cmp	r3, r9
 80073aa:	d31e      	bcc.n	80073ea <__cvt+0xc2>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	4628      	mov	r0, r5
 80073b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073b2:	1b5b      	subs	r3, r3, r5
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	b004      	add	sp, #16
 80073b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073c0:	eb00 0904 	add.w	r9, r0, r4
 80073c4:	d1e5      	bne.n	8007392 <__cvt+0x6a>
 80073c6:	7803      	ldrb	r3, [r0, #0]
 80073c8:	2b30      	cmp	r3, #48	@ 0x30
 80073ca:	d10a      	bne.n	80073e2 <__cvt+0xba>
 80073cc:	2200      	movs	r2, #0
 80073ce:	2300      	movs	r3, #0
 80073d0:	4630      	mov	r0, r6
 80073d2:	4639      	mov	r1, r7
 80073d4:	f7f9 fb8c 	bl	8000af0 <__aeabi_dcmpeq>
 80073d8:	b918      	cbnz	r0, 80073e2 <__cvt+0xba>
 80073da:	f1c4 0401 	rsb	r4, r4, #1
 80073de:	f8ca 4000 	str.w	r4, [sl]
 80073e2:	f8da 3000 	ldr.w	r3, [sl]
 80073e6:	4499      	add	r9, r3
 80073e8:	e7d3      	b.n	8007392 <__cvt+0x6a>
 80073ea:	1c59      	adds	r1, r3, #1
 80073ec:	9103      	str	r1, [sp, #12]
 80073ee:	701a      	strb	r2, [r3, #0]
 80073f0:	e7d9      	b.n	80073a6 <__cvt+0x7e>

080073f2 <__exponent>:
 80073f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073f4:	2900      	cmp	r1, #0
 80073f6:	7002      	strb	r2, [r0, #0]
 80073f8:	bfba      	itte	lt
 80073fa:	4249      	neglt	r1, r1
 80073fc:	232d      	movlt	r3, #45	@ 0x2d
 80073fe:	232b      	movge	r3, #43	@ 0x2b
 8007400:	2909      	cmp	r1, #9
 8007402:	7043      	strb	r3, [r0, #1]
 8007404:	dd28      	ble.n	8007458 <__exponent+0x66>
 8007406:	f10d 0307 	add.w	r3, sp, #7
 800740a:	270a      	movs	r7, #10
 800740c:	461d      	mov	r5, r3
 800740e:	461a      	mov	r2, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	fbb1 f6f7 	udiv	r6, r1, r7
 8007416:	fb07 1416 	mls	r4, r7, r6, r1
 800741a:	3430      	adds	r4, #48	@ 0x30
 800741c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007420:	460c      	mov	r4, r1
 8007422:	4631      	mov	r1, r6
 8007424:	2c63      	cmp	r4, #99	@ 0x63
 8007426:	dcf2      	bgt.n	800740e <__exponent+0x1c>
 8007428:	3130      	adds	r1, #48	@ 0x30
 800742a:	1e94      	subs	r4, r2, #2
 800742c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007430:	1c41      	adds	r1, r0, #1
 8007432:	4623      	mov	r3, r4
 8007434:	42ab      	cmp	r3, r5
 8007436:	d30a      	bcc.n	800744e <__exponent+0x5c>
 8007438:	f10d 0309 	add.w	r3, sp, #9
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	42ac      	cmp	r4, r5
 8007440:	bf88      	it	hi
 8007442:	2300      	movhi	r3, #0
 8007444:	3302      	adds	r3, #2
 8007446:	4403      	add	r3, r0
 8007448:	1a18      	subs	r0, r3, r0
 800744a:	b003      	add	sp, #12
 800744c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800744e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007452:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007456:	e7ed      	b.n	8007434 <__exponent+0x42>
 8007458:	2330      	movs	r3, #48	@ 0x30
 800745a:	3130      	adds	r1, #48	@ 0x30
 800745c:	7083      	strb	r3, [r0, #2]
 800745e:	1d03      	adds	r3, r0, #4
 8007460:	70c1      	strb	r1, [r0, #3]
 8007462:	e7f1      	b.n	8007448 <__exponent+0x56>

08007464 <_printf_float>:
 8007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	b08d      	sub	sp, #52	@ 0x34
 800746a:	460c      	mov	r4, r1
 800746c:	4616      	mov	r6, r2
 800746e:	461f      	mov	r7, r3
 8007470:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007474:	4605      	mov	r5, r0
 8007476:	f000 fff5 	bl	8008464 <_localeconv_r>
 800747a:	6803      	ldr	r3, [r0, #0]
 800747c:	4618      	mov	r0, r3
 800747e:	9304      	str	r3, [sp, #16]
 8007480:	f7f8 ff0a 	bl	8000298 <strlen>
 8007484:	2300      	movs	r3, #0
 8007486:	9005      	str	r0, [sp, #20]
 8007488:	930a      	str	r3, [sp, #40]	@ 0x28
 800748a:	f8d8 3000 	ldr.w	r3, [r8]
 800748e:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007492:	3307      	adds	r3, #7
 8007494:	f8d4 b000 	ldr.w	fp, [r4]
 8007498:	f023 0307 	bic.w	r3, r3, #7
 800749c:	f103 0208 	add.w	r2, r3, #8
 80074a0:	f8c8 2000 	str.w	r2, [r8]
 80074a4:	f04f 32ff 	mov.w	r2, #4294967295
 80074a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80074b0:	f8cd 8018 	str.w	r8, [sp, #24]
 80074b4:	9307      	str	r3, [sp, #28]
 80074b6:	4b9d      	ldr	r3, [pc, #628]	@ (800772c <_printf_float+0x2c8>)
 80074b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80074c0:	f7f9 fb48 	bl	8000b54 <__aeabi_dcmpun>
 80074c4:	bb70      	cbnz	r0, 8007524 <_printf_float+0xc0>
 80074c6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ca:	4b98      	ldr	r3, [pc, #608]	@ (800772c <_printf_float+0x2c8>)
 80074cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074d0:	f7f9 fb22 	bl	8000b18 <__aeabi_dcmple>
 80074d4:	bb30      	cbnz	r0, 8007524 <_printf_float+0xc0>
 80074d6:	2200      	movs	r2, #0
 80074d8:	2300      	movs	r3, #0
 80074da:	4640      	mov	r0, r8
 80074dc:	4649      	mov	r1, r9
 80074de:	f7f9 fb11 	bl	8000b04 <__aeabi_dcmplt>
 80074e2:	b110      	cbz	r0, 80074ea <_printf_float+0x86>
 80074e4:	232d      	movs	r3, #45	@ 0x2d
 80074e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074ea:	4a91      	ldr	r2, [pc, #580]	@ (8007730 <_printf_float+0x2cc>)
 80074ec:	4b91      	ldr	r3, [pc, #580]	@ (8007734 <_printf_float+0x2d0>)
 80074ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80074f2:	bf94      	ite	ls
 80074f4:	4690      	movls	r8, r2
 80074f6:	4698      	movhi	r8, r3
 80074f8:	2303      	movs	r3, #3
 80074fa:	f04f 0900 	mov.w	r9, #0
 80074fe:	6123      	str	r3, [r4, #16]
 8007500:	f02b 0304 	bic.w	r3, fp, #4
 8007504:	6023      	str	r3, [r4, #0]
 8007506:	4633      	mov	r3, r6
 8007508:	aa0b      	add	r2, sp, #44	@ 0x2c
 800750a:	4621      	mov	r1, r4
 800750c:	4628      	mov	r0, r5
 800750e:	9700      	str	r7, [sp, #0]
 8007510:	f000 f9d2 	bl	80078b8 <_printf_common>
 8007514:	3001      	adds	r0, #1
 8007516:	f040 808d 	bne.w	8007634 <_printf_float+0x1d0>
 800751a:	f04f 30ff 	mov.w	r0, #4294967295
 800751e:	b00d      	add	sp, #52	@ 0x34
 8007520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007524:	4642      	mov	r2, r8
 8007526:	464b      	mov	r3, r9
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f9 fb12 	bl	8000b54 <__aeabi_dcmpun>
 8007530:	b140      	cbz	r0, 8007544 <_printf_float+0xe0>
 8007532:	464b      	mov	r3, r9
 8007534:	4a80      	ldr	r2, [pc, #512]	@ (8007738 <_printf_float+0x2d4>)
 8007536:	2b00      	cmp	r3, #0
 8007538:	bfbc      	itt	lt
 800753a:	232d      	movlt	r3, #45	@ 0x2d
 800753c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007540:	4b7e      	ldr	r3, [pc, #504]	@ (800773c <_printf_float+0x2d8>)
 8007542:	e7d4      	b.n	80074ee <_printf_float+0x8a>
 8007544:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007548:	6863      	ldr	r3, [r4, #4]
 800754a:	9206      	str	r2, [sp, #24]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	d13b      	bne.n	80075c8 <_printf_float+0x164>
 8007550:	2306      	movs	r3, #6
 8007552:	6063      	str	r3, [r4, #4]
 8007554:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007558:	2300      	movs	r3, #0
 800755a:	4628      	mov	r0, r5
 800755c:	6022      	str	r2, [r4, #0]
 800755e:	9303      	str	r3, [sp, #12]
 8007560:	ab0a      	add	r3, sp, #40	@ 0x28
 8007562:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007566:	ab09      	add	r3, sp, #36	@ 0x24
 8007568:	ec49 8b10 	vmov	d0, r8, r9
 800756c:	9300      	str	r3, [sp, #0]
 800756e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007572:	6861      	ldr	r1, [r4, #4]
 8007574:	f7ff fed8 	bl	8007328 <__cvt>
 8007578:	9b06      	ldr	r3, [sp, #24]
 800757a:	4680      	mov	r8, r0
 800757c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800757e:	2b47      	cmp	r3, #71	@ 0x47
 8007580:	d129      	bne.n	80075d6 <_printf_float+0x172>
 8007582:	1cc8      	adds	r0, r1, #3
 8007584:	db02      	blt.n	800758c <_printf_float+0x128>
 8007586:	6863      	ldr	r3, [r4, #4]
 8007588:	4299      	cmp	r1, r3
 800758a:	dd41      	ble.n	8007610 <_printf_float+0x1ac>
 800758c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007590:	fa5f fa8a 	uxtb.w	sl, sl
 8007594:	3901      	subs	r1, #1
 8007596:	4652      	mov	r2, sl
 8007598:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800759c:	9109      	str	r1, [sp, #36]	@ 0x24
 800759e:	f7ff ff28 	bl	80073f2 <__exponent>
 80075a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075a4:	4681      	mov	r9, r0
 80075a6:	1813      	adds	r3, r2, r0
 80075a8:	2a01      	cmp	r2, #1
 80075aa:	6123      	str	r3, [r4, #16]
 80075ac:	dc02      	bgt.n	80075b4 <_printf_float+0x150>
 80075ae:	6822      	ldr	r2, [r4, #0]
 80075b0:	07d2      	lsls	r2, r2, #31
 80075b2:	d501      	bpl.n	80075b8 <_printf_float+0x154>
 80075b4:	3301      	adds	r3, #1
 80075b6:	6123      	str	r3, [r4, #16]
 80075b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0a2      	beq.n	8007506 <_printf_float+0xa2>
 80075c0:	232d      	movs	r3, #45	@ 0x2d
 80075c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075c6:	e79e      	b.n	8007506 <_printf_float+0xa2>
 80075c8:	9a06      	ldr	r2, [sp, #24]
 80075ca:	2a47      	cmp	r2, #71	@ 0x47
 80075cc:	d1c2      	bne.n	8007554 <_printf_float+0xf0>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1c0      	bne.n	8007554 <_printf_float+0xf0>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7bd      	b.n	8007552 <_printf_float+0xee>
 80075d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075da:	d9db      	bls.n	8007594 <_printf_float+0x130>
 80075dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80075e0:	d118      	bne.n	8007614 <_printf_float+0x1b0>
 80075e2:	2900      	cmp	r1, #0
 80075e4:	6863      	ldr	r3, [r4, #4]
 80075e6:	dd0b      	ble.n	8007600 <_printf_float+0x19c>
 80075e8:	6121      	str	r1, [r4, #16]
 80075ea:	b913      	cbnz	r3, 80075f2 <_printf_float+0x18e>
 80075ec:	6822      	ldr	r2, [r4, #0]
 80075ee:	07d0      	lsls	r0, r2, #31
 80075f0:	d502      	bpl.n	80075f8 <_printf_float+0x194>
 80075f2:	3301      	adds	r3, #1
 80075f4:	440b      	add	r3, r1
 80075f6:	6123      	str	r3, [r4, #16]
 80075f8:	f04f 0900 	mov.w	r9, #0
 80075fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80075fe:	e7db      	b.n	80075b8 <_printf_float+0x154>
 8007600:	b913      	cbnz	r3, 8007608 <_printf_float+0x1a4>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	07d2      	lsls	r2, r2, #31
 8007606:	d501      	bpl.n	800760c <_printf_float+0x1a8>
 8007608:	3302      	adds	r3, #2
 800760a:	e7f4      	b.n	80075f6 <_printf_float+0x192>
 800760c:	2301      	movs	r3, #1
 800760e:	e7f2      	b.n	80075f6 <_printf_float+0x192>
 8007610:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007616:	4299      	cmp	r1, r3
 8007618:	db05      	blt.n	8007626 <_printf_float+0x1c2>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	6121      	str	r1, [r4, #16]
 800761e:	07d8      	lsls	r0, r3, #31
 8007620:	d5ea      	bpl.n	80075f8 <_printf_float+0x194>
 8007622:	1c4b      	adds	r3, r1, #1
 8007624:	e7e7      	b.n	80075f6 <_printf_float+0x192>
 8007626:	2900      	cmp	r1, #0
 8007628:	bfd4      	ite	le
 800762a:	f1c1 0202 	rsble	r2, r1, #2
 800762e:	2201      	movgt	r2, #1
 8007630:	4413      	add	r3, r2
 8007632:	e7e0      	b.n	80075f6 <_printf_float+0x192>
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	055a      	lsls	r2, r3, #21
 8007638:	d407      	bmi.n	800764a <_printf_float+0x1e6>
 800763a:	6923      	ldr	r3, [r4, #16]
 800763c:	4642      	mov	r2, r8
 800763e:	4631      	mov	r1, r6
 8007640:	4628      	mov	r0, r5
 8007642:	47b8      	blx	r7
 8007644:	3001      	adds	r0, #1
 8007646:	d12b      	bne.n	80076a0 <_printf_float+0x23c>
 8007648:	e767      	b.n	800751a <_printf_float+0xb6>
 800764a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800764e:	f240 80dd 	bls.w	800780c <_printf_float+0x3a8>
 8007652:	2200      	movs	r2, #0
 8007654:	2300      	movs	r3, #0
 8007656:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800765a:	f7f9 fa49 	bl	8000af0 <__aeabi_dcmpeq>
 800765e:	2800      	cmp	r0, #0
 8007660:	d033      	beq.n	80076ca <_printf_float+0x266>
 8007662:	2301      	movs	r3, #1
 8007664:	4a36      	ldr	r2, [pc, #216]	@ (8007740 <_printf_float+0x2dc>)
 8007666:	4631      	mov	r1, r6
 8007668:	4628      	mov	r0, r5
 800766a:	47b8      	blx	r7
 800766c:	3001      	adds	r0, #1
 800766e:	f43f af54 	beq.w	800751a <_printf_float+0xb6>
 8007672:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007676:	4543      	cmp	r3, r8
 8007678:	db02      	blt.n	8007680 <_printf_float+0x21c>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	07d8      	lsls	r0, r3, #31
 800767e:	d50f      	bpl.n	80076a0 <_printf_float+0x23c>
 8007680:	4631      	mov	r1, r6
 8007682:	4628      	mov	r0, r5
 8007684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007688:	47b8      	blx	r7
 800768a:	3001      	adds	r0, #1
 800768c:	f43f af45 	beq.w	800751a <_printf_float+0xb6>
 8007690:	f04f 0900 	mov.w	r9, #0
 8007694:	f108 38ff 	add.w	r8, r8, #4294967295
 8007698:	f104 0a1a 	add.w	sl, r4, #26
 800769c:	45c8      	cmp	r8, r9
 800769e:	dc09      	bgt.n	80076b4 <_printf_float+0x250>
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	079b      	lsls	r3, r3, #30
 80076a4:	f100 8103 	bmi.w	80078ae <_printf_float+0x44a>
 80076a8:	68e0      	ldr	r0, [r4, #12]
 80076aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076ac:	4298      	cmp	r0, r3
 80076ae:	bfb8      	it	lt
 80076b0:	4618      	movlt	r0, r3
 80076b2:	e734      	b.n	800751e <_printf_float+0xba>
 80076b4:	2301      	movs	r3, #1
 80076b6:	4652      	mov	r2, sl
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	f43f af2b 	beq.w	800751a <_printf_float+0xb6>
 80076c4:	f109 0901 	add.w	r9, r9, #1
 80076c8:	e7e8      	b.n	800769c <_printf_float+0x238>
 80076ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dc39      	bgt.n	8007744 <_printf_float+0x2e0>
 80076d0:	2301      	movs	r3, #1
 80076d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007740 <_printf_float+0x2dc>)
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b8      	blx	r7
 80076da:	3001      	adds	r0, #1
 80076dc:	f43f af1d 	beq.w	800751a <_printf_float+0xb6>
 80076e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80076e4:	ea59 0303 	orrs.w	r3, r9, r3
 80076e8:	d102      	bne.n	80076f0 <_printf_float+0x28c>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	07d9      	lsls	r1, r3, #31
 80076ee:	d5d7      	bpl.n	80076a0 <_printf_float+0x23c>
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	f43f af0d 	beq.w	800751a <_printf_float+0xb6>
 8007700:	f04f 0a00 	mov.w	sl, #0
 8007704:	f104 0b1a 	add.w	fp, r4, #26
 8007708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800770a:	425b      	negs	r3, r3
 800770c:	4553      	cmp	r3, sl
 800770e:	dc01      	bgt.n	8007714 <_printf_float+0x2b0>
 8007710:	464b      	mov	r3, r9
 8007712:	e793      	b.n	800763c <_printf_float+0x1d8>
 8007714:	2301      	movs	r3, #1
 8007716:	465a      	mov	r2, fp
 8007718:	4631      	mov	r1, r6
 800771a:	4628      	mov	r0, r5
 800771c:	47b8      	blx	r7
 800771e:	3001      	adds	r0, #1
 8007720:	f43f aefb 	beq.w	800751a <_printf_float+0xb6>
 8007724:	f10a 0a01 	add.w	sl, sl, #1
 8007728:	e7ee      	b.n	8007708 <_printf_float+0x2a4>
 800772a:	bf00      	nop
 800772c:	7fefffff 	.word	0x7fefffff
 8007730:	0800c434 	.word	0x0800c434
 8007734:	0800c438 	.word	0x0800c438
 8007738:	0800c43c 	.word	0x0800c43c
 800773c:	0800c440 	.word	0x0800c440
 8007740:	0800c444 	.word	0x0800c444
 8007744:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007746:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800774a:	4553      	cmp	r3, sl
 800774c:	bfa8      	it	ge
 800774e:	4653      	movge	r3, sl
 8007750:	2b00      	cmp	r3, #0
 8007752:	4699      	mov	r9, r3
 8007754:	dc36      	bgt.n	80077c4 <_printf_float+0x360>
 8007756:	f04f 0b00 	mov.w	fp, #0
 800775a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800775e:	f104 021a 	add.w	r2, r4, #26
 8007762:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007764:	9306      	str	r3, [sp, #24]
 8007766:	eba3 0309 	sub.w	r3, r3, r9
 800776a:	455b      	cmp	r3, fp
 800776c:	dc31      	bgt.n	80077d2 <_printf_float+0x36e>
 800776e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007770:	459a      	cmp	sl, r3
 8007772:	dc3a      	bgt.n	80077ea <_printf_float+0x386>
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	07da      	lsls	r2, r3, #31
 8007778:	d437      	bmi.n	80077ea <_printf_float+0x386>
 800777a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777c:	ebaa 0903 	sub.w	r9, sl, r3
 8007780:	9b06      	ldr	r3, [sp, #24]
 8007782:	ebaa 0303 	sub.w	r3, sl, r3
 8007786:	4599      	cmp	r9, r3
 8007788:	bfa8      	it	ge
 800778a:	4699      	movge	r9, r3
 800778c:	f1b9 0f00 	cmp.w	r9, #0
 8007790:	dc33      	bgt.n	80077fa <_printf_float+0x396>
 8007792:	f04f 0800 	mov.w	r8, #0
 8007796:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800779a:	f104 0b1a 	add.w	fp, r4, #26
 800779e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a0:	ebaa 0303 	sub.w	r3, sl, r3
 80077a4:	eba3 0309 	sub.w	r3, r3, r9
 80077a8:	4543      	cmp	r3, r8
 80077aa:	f77f af79 	ble.w	80076a0 <_printf_float+0x23c>
 80077ae:	2301      	movs	r3, #1
 80077b0:	465a      	mov	r2, fp
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	f43f aeae 	beq.w	800751a <_printf_float+0xb6>
 80077be:	f108 0801 	add.w	r8, r8, #1
 80077c2:	e7ec      	b.n	800779e <_printf_float+0x33a>
 80077c4:	4642      	mov	r2, r8
 80077c6:	4631      	mov	r1, r6
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b8      	blx	r7
 80077cc:	3001      	adds	r0, #1
 80077ce:	d1c2      	bne.n	8007756 <_printf_float+0x2f2>
 80077d0:	e6a3      	b.n	800751a <_printf_float+0xb6>
 80077d2:	2301      	movs	r3, #1
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	9206      	str	r2, [sp, #24]
 80077da:	47b8      	blx	r7
 80077dc:	3001      	adds	r0, #1
 80077de:	f43f ae9c 	beq.w	800751a <_printf_float+0xb6>
 80077e2:	f10b 0b01 	add.w	fp, fp, #1
 80077e6:	9a06      	ldr	r2, [sp, #24]
 80077e8:	e7bb      	b.n	8007762 <_printf_float+0x2fe>
 80077ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077ee:	4631      	mov	r1, r6
 80077f0:	4628      	mov	r0, r5
 80077f2:	47b8      	blx	r7
 80077f4:	3001      	adds	r0, #1
 80077f6:	d1c0      	bne.n	800777a <_printf_float+0x316>
 80077f8:	e68f      	b.n	800751a <_printf_float+0xb6>
 80077fa:	9a06      	ldr	r2, [sp, #24]
 80077fc:	464b      	mov	r3, r9
 80077fe:	4631      	mov	r1, r6
 8007800:	4628      	mov	r0, r5
 8007802:	4442      	add	r2, r8
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	d1c3      	bne.n	8007792 <_printf_float+0x32e>
 800780a:	e686      	b.n	800751a <_printf_float+0xb6>
 800780c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007810:	f1ba 0f01 	cmp.w	sl, #1
 8007814:	dc01      	bgt.n	800781a <_printf_float+0x3b6>
 8007816:	07db      	lsls	r3, r3, #31
 8007818:	d536      	bpl.n	8007888 <_printf_float+0x424>
 800781a:	2301      	movs	r3, #1
 800781c:	4642      	mov	r2, r8
 800781e:	4631      	mov	r1, r6
 8007820:	4628      	mov	r0, r5
 8007822:	47b8      	blx	r7
 8007824:	3001      	adds	r0, #1
 8007826:	f43f ae78 	beq.w	800751a <_printf_float+0xb6>
 800782a:	4631      	mov	r1, r6
 800782c:	4628      	mov	r0, r5
 800782e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007832:	47b8      	blx	r7
 8007834:	3001      	adds	r0, #1
 8007836:	f43f ae70 	beq.w	800751a <_printf_float+0xb6>
 800783a:	2200      	movs	r2, #0
 800783c:	2300      	movs	r3, #0
 800783e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007842:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007846:	f7f9 f953 	bl	8000af0 <__aeabi_dcmpeq>
 800784a:	b9c0      	cbnz	r0, 800787e <_printf_float+0x41a>
 800784c:	4653      	mov	r3, sl
 800784e:	f108 0201 	add.w	r2, r8, #1
 8007852:	4631      	mov	r1, r6
 8007854:	4628      	mov	r0, r5
 8007856:	47b8      	blx	r7
 8007858:	3001      	adds	r0, #1
 800785a:	d10c      	bne.n	8007876 <_printf_float+0x412>
 800785c:	e65d      	b.n	800751a <_printf_float+0xb6>
 800785e:	2301      	movs	r3, #1
 8007860:	465a      	mov	r2, fp
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	f43f ae56 	beq.w	800751a <_printf_float+0xb6>
 800786e:	f108 0801 	add.w	r8, r8, #1
 8007872:	45d0      	cmp	r8, sl
 8007874:	dbf3      	blt.n	800785e <_printf_float+0x3fa>
 8007876:	464b      	mov	r3, r9
 8007878:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800787c:	e6df      	b.n	800763e <_printf_float+0x1da>
 800787e:	f04f 0800 	mov.w	r8, #0
 8007882:	f104 0b1a 	add.w	fp, r4, #26
 8007886:	e7f4      	b.n	8007872 <_printf_float+0x40e>
 8007888:	2301      	movs	r3, #1
 800788a:	4642      	mov	r2, r8
 800788c:	e7e1      	b.n	8007852 <_printf_float+0x3ee>
 800788e:	2301      	movs	r3, #1
 8007890:	464a      	mov	r2, r9
 8007892:	4631      	mov	r1, r6
 8007894:	4628      	mov	r0, r5
 8007896:	47b8      	blx	r7
 8007898:	3001      	adds	r0, #1
 800789a:	f43f ae3e 	beq.w	800751a <_printf_float+0xb6>
 800789e:	f108 0801 	add.w	r8, r8, #1
 80078a2:	68e3      	ldr	r3, [r4, #12]
 80078a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078a6:	1a5b      	subs	r3, r3, r1
 80078a8:	4543      	cmp	r3, r8
 80078aa:	dcf0      	bgt.n	800788e <_printf_float+0x42a>
 80078ac:	e6fc      	b.n	80076a8 <_printf_float+0x244>
 80078ae:	f04f 0800 	mov.w	r8, #0
 80078b2:	f104 0919 	add.w	r9, r4, #25
 80078b6:	e7f4      	b.n	80078a2 <_printf_float+0x43e>

080078b8 <_printf_common>:
 80078b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078bc:	4616      	mov	r6, r2
 80078be:	4698      	mov	r8, r3
 80078c0:	688a      	ldr	r2, [r1, #8]
 80078c2:	4607      	mov	r7, r0
 80078c4:	690b      	ldr	r3, [r1, #16]
 80078c6:	460c      	mov	r4, r1
 80078c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078cc:	4293      	cmp	r3, r2
 80078ce:	bfb8      	it	lt
 80078d0:	4613      	movlt	r3, r2
 80078d2:	6033      	str	r3, [r6, #0]
 80078d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078d8:	b10a      	cbz	r2, 80078de <_printf_common+0x26>
 80078da:	3301      	adds	r3, #1
 80078dc:	6033      	str	r3, [r6, #0]
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	0699      	lsls	r1, r3, #26
 80078e2:	bf42      	ittt	mi
 80078e4:	6833      	ldrmi	r3, [r6, #0]
 80078e6:	3302      	addmi	r3, #2
 80078e8:	6033      	strmi	r3, [r6, #0]
 80078ea:	6825      	ldr	r5, [r4, #0]
 80078ec:	f015 0506 	ands.w	r5, r5, #6
 80078f0:	d106      	bne.n	8007900 <_printf_common+0x48>
 80078f2:	f104 0a19 	add.w	sl, r4, #25
 80078f6:	68e3      	ldr	r3, [r4, #12]
 80078f8:	6832      	ldr	r2, [r6, #0]
 80078fa:	1a9b      	subs	r3, r3, r2
 80078fc:	42ab      	cmp	r3, r5
 80078fe:	dc2b      	bgt.n	8007958 <_printf_common+0xa0>
 8007900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007904:	6822      	ldr	r2, [r4, #0]
 8007906:	3b00      	subs	r3, #0
 8007908:	bf18      	it	ne
 800790a:	2301      	movne	r3, #1
 800790c:	0692      	lsls	r2, r2, #26
 800790e:	d430      	bmi.n	8007972 <_printf_common+0xba>
 8007910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007914:	4641      	mov	r1, r8
 8007916:	4638      	mov	r0, r7
 8007918:	47c8      	blx	r9
 800791a:	3001      	adds	r0, #1
 800791c:	d023      	beq.n	8007966 <_printf_common+0xae>
 800791e:	6823      	ldr	r3, [r4, #0]
 8007920:	341a      	adds	r4, #26
 8007922:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8007926:	f003 0306 	and.w	r3, r3, #6
 800792a:	2b04      	cmp	r3, #4
 800792c:	bf0a      	itet	eq
 800792e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8007932:	2500      	movne	r5, #0
 8007934:	6833      	ldreq	r3, [r6, #0]
 8007936:	f04f 0600 	mov.w	r6, #0
 800793a:	bf08      	it	eq
 800793c:	1aed      	subeq	r5, r5, r3
 800793e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007942:	bf08      	it	eq
 8007944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007948:	4293      	cmp	r3, r2
 800794a:	bfc4      	itt	gt
 800794c:	1a9b      	subgt	r3, r3, r2
 800794e:	18ed      	addgt	r5, r5, r3
 8007950:	42b5      	cmp	r5, r6
 8007952:	d11a      	bne.n	800798a <_printf_common+0xd2>
 8007954:	2000      	movs	r0, #0
 8007956:	e008      	b.n	800796a <_printf_common+0xb2>
 8007958:	2301      	movs	r3, #1
 800795a:	4652      	mov	r2, sl
 800795c:	4641      	mov	r1, r8
 800795e:	4638      	mov	r0, r7
 8007960:	47c8      	blx	r9
 8007962:	3001      	adds	r0, #1
 8007964:	d103      	bne.n	800796e <_printf_common+0xb6>
 8007966:	f04f 30ff 	mov.w	r0, #4294967295
 800796a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796e:	3501      	adds	r5, #1
 8007970:	e7c1      	b.n	80078f6 <_printf_common+0x3e>
 8007972:	18e1      	adds	r1, r4, r3
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	2030      	movs	r0, #48	@ 0x30
 8007978:	3302      	adds	r3, #2
 800797a:	4422      	add	r2, r4
 800797c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007980:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007984:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007988:	e7c2      	b.n	8007910 <_printf_common+0x58>
 800798a:	2301      	movs	r3, #1
 800798c:	4622      	mov	r2, r4
 800798e:	4641      	mov	r1, r8
 8007990:	4638      	mov	r0, r7
 8007992:	47c8      	blx	r9
 8007994:	3001      	adds	r0, #1
 8007996:	d0e6      	beq.n	8007966 <_printf_common+0xae>
 8007998:	3601      	adds	r6, #1
 800799a:	e7d9      	b.n	8007950 <_printf_common+0x98>

0800799c <_printf_i>:
 800799c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	7e0f      	ldrb	r7, [r1, #24]
 80079a2:	4691      	mov	r9, r2
 80079a4:	4680      	mov	r8, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	2f78      	cmp	r7, #120	@ 0x78
 80079aa:	469a      	mov	sl, r3
 80079ac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079b2:	d807      	bhi.n	80079c4 <_printf_i+0x28>
 80079b4:	2f62      	cmp	r7, #98	@ 0x62
 80079b6:	d80a      	bhi.n	80079ce <_printf_i+0x32>
 80079b8:	2f00      	cmp	r7, #0
 80079ba:	f000 80d2 	beq.w	8007b62 <_printf_i+0x1c6>
 80079be:	2f58      	cmp	r7, #88	@ 0x58
 80079c0:	f000 80b9 	beq.w	8007b36 <_printf_i+0x19a>
 80079c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079cc:	e03a      	b.n	8007a44 <_printf_i+0xa8>
 80079ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079d2:	2b15      	cmp	r3, #21
 80079d4:	d8f6      	bhi.n	80079c4 <_printf_i+0x28>
 80079d6:	a101      	add	r1, pc, #4	@ (adr r1, 80079dc <_printf_i+0x40>)
 80079d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079dc:	08007a35 	.word	0x08007a35
 80079e0:	08007a49 	.word	0x08007a49
 80079e4:	080079c5 	.word	0x080079c5
 80079e8:	080079c5 	.word	0x080079c5
 80079ec:	080079c5 	.word	0x080079c5
 80079f0:	080079c5 	.word	0x080079c5
 80079f4:	08007a49 	.word	0x08007a49
 80079f8:	080079c5 	.word	0x080079c5
 80079fc:	080079c5 	.word	0x080079c5
 8007a00:	080079c5 	.word	0x080079c5
 8007a04:	080079c5 	.word	0x080079c5
 8007a08:	08007b49 	.word	0x08007b49
 8007a0c:	08007a73 	.word	0x08007a73
 8007a10:	08007b03 	.word	0x08007b03
 8007a14:	080079c5 	.word	0x080079c5
 8007a18:	080079c5 	.word	0x080079c5
 8007a1c:	08007b6b 	.word	0x08007b6b
 8007a20:	080079c5 	.word	0x080079c5
 8007a24:	08007a73 	.word	0x08007a73
 8007a28:	080079c5 	.word	0x080079c5
 8007a2c:	080079c5 	.word	0x080079c5
 8007a30:	08007b0b 	.word	0x08007b0b
 8007a34:	6833      	ldr	r3, [r6, #0]
 8007a36:	1d1a      	adds	r2, r3, #4
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6032      	str	r2, [r6, #0]
 8007a3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a44:	2301      	movs	r3, #1
 8007a46:	e09d      	b.n	8007b84 <_printf_i+0x1e8>
 8007a48:	6833      	ldr	r3, [r6, #0]
 8007a4a:	6820      	ldr	r0, [r4, #0]
 8007a4c:	1d19      	adds	r1, r3, #4
 8007a4e:	6031      	str	r1, [r6, #0]
 8007a50:	0606      	lsls	r6, r0, #24
 8007a52:	d501      	bpl.n	8007a58 <_printf_i+0xbc>
 8007a54:	681d      	ldr	r5, [r3, #0]
 8007a56:	e003      	b.n	8007a60 <_printf_i+0xc4>
 8007a58:	0645      	lsls	r5, r0, #25
 8007a5a:	d5fb      	bpl.n	8007a54 <_printf_i+0xb8>
 8007a5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a60:	2d00      	cmp	r5, #0
 8007a62:	da03      	bge.n	8007a6c <_printf_i+0xd0>
 8007a64:	232d      	movs	r3, #45	@ 0x2d
 8007a66:	426d      	negs	r5, r5
 8007a68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a6c:	4859      	ldr	r0, [pc, #356]	@ (8007bd4 <_printf_i+0x238>)
 8007a6e:	230a      	movs	r3, #10
 8007a70:	e011      	b.n	8007a96 <_printf_i+0xfa>
 8007a72:	6821      	ldr	r1, [r4, #0]
 8007a74:	6833      	ldr	r3, [r6, #0]
 8007a76:	0608      	lsls	r0, r1, #24
 8007a78:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a7c:	d402      	bmi.n	8007a84 <_printf_i+0xe8>
 8007a7e:	0649      	lsls	r1, r1, #25
 8007a80:	bf48      	it	mi
 8007a82:	b2ad      	uxthmi	r5, r5
 8007a84:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a86:	6033      	str	r3, [r6, #0]
 8007a88:	4852      	ldr	r0, [pc, #328]	@ (8007bd4 <_printf_i+0x238>)
 8007a8a:	bf14      	ite	ne
 8007a8c:	230a      	movne	r3, #10
 8007a8e:	2308      	moveq	r3, #8
 8007a90:	2100      	movs	r1, #0
 8007a92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a96:	6866      	ldr	r6, [r4, #4]
 8007a98:	2e00      	cmp	r6, #0
 8007a9a:	60a6      	str	r6, [r4, #8]
 8007a9c:	bfa2      	ittt	ge
 8007a9e:	6821      	ldrge	r1, [r4, #0]
 8007aa0:	f021 0104 	bicge.w	r1, r1, #4
 8007aa4:	6021      	strge	r1, [r4, #0]
 8007aa6:	b90d      	cbnz	r5, 8007aac <_printf_i+0x110>
 8007aa8:	2e00      	cmp	r6, #0
 8007aaa:	d04b      	beq.n	8007b44 <_printf_i+0x1a8>
 8007aac:	4616      	mov	r6, r2
 8007aae:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ab2:	fb03 5711 	mls	r7, r3, r1, r5
 8007ab6:	5dc7      	ldrb	r7, [r0, r7]
 8007ab8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007abc:	462f      	mov	r7, r5
 8007abe:	460d      	mov	r5, r1
 8007ac0:	42bb      	cmp	r3, r7
 8007ac2:	d9f4      	bls.n	8007aae <_printf_i+0x112>
 8007ac4:	2b08      	cmp	r3, #8
 8007ac6:	d10b      	bne.n	8007ae0 <_printf_i+0x144>
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	07df      	lsls	r7, r3, #31
 8007acc:	d508      	bpl.n	8007ae0 <_printf_i+0x144>
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	6861      	ldr	r1, [r4, #4]
 8007ad2:	4299      	cmp	r1, r3
 8007ad4:	bfde      	ittt	le
 8007ad6:	2330      	movle	r3, #48	@ 0x30
 8007ad8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007adc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ae0:	1b92      	subs	r2, r2, r6
 8007ae2:	6122      	str	r2, [r4, #16]
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	aa03      	add	r2, sp, #12
 8007ae8:	4621      	mov	r1, r4
 8007aea:	4640      	mov	r0, r8
 8007aec:	f8cd a000 	str.w	sl, [sp]
 8007af0:	f7ff fee2 	bl	80078b8 <_printf_common>
 8007af4:	3001      	adds	r0, #1
 8007af6:	d14a      	bne.n	8007b8e <_printf_i+0x1f2>
 8007af8:	f04f 30ff 	mov.w	r0, #4294967295
 8007afc:	b004      	add	sp, #16
 8007afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	f043 0320 	orr.w	r3, r3, #32
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	2778      	movs	r7, #120	@ 0x78
 8007b0c:	4832      	ldr	r0, [pc, #200]	@ (8007bd8 <_printf_i+0x23c>)
 8007b0e:	6823      	ldr	r3, [r4, #0]
 8007b10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b14:	061f      	lsls	r7, r3, #24
 8007b16:	6831      	ldr	r1, [r6, #0]
 8007b18:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b1c:	d402      	bmi.n	8007b24 <_printf_i+0x188>
 8007b1e:	065f      	lsls	r7, r3, #25
 8007b20:	bf48      	it	mi
 8007b22:	b2ad      	uxthmi	r5, r5
 8007b24:	6031      	str	r1, [r6, #0]
 8007b26:	07d9      	lsls	r1, r3, #31
 8007b28:	bf44      	itt	mi
 8007b2a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b2e:	6023      	strmi	r3, [r4, #0]
 8007b30:	b11d      	cbz	r5, 8007b3a <_printf_i+0x19e>
 8007b32:	2310      	movs	r3, #16
 8007b34:	e7ac      	b.n	8007a90 <_printf_i+0xf4>
 8007b36:	4827      	ldr	r0, [pc, #156]	@ (8007bd4 <_printf_i+0x238>)
 8007b38:	e7e9      	b.n	8007b0e <_printf_i+0x172>
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	f023 0320 	bic.w	r3, r3, #32
 8007b40:	6023      	str	r3, [r4, #0]
 8007b42:	e7f6      	b.n	8007b32 <_printf_i+0x196>
 8007b44:	4616      	mov	r6, r2
 8007b46:	e7bd      	b.n	8007ac4 <_printf_i+0x128>
 8007b48:	6833      	ldr	r3, [r6, #0]
 8007b4a:	6825      	ldr	r5, [r4, #0]
 8007b4c:	1d18      	adds	r0, r3, #4
 8007b4e:	6961      	ldr	r1, [r4, #20]
 8007b50:	6030      	str	r0, [r6, #0]
 8007b52:	062e      	lsls	r6, r5, #24
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	d501      	bpl.n	8007b5c <_printf_i+0x1c0>
 8007b58:	6019      	str	r1, [r3, #0]
 8007b5a:	e002      	b.n	8007b62 <_printf_i+0x1c6>
 8007b5c:	0668      	lsls	r0, r5, #25
 8007b5e:	d5fb      	bpl.n	8007b58 <_printf_i+0x1bc>
 8007b60:	8019      	strh	r1, [r3, #0]
 8007b62:	2300      	movs	r3, #0
 8007b64:	4616      	mov	r6, r2
 8007b66:	6123      	str	r3, [r4, #16]
 8007b68:	e7bc      	b.n	8007ae4 <_printf_i+0x148>
 8007b6a:	6833      	ldr	r3, [r6, #0]
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	1d1a      	adds	r2, r3, #4
 8007b70:	6032      	str	r2, [r6, #0]
 8007b72:	681e      	ldr	r6, [r3, #0]
 8007b74:	6862      	ldr	r2, [r4, #4]
 8007b76:	4630      	mov	r0, r6
 8007b78:	f000 fceb 	bl	8008552 <memchr>
 8007b7c:	b108      	cbz	r0, 8007b82 <_printf_i+0x1e6>
 8007b7e:	1b80      	subs	r0, r0, r6
 8007b80:	6060      	str	r0, [r4, #4]
 8007b82:	6863      	ldr	r3, [r4, #4]
 8007b84:	6123      	str	r3, [r4, #16]
 8007b86:	2300      	movs	r3, #0
 8007b88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b8c:	e7aa      	b.n	8007ae4 <_printf_i+0x148>
 8007b8e:	6923      	ldr	r3, [r4, #16]
 8007b90:	4632      	mov	r2, r6
 8007b92:	4649      	mov	r1, r9
 8007b94:	4640      	mov	r0, r8
 8007b96:	47d0      	blx	sl
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d0ad      	beq.n	8007af8 <_printf_i+0x15c>
 8007b9c:	6823      	ldr	r3, [r4, #0]
 8007b9e:	079b      	lsls	r3, r3, #30
 8007ba0:	d413      	bmi.n	8007bca <_printf_i+0x22e>
 8007ba2:	68e0      	ldr	r0, [r4, #12]
 8007ba4:	9b03      	ldr	r3, [sp, #12]
 8007ba6:	4298      	cmp	r0, r3
 8007ba8:	bfb8      	it	lt
 8007baa:	4618      	movlt	r0, r3
 8007bac:	e7a6      	b.n	8007afc <_printf_i+0x160>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	4649      	mov	r1, r9
 8007bb4:	4640      	mov	r0, r8
 8007bb6:	47d0      	blx	sl
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d09d      	beq.n	8007af8 <_printf_i+0x15c>
 8007bbc:	3501      	adds	r5, #1
 8007bbe:	68e3      	ldr	r3, [r4, #12]
 8007bc0:	9903      	ldr	r1, [sp, #12]
 8007bc2:	1a5b      	subs	r3, r3, r1
 8007bc4:	42ab      	cmp	r3, r5
 8007bc6:	dcf2      	bgt.n	8007bae <_printf_i+0x212>
 8007bc8:	e7eb      	b.n	8007ba2 <_printf_i+0x206>
 8007bca:	2500      	movs	r5, #0
 8007bcc:	f104 0619 	add.w	r6, r4, #25
 8007bd0:	e7f5      	b.n	8007bbe <_printf_i+0x222>
 8007bd2:	bf00      	nop
 8007bd4:	0800c446 	.word	0x0800c446
 8007bd8:	0800c457 	.word	0x0800c457

08007bdc <_scanf_float>:
 8007bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	b087      	sub	sp, #28
 8007be2:	4617      	mov	r7, r2
 8007be4:	4680      	mov	r8, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	9303      	str	r3, [sp, #12]
 8007bea:	688b      	ldr	r3, [r1, #8]
 8007bec:	1e5a      	subs	r2, r3, #1
 8007bee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007bf2:	460a      	mov	r2, r1
 8007bf4:	bf89      	itett	hi
 8007bf6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007bfa:	f04f 0b00 	movls.w	fp, #0
 8007bfe:	eb03 0b05 	addhi.w	fp, r3, r5
 8007c02:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007c06:	f04f 0500 	mov.w	r5, #0
 8007c0a:	bf88      	it	hi
 8007c0c:	608b      	strhi	r3, [r1, #8]
 8007c0e:	680b      	ldr	r3, [r1, #0]
 8007c10:	46aa      	mov	sl, r5
 8007c12:	46a9      	mov	r9, r5
 8007c14:	9502      	str	r5, [sp, #8]
 8007c16:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007c1a:	f842 3b1c 	str.w	r3, [r2], #28
 8007c1e:	4616      	mov	r6, r2
 8007c20:	9201      	str	r2, [sp, #4]
 8007c22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c26:	68a2      	ldr	r2, [r4, #8]
 8007c28:	b152      	cbz	r2, 8007c40 <_scanf_float+0x64>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	2b4e      	cmp	r3, #78	@ 0x4e
 8007c30:	d864      	bhi.n	8007cfc <_scanf_float+0x120>
 8007c32:	2b40      	cmp	r3, #64	@ 0x40
 8007c34:	d83c      	bhi.n	8007cb0 <_scanf_float+0xd4>
 8007c36:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007c3a:	b2c8      	uxtb	r0, r1
 8007c3c:	280e      	cmp	r0, #14
 8007c3e:	d93a      	bls.n	8007cb6 <_scanf_float+0xda>
 8007c40:	f1b9 0f00 	cmp.w	r9, #0
 8007c44:	d003      	beq.n	8007c4e <_scanf_float+0x72>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c4c:	6023      	str	r3, [r4, #0]
 8007c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c52:	f1ba 0f01 	cmp.w	sl, #1
 8007c56:	f200 8117 	bhi.w	8007e88 <_scanf_float+0x2ac>
 8007c5a:	9b01      	ldr	r3, [sp, #4]
 8007c5c:	429e      	cmp	r6, r3
 8007c5e:	f200 8108 	bhi.w	8007e72 <_scanf_float+0x296>
 8007c62:	2001      	movs	r0, #1
 8007c64:	b007      	add	sp, #28
 8007c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007c6e:	2a0d      	cmp	r2, #13
 8007c70:	d8e6      	bhi.n	8007c40 <_scanf_float+0x64>
 8007c72:	a101      	add	r1, pc, #4	@ (adr r1, 8007c78 <_scanf_float+0x9c>)
 8007c74:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c78:	08007dbf 	.word	0x08007dbf
 8007c7c:	08007c41 	.word	0x08007c41
 8007c80:	08007c41 	.word	0x08007c41
 8007c84:	08007c41 	.word	0x08007c41
 8007c88:	08007e1f 	.word	0x08007e1f
 8007c8c:	08007df7 	.word	0x08007df7
 8007c90:	08007c41 	.word	0x08007c41
 8007c94:	08007c41 	.word	0x08007c41
 8007c98:	08007dcd 	.word	0x08007dcd
 8007c9c:	08007c41 	.word	0x08007c41
 8007ca0:	08007c41 	.word	0x08007c41
 8007ca4:	08007c41 	.word	0x08007c41
 8007ca8:	08007c41 	.word	0x08007c41
 8007cac:	08007d85 	.word	0x08007d85
 8007cb0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007cb4:	e7db      	b.n	8007c6e <_scanf_float+0x92>
 8007cb6:	290e      	cmp	r1, #14
 8007cb8:	d8c2      	bhi.n	8007c40 <_scanf_float+0x64>
 8007cba:	a001      	add	r0, pc, #4	@ (adr r0, 8007cc0 <_scanf_float+0xe4>)
 8007cbc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007cc0:	08007d75 	.word	0x08007d75
 8007cc4:	08007c41 	.word	0x08007c41
 8007cc8:	08007d75 	.word	0x08007d75
 8007ccc:	08007e0b 	.word	0x08007e0b
 8007cd0:	08007c41 	.word	0x08007c41
 8007cd4:	08007d1d 	.word	0x08007d1d
 8007cd8:	08007d5b 	.word	0x08007d5b
 8007cdc:	08007d5b 	.word	0x08007d5b
 8007ce0:	08007d5b 	.word	0x08007d5b
 8007ce4:	08007d5b 	.word	0x08007d5b
 8007ce8:	08007d5b 	.word	0x08007d5b
 8007cec:	08007d5b 	.word	0x08007d5b
 8007cf0:	08007d5b 	.word	0x08007d5b
 8007cf4:	08007d5b 	.word	0x08007d5b
 8007cf8:	08007d5b 	.word	0x08007d5b
 8007cfc:	2b6e      	cmp	r3, #110	@ 0x6e
 8007cfe:	d809      	bhi.n	8007d14 <_scanf_float+0x138>
 8007d00:	2b60      	cmp	r3, #96	@ 0x60
 8007d02:	d8b2      	bhi.n	8007c6a <_scanf_float+0x8e>
 8007d04:	2b54      	cmp	r3, #84	@ 0x54
 8007d06:	d07b      	beq.n	8007e00 <_scanf_float+0x224>
 8007d08:	2b59      	cmp	r3, #89	@ 0x59
 8007d0a:	d199      	bne.n	8007c40 <_scanf_float+0x64>
 8007d0c:	2d07      	cmp	r5, #7
 8007d0e:	d197      	bne.n	8007c40 <_scanf_float+0x64>
 8007d10:	2508      	movs	r5, #8
 8007d12:	e02c      	b.n	8007d6e <_scanf_float+0x192>
 8007d14:	2b74      	cmp	r3, #116	@ 0x74
 8007d16:	d073      	beq.n	8007e00 <_scanf_float+0x224>
 8007d18:	2b79      	cmp	r3, #121	@ 0x79
 8007d1a:	e7f6      	b.n	8007d0a <_scanf_float+0x12e>
 8007d1c:	6821      	ldr	r1, [r4, #0]
 8007d1e:	05c8      	lsls	r0, r1, #23
 8007d20:	d51b      	bpl.n	8007d5a <_scanf_float+0x17e>
 8007d22:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007d26:	f109 0901 	add.w	r9, r9, #1
 8007d2a:	6021      	str	r1, [r4, #0]
 8007d2c:	f1bb 0f00 	cmp.w	fp, #0
 8007d30:	d003      	beq.n	8007d3a <_scanf_float+0x15e>
 8007d32:	3201      	adds	r2, #1
 8007d34:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d38:	60a2      	str	r2, [r4, #8]
 8007d3a:	68a3      	ldr	r3, [r4, #8]
 8007d3c:	3b01      	subs	r3, #1
 8007d3e:	60a3      	str	r3, [r4, #8]
 8007d40:	6923      	ldr	r3, [r4, #16]
 8007d42:	3301      	adds	r3, #1
 8007d44:	6123      	str	r3, [r4, #16]
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	607b      	str	r3, [r7, #4]
 8007d4e:	f340 8087 	ble.w	8007e60 <_scanf_float+0x284>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	3301      	adds	r3, #1
 8007d56:	603b      	str	r3, [r7, #0]
 8007d58:	e765      	b.n	8007c26 <_scanf_float+0x4a>
 8007d5a:	eb1a 0105 	adds.w	r1, sl, r5
 8007d5e:	f47f af6f 	bne.w	8007c40 <_scanf_float+0x64>
 8007d62:	6822      	ldr	r2, [r4, #0]
 8007d64:	460d      	mov	r5, r1
 8007d66:	468a      	mov	sl, r1
 8007d68:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007d6c:	6022      	str	r2, [r4, #0]
 8007d6e:	f806 3b01 	strb.w	r3, [r6], #1
 8007d72:	e7e2      	b.n	8007d3a <_scanf_float+0x15e>
 8007d74:	6822      	ldr	r2, [r4, #0]
 8007d76:	0610      	lsls	r0, r2, #24
 8007d78:	f57f af62 	bpl.w	8007c40 <_scanf_float+0x64>
 8007d7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d80:	6022      	str	r2, [r4, #0]
 8007d82:	e7f4      	b.n	8007d6e <_scanf_float+0x192>
 8007d84:	f1ba 0f00 	cmp.w	sl, #0
 8007d88:	d10e      	bne.n	8007da8 <_scanf_float+0x1cc>
 8007d8a:	f1b9 0f00 	cmp.w	r9, #0
 8007d8e:	d10e      	bne.n	8007dae <_scanf_float+0x1d2>
 8007d90:	6822      	ldr	r2, [r4, #0]
 8007d92:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007d96:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007d9a:	d108      	bne.n	8007dae <_scanf_float+0x1d2>
 8007d9c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007da0:	f04f 0a01 	mov.w	sl, #1
 8007da4:	6022      	str	r2, [r4, #0]
 8007da6:	e7e2      	b.n	8007d6e <_scanf_float+0x192>
 8007da8:	f1ba 0f02 	cmp.w	sl, #2
 8007dac:	d055      	beq.n	8007e5a <_scanf_float+0x27e>
 8007dae:	2d01      	cmp	r5, #1
 8007db0:	d002      	beq.n	8007db8 <_scanf_float+0x1dc>
 8007db2:	2d04      	cmp	r5, #4
 8007db4:	f47f af44 	bne.w	8007c40 <_scanf_float+0x64>
 8007db8:	3501      	adds	r5, #1
 8007dba:	b2ed      	uxtb	r5, r5
 8007dbc:	e7d7      	b.n	8007d6e <_scanf_float+0x192>
 8007dbe:	f1ba 0f01 	cmp.w	sl, #1
 8007dc2:	f47f af3d 	bne.w	8007c40 <_scanf_float+0x64>
 8007dc6:	f04f 0a02 	mov.w	sl, #2
 8007dca:	e7d0      	b.n	8007d6e <_scanf_float+0x192>
 8007dcc:	b97d      	cbnz	r5, 8007dee <_scanf_float+0x212>
 8007dce:	f1b9 0f00 	cmp.w	r9, #0
 8007dd2:	f47f af38 	bne.w	8007c46 <_scanf_float+0x6a>
 8007dd6:	6822      	ldr	r2, [r4, #0]
 8007dd8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007ddc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007de0:	f040 8107 	bne.w	8007ff2 <_scanf_float+0x416>
 8007de4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007de8:	2501      	movs	r5, #1
 8007dea:	6022      	str	r2, [r4, #0]
 8007dec:	e7bf      	b.n	8007d6e <_scanf_float+0x192>
 8007dee:	2d03      	cmp	r5, #3
 8007df0:	d0e2      	beq.n	8007db8 <_scanf_float+0x1dc>
 8007df2:	2d05      	cmp	r5, #5
 8007df4:	e7de      	b.n	8007db4 <_scanf_float+0x1d8>
 8007df6:	2d02      	cmp	r5, #2
 8007df8:	f47f af22 	bne.w	8007c40 <_scanf_float+0x64>
 8007dfc:	2503      	movs	r5, #3
 8007dfe:	e7b6      	b.n	8007d6e <_scanf_float+0x192>
 8007e00:	2d06      	cmp	r5, #6
 8007e02:	f47f af1d 	bne.w	8007c40 <_scanf_float+0x64>
 8007e06:	2507      	movs	r5, #7
 8007e08:	e7b1      	b.n	8007d6e <_scanf_float+0x192>
 8007e0a:	6822      	ldr	r2, [r4, #0]
 8007e0c:	0591      	lsls	r1, r2, #22
 8007e0e:	f57f af17 	bpl.w	8007c40 <_scanf_float+0x64>
 8007e12:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007e16:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e1a:	6022      	str	r2, [r4, #0]
 8007e1c:	e7a7      	b.n	8007d6e <_scanf_float+0x192>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007e24:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007e28:	d006      	beq.n	8007e38 <_scanf_float+0x25c>
 8007e2a:	0550      	lsls	r0, r2, #21
 8007e2c:	f57f af08 	bpl.w	8007c40 <_scanf_float+0x64>
 8007e30:	f1b9 0f00 	cmp.w	r9, #0
 8007e34:	f000 80dd 	beq.w	8007ff2 <_scanf_float+0x416>
 8007e38:	0591      	lsls	r1, r2, #22
 8007e3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e3e:	bf58      	it	pl
 8007e40:	9902      	ldrpl	r1, [sp, #8]
 8007e42:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007e46:	bf58      	it	pl
 8007e48:	eba9 0101 	subpl.w	r1, r9, r1
 8007e4c:	6022      	str	r2, [r4, #0]
 8007e4e:	f04f 0900 	mov.w	r9, #0
 8007e52:	bf58      	it	pl
 8007e54:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e58:	e789      	b.n	8007d6e <_scanf_float+0x192>
 8007e5a:	f04f 0a03 	mov.w	sl, #3
 8007e5e:	e786      	b.n	8007d6e <_scanf_float+0x192>
 8007e60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007e64:	4639      	mov	r1, r7
 8007e66:	4640      	mov	r0, r8
 8007e68:	4798      	blx	r3
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f43f aedb 	beq.w	8007c26 <_scanf_float+0x4a>
 8007e70:	e6e6      	b.n	8007c40 <_scanf_float+0x64>
 8007e72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e76:	463a      	mov	r2, r7
 8007e78:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e7c:	4640      	mov	r0, r8
 8007e7e:	4798      	blx	r3
 8007e80:	6923      	ldr	r3, [r4, #16]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	6123      	str	r3, [r4, #16]
 8007e86:	e6e8      	b.n	8007c5a <_scanf_float+0x7e>
 8007e88:	1e6b      	subs	r3, r5, #1
 8007e8a:	2b06      	cmp	r3, #6
 8007e8c:	d824      	bhi.n	8007ed8 <_scanf_float+0x2fc>
 8007e8e:	2d02      	cmp	r5, #2
 8007e90:	d836      	bhi.n	8007f00 <_scanf_float+0x324>
 8007e92:	9b01      	ldr	r3, [sp, #4]
 8007e94:	429e      	cmp	r6, r3
 8007e96:	f67f aee4 	bls.w	8007c62 <_scanf_float+0x86>
 8007e9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e9e:	463a      	mov	r2, r7
 8007ea0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	4798      	blx	r3
 8007ea8:	6923      	ldr	r3, [r4, #16]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	6123      	str	r3, [r4, #16]
 8007eae:	e7f0      	b.n	8007e92 <_scanf_float+0x2b6>
 8007eb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007eb4:	463a      	mov	r2, r7
 8007eb6:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007eba:	4640      	mov	r0, r8
 8007ebc:	4798      	blx	r3
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	6123      	str	r3, [r4, #16]
 8007ec4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ec8:	fa5f fa8a 	uxtb.w	sl, sl
 8007ecc:	f1ba 0f02 	cmp.w	sl, #2
 8007ed0:	d1ee      	bne.n	8007eb0 <_scanf_float+0x2d4>
 8007ed2:	3d03      	subs	r5, #3
 8007ed4:	b2ed      	uxtb	r5, r5
 8007ed6:	1b76      	subs	r6, r6, r5
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	05da      	lsls	r2, r3, #23
 8007edc:	d52f      	bpl.n	8007f3e <_scanf_float+0x362>
 8007ede:	055b      	lsls	r3, r3, #21
 8007ee0:	d511      	bpl.n	8007f06 <_scanf_float+0x32a>
 8007ee2:	9b01      	ldr	r3, [sp, #4]
 8007ee4:	429e      	cmp	r6, r3
 8007ee6:	f67f aebc 	bls.w	8007c62 <_scanf_float+0x86>
 8007eea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007eee:	463a      	mov	r2, r7
 8007ef0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ef4:	4640      	mov	r0, r8
 8007ef6:	4798      	blx	r3
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	6123      	str	r3, [r4, #16]
 8007efe:	e7f0      	b.n	8007ee2 <_scanf_float+0x306>
 8007f00:	46aa      	mov	sl, r5
 8007f02:	46b3      	mov	fp, r6
 8007f04:	e7de      	b.n	8007ec4 <_scanf_float+0x2e8>
 8007f06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f0a:	1e75      	subs	r5, r6, #1
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	2965      	cmp	r1, #101	@ 0x65
 8007f10:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f14:	6123      	str	r3, [r4, #16]
 8007f16:	d00c      	beq.n	8007f32 <_scanf_float+0x356>
 8007f18:	2945      	cmp	r1, #69	@ 0x45
 8007f1a:	d00a      	beq.n	8007f32 <_scanf_float+0x356>
 8007f1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f20:	463a      	mov	r2, r7
 8007f22:	4640      	mov	r0, r8
 8007f24:	1eb5      	subs	r5, r6, #2
 8007f26:	4798      	blx	r3
 8007f28:	6923      	ldr	r3, [r4, #16]
 8007f2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	6123      	str	r3, [r4, #16]
 8007f32:	462e      	mov	r6, r5
 8007f34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f38:	463a      	mov	r2, r7
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	4798      	blx	r3
 8007f3e:	6822      	ldr	r2, [r4, #0]
 8007f40:	f012 0210 	ands.w	r2, r2, #16
 8007f44:	d001      	beq.n	8007f4a <_scanf_float+0x36e>
 8007f46:	2000      	movs	r0, #0
 8007f48:	e68c      	b.n	8007c64 <_scanf_float+0x88>
 8007f4a:	7032      	strb	r2, [r6, #0]
 8007f4c:	6823      	ldr	r3, [r4, #0]
 8007f4e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f56:	d11c      	bne.n	8007f92 <_scanf_float+0x3b6>
 8007f58:	9b02      	ldr	r3, [sp, #8]
 8007f5a:	454b      	cmp	r3, r9
 8007f5c:	eba3 0209 	sub.w	r2, r3, r9
 8007f60:	d123      	bne.n	8007faa <_scanf_float+0x3ce>
 8007f62:	2200      	movs	r2, #0
 8007f64:	9901      	ldr	r1, [sp, #4]
 8007f66:	4640      	mov	r0, r8
 8007f68:	f002 fd1a 	bl	800a9a0 <_strtod_r>
 8007f6c:	6821      	ldr	r1, [r4, #0]
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	f011 0f02 	tst.w	r1, #2
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	ec57 6b10 	vmov	r6, r7, d0
 8007f7a:	f103 0204 	add.w	r2, r3, #4
 8007f7e:	d01f      	beq.n	8007fc0 <_scanf_float+0x3e4>
 8007f80:	9903      	ldr	r1, [sp, #12]
 8007f82:	600a      	str	r2, [r1, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	e9c3 6700 	strd	r6, r7, [r3]
 8007f8a:	68e3      	ldr	r3, [r4, #12]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	60e3      	str	r3, [r4, #12]
 8007f90:	e7d9      	b.n	8007f46 <_scanf_float+0x36a>
 8007f92:	9b04      	ldr	r3, [sp, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0e4      	beq.n	8007f62 <_scanf_float+0x386>
 8007f98:	9905      	ldr	r1, [sp, #20]
 8007f9a:	230a      	movs	r3, #10
 8007f9c:	4640      	mov	r0, r8
 8007f9e:	3101      	adds	r1, #1
 8007fa0:	f002 fd7e 	bl	800aaa0 <_strtol_r>
 8007fa4:	9b04      	ldr	r3, [sp, #16]
 8007fa6:	9e05      	ldr	r6, [sp, #20]
 8007fa8:	1ac2      	subs	r2, r0, r3
 8007faa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007fae:	4912      	ldr	r1, [pc, #72]	@ (8007ff8 <_scanf_float+0x41c>)
 8007fb0:	429e      	cmp	r6, r3
 8007fb2:	bf28      	it	cs
 8007fb4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007fb8:	4630      	mov	r0, r6
 8007fba:	f000 f953 	bl	8008264 <siprintf>
 8007fbe:	e7d0      	b.n	8007f62 <_scanf_float+0x386>
 8007fc0:	f011 0f04 	tst.w	r1, #4
 8007fc4:	9903      	ldr	r1, [sp, #12]
 8007fc6:	600a      	str	r2, [r1, #0]
 8007fc8:	d1dc      	bne.n	8007f84 <_scanf_float+0x3a8>
 8007fca:	681d      	ldr	r5, [r3, #0]
 8007fcc:	4632      	mov	r2, r6
 8007fce:	463b      	mov	r3, r7
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	f7f8 fdbe 	bl	8000b54 <__aeabi_dcmpun>
 8007fd8:	b128      	cbz	r0, 8007fe6 <_scanf_float+0x40a>
 8007fda:	4808      	ldr	r0, [pc, #32]	@ (8007ffc <_scanf_float+0x420>)
 8007fdc:	f000 fac8 	bl	8008570 <nanf>
 8007fe0:	ed85 0a00 	vstr	s0, [r5]
 8007fe4:	e7d1      	b.n	8007f8a <_scanf_float+0x3ae>
 8007fe6:	4630      	mov	r0, r6
 8007fe8:	4639      	mov	r1, r7
 8007fea:	f7f8 fe11 	bl	8000c10 <__aeabi_d2f>
 8007fee:	6028      	str	r0, [r5, #0]
 8007ff0:	e7cb      	b.n	8007f8a <_scanf_float+0x3ae>
 8007ff2:	f04f 0900 	mov.w	r9, #0
 8007ff6:	e62a      	b.n	8007c4e <_scanf_float+0x72>
 8007ff8:	0800c468 	.word	0x0800c468
 8007ffc:	0800c7fd 	.word	0x0800c7fd

08008000 <std>:
 8008000:	2300      	movs	r3, #0
 8008002:	b510      	push	{r4, lr}
 8008004:	4604      	mov	r4, r0
 8008006:	6083      	str	r3, [r0, #8]
 8008008:	8181      	strh	r1, [r0, #12]
 800800a:	4619      	mov	r1, r3
 800800c:	6643      	str	r3, [r0, #100]	@ 0x64
 800800e:	81c2      	strh	r2, [r0, #14]
 8008010:	2208      	movs	r2, #8
 8008012:	6183      	str	r3, [r0, #24]
 8008014:	e9c0 3300 	strd	r3, r3, [r0]
 8008018:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800801c:	305c      	adds	r0, #92	@ 0x5c
 800801e:	f000 fa19 	bl	8008454 <memset>
 8008022:	4b0d      	ldr	r3, [pc, #52]	@ (8008058 <std+0x58>)
 8008024:	6224      	str	r4, [r4, #32]
 8008026:	6263      	str	r3, [r4, #36]	@ 0x24
 8008028:	4b0c      	ldr	r3, [pc, #48]	@ (800805c <std+0x5c>)
 800802a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800802c:	4b0c      	ldr	r3, [pc, #48]	@ (8008060 <std+0x60>)
 800802e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008030:	4b0c      	ldr	r3, [pc, #48]	@ (8008064 <std+0x64>)
 8008032:	6323      	str	r3, [r4, #48]	@ 0x30
 8008034:	4b0c      	ldr	r3, [pc, #48]	@ (8008068 <std+0x68>)
 8008036:	429c      	cmp	r4, r3
 8008038:	d006      	beq.n	8008048 <std+0x48>
 800803a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800803e:	4294      	cmp	r4, r2
 8008040:	d002      	beq.n	8008048 <std+0x48>
 8008042:	33d0      	adds	r3, #208	@ 0xd0
 8008044:	429c      	cmp	r4, r3
 8008046:	d105      	bne.n	8008054 <std+0x54>
 8008048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800804c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008050:	f000 ba7c 	b.w	800854c <__retarget_lock_init_recursive>
 8008054:	bd10      	pop	{r4, pc}
 8008056:	bf00      	nop
 8008058:	080082a5 	.word	0x080082a5
 800805c:	080082c7 	.word	0x080082c7
 8008060:	080082ff 	.word	0x080082ff
 8008064:	08008323 	.word	0x08008323
 8008068:	200004cc 	.word	0x200004cc

0800806c <stdio_exit_handler>:
 800806c:	4a02      	ldr	r2, [pc, #8]	@ (8008078 <stdio_exit_handler+0xc>)
 800806e:	4903      	ldr	r1, [pc, #12]	@ (800807c <stdio_exit_handler+0x10>)
 8008070:	4803      	ldr	r0, [pc, #12]	@ (8008080 <stdio_exit_handler+0x14>)
 8008072:	f000 b869 	b.w	8008148 <_fwalk_sglue>
 8008076:	bf00      	nop
 8008078:	20000010 	.word	0x20000010
 800807c:	0800b0e1 	.word	0x0800b0e1
 8008080:	20000020 	.word	0x20000020

08008084 <cleanup_stdio>:
 8008084:	6841      	ldr	r1, [r0, #4]
 8008086:	4b0c      	ldr	r3, [pc, #48]	@ (80080b8 <cleanup_stdio+0x34>)
 8008088:	4299      	cmp	r1, r3
 800808a:	b510      	push	{r4, lr}
 800808c:	4604      	mov	r4, r0
 800808e:	d001      	beq.n	8008094 <cleanup_stdio+0x10>
 8008090:	f003 f826 	bl	800b0e0 <_fflush_r>
 8008094:	68a1      	ldr	r1, [r4, #8]
 8008096:	4b09      	ldr	r3, [pc, #36]	@ (80080bc <cleanup_stdio+0x38>)
 8008098:	4299      	cmp	r1, r3
 800809a:	d002      	beq.n	80080a2 <cleanup_stdio+0x1e>
 800809c:	4620      	mov	r0, r4
 800809e:	f003 f81f 	bl	800b0e0 <_fflush_r>
 80080a2:	68e1      	ldr	r1, [r4, #12]
 80080a4:	4b06      	ldr	r3, [pc, #24]	@ (80080c0 <cleanup_stdio+0x3c>)
 80080a6:	4299      	cmp	r1, r3
 80080a8:	d004      	beq.n	80080b4 <cleanup_stdio+0x30>
 80080aa:	4620      	mov	r0, r4
 80080ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080b0:	f003 b816 	b.w	800b0e0 <_fflush_r>
 80080b4:	bd10      	pop	{r4, pc}
 80080b6:	bf00      	nop
 80080b8:	200004cc 	.word	0x200004cc
 80080bc:	20000534 	.word	0x20000534
 80080c0:	2000059c 	.word	0x2000059c

080080c4 <global_stdio_init.part.0>:
 80080c4:	b510      	push	{r4, lr}
 80080c6:	4b0b      	ldr	r3, [pc, #44]	@ (80080f4 <global_stdio_init.part.0+0x30>)
 80080c8:	2104      	movs	r1, #4
 80080ca:	4c0b      	ldr	r4, [pc, #44]	@ (80080f8 <global_stdio_init.part.0+0x34>)
 80080cc:	4a0b      	ldr	r2, [pc, #44]	@ (80080fc <global_stdio_init.part.0+0x38>)
 80080ce:	4620      	mov	r0, r4
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f7ff ff94 	bl	8008000 <std>
 80080d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080dc:	2201      	movs	r2, #1
 80080de:	2109      	movs	r1, #9
 80080e0:	f7ff ff8e 	bl	8008000 <std>
 80080e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080e8:	2202      	movs	r2, #2
 80080ea:	2112      	movs	r1, #18
 80080ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f0:	f7ff bf86 	b.w	8008000 <std>
 80080f4:	20000604 	.word	0x20000604
 80080f8:	200004cc 	.word	0x200004cc
 80080fc:	0800806d 	.word	0x0800806d

08008100 <__sfp_lock_acquire>:
 8008100:	4801      	ldr	r0, [pc, #4]	@ (8008108 <__sfp_lock_acquire+0x8>)
 8008102:	f000 ba24 	b.w	800854e <__retarget_lock_acquire_recursive>
 8008106:	bf00      	nop
 8008108:	2000060d 	.word	0x2000060d

0800810c <__sfp_lock_release>:
 800810c:	4801      	ldr	r0, [pc, #4]	@ (8008114 <__sfp_lock_release+0x8>)
 800810e:	f000 ba1f 	b.w	8008550 <__retarget_lock_release_recursive>
 8008112:	bf00      	nop
 8008114:	2000060d 	.word	0x2000060d

08008118 <__sinit>:
 8008118:	b510      	push	{r4, lr}
 800811a:	4604      	mov	r4, r0
 800811c:	f7ff fff0 	bl	8008100 <__sfp_lock_acquire>
 8008120:	6a23      	ldr	r3, [r4, #32]
 8008122:	b11b      	cbz	r3, 800812c <__sinit+0x14>
 8008124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008128:	f7ff bff0 	b.w	800810c <__sfp_lock_release>
 800812c:	4b04      	ldr	r3, [pc, #16]	@ (8008140 <__sinit+0x28>)
 800812e:	6223      	str	r3, [r4, #32]
 8008130:	4b04      	ldr	r3, [pc, #16]	@ (8008144 <__sinit+0x2c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1f5      	bne.n	8008124 <__sinit+0xc>
 8008138:	f7ff ffc4 	bl	80080c4 <global_stdio_init.part.0>
 800813c:	e7f2      	b.n	8008124 <__sinit+0xc>
 800813e:	bf00      	nop
 8008140:	08008085 	.word	0x08008085
 8008144:	20000604 	.word	0x20000604

08008148 <_fwalk_sglue>:
 8008148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800814c:	4607      	mov	r7, r0
 800814e:	4688      	mov	r8, r1
 8008150:	4614      	mov	r4, r2
 8008152:	2600      	movs	r6, #0
 8008154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008158:	f1b9 0901 	subs.w	r9, r9, #1
 800815c:	d505      	bpl.n	800816a <_fwalk_sglue+0x22>
 800815e:	6824      	ldr	r4, [r4, #0]
 8008160:	2c00      	cmp	r4, #0
 8008162:	d1f7      	bne.n	8008154 <_fwalk_sglue+0xc>
 8008164:	4630      	mov	r0, r6
 8008166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816a:	89ab      	ldrh	r3, [r5, #12]
 800816c:	2b01      	cmp	r3, #1
 800816e:	d907      	bls.n	8008180 <_fwalk_sglue+0x38>
 8008170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008174:	3301      	adds	r3, #1
 8008176:	d003      	beq.n	8008180 <_fwalk_sglue+0x38>
 8008178:	4629      	mov	r1, r5
 800817a:	4638      	mov	r0, r7
 800817c:	47c0      	blx	r8
 800817e:	4306      	orrs	r6, r0
 8008180:	3568      	adds	r5, #104	@ 0x68
 8008182:	e7e9      	b.n	8008158 <_fwalk_sglue+0x10>

08008184 <iprintf>:
 8008184:	b40f      	push	{r0, r1, r2, r3}
 8008186:	b507      	push	{r0, r1, r2, lr}
 8008188:	4906      	ldr	r1, [pc, #24]	@ (80081a4 <iprintf+0x20>)
 800818a:	ab04      	add	r3, sp, #16
 800818c:	6808      	ldr	r0, [r1, #0]
 800818e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008192:	6881      	ldr	r1, [r0, #8]
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	f002 fe07 	bl	800ada8 <_vfiprintf_r>
 800819a:	b003      	add	sp, #12
 800819c:	f85d eb04 	ldr.w	lr, [sp], #4
 80081a0:	b004      	add	sp, #16
 80081a2:	4770      	bx	lr
 80081a4:	2000001c 	.word	0x2000001c

080081a8 <_puts_r>:
 80081a8:	6a03      	ldr	r3, [r0, #32]
 80081aa:	b570      	push	{r4, r5, r6, lr}
 80081ac:	4605      	mov	r5, r0
 80081ae:	460e      	mov	r6, r1
 80081b0:	6884      	ldr	r4, [r0, #8]
 80081b2:	b90b      	cbnz	r3, 80081b8 <_puts_r+0x10>
 80081b4:	f7ff ffb0 	bl	8008118 <__sinit>
 80081b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081ba:	07db      	lsls	r3, r3, #31
 80081bc:	d405      	bmi.n	80081ca <_puts_r+0x22>
 80081be:	89a3      	ldrh	r3, [r4, #12]
 80081c0:	0598      	lsls	r0, r3, #22
 80081c2:	d402      	bmi.n	80081ca <_puts_r+0x22>
 80081c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081c6:	f000 f9c2 	bl	800854e <__retarget_lock_acquire_recursive>
 80081ca:	89a3      	ldrh	r3, [r4, #12]
 80081cc:	0719      	lsls	r1, r3, #28
 80081ce:	d502      	bpl.n	80081d6 <_puts_r+0x2e>
 80081d0:	6923      	ldr	r3, [r4, #16]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d135      	bne.n	8008242 <_puts_r+0x9a>
 80081d6:	4621      	mov	r1, r4
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 f8e5 	bl	80083a8 <__swsetup_r>
 80081de:	b380      	cbz	r0, 8008242 <_puts_r+0x9a>
 80081e0:	f04f 35ff 	mov.w	r5, #4294967295
 80081e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081e6:	07da      	lsls	r2, r3, #31
 80081e8:	d405      	bmi.n	80081f6 <_puts_r+0x4e>
 80081ea:	89a3      	ldrh	r3, [r4, #12]
 80081ec:	059b      	lsls	r3, r3, #22
 80081ee:	d402      	bmi.n	80081f6 <_puts_r+0x4e>
 80081f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081f2:	f000 f9ad 	bl	8008550 <__retarget_lock_release_recursive>
 80081f6:	4628      	mov	r0, r5
 80081f8:	bd70      	pop	{r4, r5, r6, pc}
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	da04      	bge.n	8008208 <_puts_r+0x60>
 80081fe:	69a2      	ldr	r2, [r4, #24]
 8008200:	429a      	cmp	r2, r3
 8008202:	dc17      	bgt.n	8008234 <_puts_r+0x8c>
 8008204:	290a      	cmp	r1, #10
 8008206:	d015      	beq.n	8008234 <_puts_r+0x8c>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	6022      	str	r2, [r4, #0]
 800820e:	7019      	strb	r1, [r3, #0]
 8008210:	68a3      	ldr	r3, [r4, #8]
 8008212:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008216:	3b01      	subs	r3, #1
 8008218:	60a3      	str	r3, [r4, #8]
 800821a:	2900      	cmp	r1, #0
 800821c:	d1ed      	bne.n	80081fa <_puts_r+0x52>
 800821e:	2b00      	cmp	r3, #0
 8008220:	da11      	bge.n	8008246 <_puts_r+0x9e>
 8008222:	4622      	mov	r2, r4
 8008224:	210a      	movs	r1, #10
 8008226:	4628      	mov	r0, r5
 8008228:	f000 f87f 	bl	800832a <__swbuf_r>
 800822c:	3001      	adds	r0, #1
 800822e:	d0d7      	beq.n	80081e0 <_puts_r+0x38>
 8008230:	250a      	movs	r5, #10
 8008232:	e7d7      	b.n	80081e4 <_puts_r+0x3c>
 8008234:	4622      	mov	r2, r4
 8008236:	4628      	mov	r0, r5
 8008238:	f000 f877 	bl	800832a <__swbuf_r>
 800823c:	3001      	adds	r0, #1
 800823e:	d1e7      	bne.n	8008210 <_puts_r+0x68>
 8008240:	e7ce      	b.n	80081e0 <_puts_r+0x38>
 8008242:	3e01      	subs	r6, #1
 8008244:	e7e4      	b.n	8008210 <_puts_r+0x68>
 8008246:	6823      	ldr	r3, [r4, #0]
 8008248:	1c5a      	adds	r2, r3, #1
 800824a:	6022      	str	r2, [r4, #0]
 800824c:	220a      	movs	r2, #10
 800824e:	701a      	strb	r2, [r3, #0]
 8008250:	e7ee      	b.n	8008230 <_puts_r+0x88>
	...

08008254 <puts>:
 8008254:	4b02      	ldr	r3, [pc, #8]	@ (8008260 <puts+0xc>)
 8008256:	4601      	mov	r1, r0
 8008258:	6818      	ldr	r0, [r3, #0]
 800825a:	f7ff bfa5 	b.w	80081a8 <_puts_r>
 800825e:	bf00      	nop
 8008260:	2000001c 	.word	0x2000001c

08008264 <siprintf>:
 8008264:	b40e      	push	{r1, r2, r3}
 8008266:	b500      	push	{lr}
 8008268:	b09c      	sub	sp, #112	@ 0x70
 800826a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800826e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008270:	9002      	str	r0, [sp, #8]
 8008272:	9006      	str	r0, [sp, #24]
 8008274:	9107      	str	r1, [sp, #28]
 8008276:	9104      	str	r1, [sp, #16]
 8008278:	4808      	ldr	r0, [pc, #32]	@ (800829c <siprintf+0x38>)
 800827a:	4909      	ldr	r1, [pc, #36]	@ (80082a0 <siprintf+0x3c>)
 800827c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008280:	9105      	str	r1, [sp, #20]
 8008282:	a902      	add	r1, sp, #8
 8008284:	6800      	ldr	r0, [r0, #0]
 8008286:	9301      	str	r3, [sp, #4]
 8008288:	f002 fc68 	bl	800ab5c <_svfiprintf_r>
 800828c:	9b02      	ldr	r3, [sp, #8]
 800828e:	2200      	movs	r2, #0
 8008290:	701a      	strb	r2, [r3, #0]
 8008292:	b01c      	add	sp, #112	@ 0x70
 8008294:	f85d eb04 	ldr.w	lr, [sp], #4
 8008298:	b003      	add	sp, #12
 800829a:	4770      	bx	lr
 800829c:	2000001c 	.word	0x2000001c
 80082a0:	ffff0208 	.word	0xffff0208

080082a4 <__sread>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	460c      	mov	r4, r1
 80082a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ac:	f000 f900 	bl	80084b0 <_read_r>
 80082b0:	2800      	cmp	r0, #0
 80082b2:	bfab      	itete	ge
 80082b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082b6:	89a3      	ldrhlt	r3, [r4, #12]
 80082b8:	181b      	addge	r3, r3, r0
 80082ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082be:	bfac      	ite	ge
 80082c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082c2:	81a3      	strhlt	r3, [r4, #12]
 80082c4:	bd10      	pop	{r4, pc}

080082c6 <__swrite>:
 80082c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ca:	461f      	mov	r7, r3
 80082cc:	898b      	ldrh	r3, [r1, #12]
 80082ce:	4605      	mov	r5, r0
 80082d0:	460c      	mov	r4, r1
 80082d2:	05db      	lsls	r3, r3, #23
 80082d4:	4616      	mov	r6, r2
 80082d6:	d505      	bpl.n	80082e4 <__swrite+0x1e>
 80082d8:	2302      	movs	r3, #2
 80082da:	2200      	movs	r2, #0
 80082dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e0:	f000 f8d4 	bl	800848c <_lseek_r>
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	4632      	mov	r2, r6
 80082e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ec:	4628      	mov	r0, r5
 80082ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	463b      	mov	r3, r7
 80082f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fa:	f000 b8eb 	b.w	80084d4 <_write_r>

080082fe <__sseek>:
 80082fe:	b510      	push	{r4, lr}
 8008300:	460c      	mov	r4, r1
 8008302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008306:	f000 f8c1 	bl	800848c <_lseek_r>
 800830a:	1c43      	adds	r3, r0, #1
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	bf15      	itete	ne
 8008310:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008312:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008316:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800831a:	81a3      	strheq	r3, [r4, #12]
 800831c:	bf18      	it	ne
 800831e:	81a3      	strhne	r3, [r4, #12]
 8008320:	bd10      	pop	{r4, pc}

08008322 <__sclose>:
 8008322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008326:	f000 b8a1 	b.w	800846c <_close_r>

0800832a <__swbuf_r>:
 800832a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832c:	460e      	mov	r6, r1
 800832e:	4614      	mov	r4, r2
 8008330:	4605      	mov	r5, r0
 8008332:	b118      	cbz	r0, 800833c <__swbuf_r+0x12>
 8008334:	6a03      	ldr	r3, [r0, #32]
 8008336:	b90b      	cbnz	r3, 800833c <__swbuf_r+0x12>
 8008338:	f7ff feee 	bl	8008118 <__sinit>
 800833c:	69a3      	ldr	r3, [r4, #24]
 800833e:	60a3      	str	r3, [r4, #8]
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	071a      	lsls	r2, r3, #28
 8008344:	d501      	bpl.n	800834a <__swbuf_r+0x20>
 8008346:	6923      	ldr	r3, [r4, #16]
 8008348:	b943      	cbnz	r3, 800835c <__swbuf_r+0x32>
 800834a:	4621      	mov	r1, r4
 800834c:	4628      	mov	r0, r5
 800834e:	f000 f82b 	bl	80083a8 <__swsetup_r>
 8008352:	b118      	cbz	r0, 800835c <__swbuf_r+0x32>
 8008354:	f04f 37ff 	mov.w	r7, #4294967295
 8008358:	4638      	mov	r0, r7
 800835a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800835c:	6823      	ldr	r3, [r4, #0]
 800835e:	b2f6      	uxtb	r6, r6
 8008360:	6922      	ldr	r2, [r4, #16]
 8008362:	4637      	mov	r7, r6
 8008364:	1a98      	subs	r0, r3, r2
 8008366:	6963      	ldr	r3, [r4, #20]
 8008368:	4283      	cmp	r3, r0
 800836a:	dc05      	bgt.n	8008378 <__swbuf_r+0x4e>
 800836c:	4621      	mov	r1, r4
 800836e:	4628      	mov	r0, r5
 8008370:	f002 feb6 	bl	800b0e0 <_fflush_r>
 8008374:	2800      	cmp	r0, #0
 8008376:	d1ed      	bne.n	8008354 <__swbuf_r+0x2a>
 8008378:	68a3      	ldr	r3, [r4, #8]
 800837a:	3b01      	subs	r3, #1
 800837c:	60a3      	str	r3, [r4, #8]
 800837e:	6823      	ldr	r3, [r4, #0]
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	6022      	str	r2, [r4, #0]
 8008384:	701e      	strb	r6, [r3, #0]
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	6962      	ldr	r2, [r4, #20]
 800838a:	429a      	cmp	r2, r3
 800838c:	d004      	beq.n	8008398 <__swbuf_r+0x6e>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	07db      	lsls	r3, r3, #31
 8008392:	d5e1      	bpl.n	8008358 <__swbuf_r+0x2e>
 8008394:	2e0a      	cmp	r6, #10
 8008396:	d1df      	bne.n	8008358 <__swbuf_r+0x2e>
 8008398:	4621      	mov	r1, r4
 800839a:	4628      	mov	r0, r5
 800839c:	f002 fea0 	bl	800b0e0 <_fflush_r>
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d0d9      	beq.n	8008358 <__swbuf_r+0x2e>
 80083a4:	e7d6      	b.n	8008354 <__swbuf_r+0x2a>
	...

080083a8 <__swsetup_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4b29      	ldr	r3, [pc, #164]	@ (8008450 <__swsetup_r+0xa8>)
 80083ac:	4605      	mov	r5, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	b118      	cbz	r0, 80083bc <__swsetup_r+0x14>
 80083b4:	6a03      	ldr	r3, [r0, #32]
 80083b6:	b90b      	cbnz	r3, 80083bc <__swsetup_r+0x14>
 80083b8:	f7ff feae 	bl	8008118 <__sinit>
 80083bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083c0:	0719      	lsls	r1, r3, #28
 80083c2:	d422      	bmi.n	800840a <__swsetup_r+0x62>
 80083c4:	06da      	lsls	r2, r3, #27
 80083c6:	d407      	bmi.n	80083d8 <__swsetup_r+0x30>
 80083c8:	2209      	movs	r2, #9
 80083ca:	602a      	str	r2, [r5, #0]
 80083cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	81a3      	strh	r3, [r4, #12]
 80083d6:	e033      	b.n	8008440 <__swsetup_r+0x98>
 80083d8:	0758      	lsls	r0, r3, #29
 80083da:	d512      	bpl.n	8008402 <__swsetup_r+0x5a>
 80083dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083de:	b141      	cbz	r1, 80083f2 <__swsetup_r+0x4a>
 80083e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083e4:	4299      	cmp	r1, r3
 80083e6:	d002      	beq.n	80083ee <__swsetup_r+0x46>
 80083e8:	4628      	mov	r0, r5
 80083ea:	f000 ff19 	bl	8009220 <_free_r>
 80083ee:	2300      	movs	r3, #0
 80083f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083f8:	81a3      	strh	r3, [r4, #12]
 80083fa:	2300      	movs	r3, #0
 80083fc:	6063      	str	r3, [r4, #4]
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	89a3      	ldrh	r3, [r4, #12]
 8008404:	f043 0308 	orr.w	r3, r3, #8
 8008408:	81a3      	strh	r3, [r4, #12]
 800840a:	6923      	ldr	r3, [r4, #16]
 800840c:	b94b      	cbnz	r3, 8008422 <__swsetup_r+0x7a>
 800840e:	89a3      	ldrh	r3, [r4, #12]
 8008410:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008414:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008418:	d003      	beq.n	8008422 <__swsetup_r+0x7a>
 800841a:	4621      	mov	r1, r4
 800841c:	4628      	mov	r0, r5
 800841e:	f002 feac 	bl	800b17a <__smakebuf_r>
 8008422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008426:	f013 0201 	ands.w	r2, r3, #1
 800842a:	d00a      	beq.n	8008442 <__swsetup_r+0x9a>
 800842c:	2200      	movs	r2, #0
 800842e:	60a2      	str	r2, [r4, #8]
 8008430:	6962      	ldr	r2, [r4, #20]
 8008432:	4252      	negs	r2, r2
 8008434:	61a2      	str	r2, [r4, #24]
 8008436:	6922      	ldr	r2, [r4, #16]
 8008438:	b942      	cbnz	r2, 800844c <__swsetup_r+0xa4>
 800843a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800843e:	d1c5      	bne.n	80083cc <__swsetup_r+0x24>
 8008440:	bd38      	pop	{r3, r4, r5, pc}
 8008442:	0799      	lsls	r1, r3, #30
 8008444:	bf58      	it	pl
 8008446:	6962      	ldrpl	r2, [r4, #20]
 8008448:	60a2      	str	r2, [r4, #8]
 800844a:	e7f4      	b.n	8008436 <__swsetup_r+0x8e>
 800844c:	2000      	movs	r0, #0
 800844e:	e7f7      	b.n	8008440 <__swsetup_r+0x98>
 8008450:	2000001c 	.word	0x2000001c

08008454 <memset>:
 8008454:	4402      	add	r2, r0
 8008456:	4603      	mov	r3, r0
 8008458:	4293      	cmp	r3, r2
 800845a:	d100      	bne.n	800845e <memset+0xa>
 800845c:	4770      	bx	lr
 800845e:	f803 1b01 	strb.w	r1, [r3], #1
 8008462:	e7f9      	b.n	8008458 <memset+0x4>

08008464 <_localeconv_r>:
 8008464:	4800      	ldr	r0, [pc, #0]	@ (8008468 <_localeconv_r+0x4>)
 8008466:	4770      	bx	lr
 8008468:	2000015c 	.word	0x2000015c

0800846c <_close_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	2300      	movs	r3, #0
 8008470:	4d05      	ldr	r5, [pc, #20]	@ (8008488 <_close_r+0x1c>)
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	602b      	str	r3, [r5, #0]
 8008478:	f7f9 fd3d 	bl	8001ef6 <_close>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_close_r+0x1a>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_close_r+0x1a>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	20000608 	.word	0x20000608

0800848c <_lseek_r>:
 800848c:	b538      	push	{r3, r4, r5, lr}
 800848e:	4604      	mov	r4, r0
 8008490:	4d06      	ldr	r5, [pc, #24]	@ (80084ac <_lseek_r+0x20>)
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	2200      	movs	r2, #0
 8008498:	602a      	str	r2, [r5, #0]
 800849a:	461a      	mov	r2, r3
 800849c:	f7f9 fd52 	bl	8001f44 <_lseek>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_lseek_r+0x1e>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_lseek_r+0x1e>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	20000608 	.word	0x20000608

080084b0 <_read_r>:
 80084b0:	b538      	push	{r3, r4, r5, lr}
 80084b2:	4604      	mov	r4, r0
 80084b4:	4d06      	ldr	r5, [pc, #24]	@ (80084d0 <_read_r+0x20>)
 80084b6:	4608      	mov	r0, r1
 80084b8:	4611      	mov	r1, r2
 80084ba:	2200      	movs	r2, #0
 80084bc:	602a      	str	r2, [r5, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	f7f9 fce0 	bl	8001e84 <_read>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_read_r+0x1e>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_read_r+0x1e>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	20000608 	.word	0x20000608

080084d4 <_write_r>:
 80084d4:	b538      	push	{r3, r4, r5, lr}
 80084d6:	4604      	mov	r4, r0
 80084d8:	4d06      	ldr	r5, [pc, #24]	@ (80084f4 <_write_r+0x20>)
 80084da:	4608      	mov	r0, r1
 80084dc:	4611      	mov	r1, r2
 80084de:	2200      	movs	r2, #0
 80084e0:	602a      	str	r2, [r5, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	f7f9 fceb 	bl	8001ebe <_write>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d102      	bne.n	80084f2 <_write_r+0x1e>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	b103      	cbz	r3, 80084f2 <_write_r+0x1e>
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	20000608 	.word	0x20000608

080084f8 <__errno>:
 80084f8:	4b01      	ldr	r3, [pc, #4]	@ (8008500 <__errno+0x8>)
 80084fa:	6818      	ldr	r0, [r3, #0]
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	2000001c 	.word	0x2000001c

08008504 <__libc_init_array>:
 8008504:	b570      	push	{r4, r5, r6, lr}
 8008506:	4d0d      	ldr	r5, [pc, #52]	@ (800853c <__libc_init_array+0x38>)
 8008508:	2600      	movs	r6, #0
 800850a:	4c0d      	ldr	r4, [pc, #52]	@ (8008540 <__libc_init_array+0x3c>)
 800850c:	1b64      	subs	r4, r4, r5
 800850e:	10a4      	asrs	r4, r4, #2
 8008510:	42a6      	cmp	r6, r4
 8008512:	d109      	bne.n	8008528 <__libc_init_array+0x24>
 8008514:	4d0b      	ldr	r5, [pc, #44]	@ (8008544 <__libc_init_array+0x40>)
 8008516:	2600      	movs	r6, #0
 8008518:	4c0b      	ldr	r4, [pc, #44]	@ (8008548 <__libc_init_array+0x44>)
 800851a:	f003 fe71 	bl	800c200 <_init>
 800851e:	1b64      	subs	r4, r4, r5
 8008520:	10a4      	asrs	r4, r4, #2
 8008522:	42a6      	cmp	r6, r4
 8008524:	d105      	bne.n	8008532 <__libc_init_array+0x2e>
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	f855 3b04 	ldr.w	r3, [r5], #4
 800852c:	3601      	adds	r6, #1
 800852e:	4798      	blx	r3
 8008530:	e7ee      	b.n	8008510 <__libc_init_array+0xc>
 8008532:	f855 3b04 	ldr.w	r3, [r5], #4
 8008536:	3601      	adds	r6, #1
 8008538:	4798      	blx	r3
 800853a:	e7f2      	b.n	8008522 <__libc_init_array+0x1e>
 800853c:	0800c8d8 	.word	0x0800c8d8
 8008540:	0800c8d8 	.word	0x0800c8d8
 8008544:	0800c8d8 	.word	0x0800c8d8
 8008548:	0800c8dc 	.word	0x0800c8dc

0800854c <__retarget_lock_init_recursive>:
 800854c:	4770      	bx	lr

0800854e <__retarget_lock_acquire_recursive>:
 800854e:	4770      	bx	lr

08008550 <__retarget_lock_release_recursive>:
 8008550:	4770      	bx	lr

08008552 <memchr>:
 8008552:	b2c9      	uxtb	r1, r1
 8008554:	4603      	mov	r3, r0
 8008556:	4402      	add	r2, r0
 8008558:	b510      	push	{r4, lr}
 800855a:	4293      	cmp	r3, r2
 800855c:	4618      	mov	r0, r3
 800855e:	d101      	bne.n	8008564 <memchr+0x12>
 8008560:	2000      	movs	r0, #0
 8008562:	e003      	b.n	800856c <memchr+0x1a>
 8008564:	7804      	ldrb	r4, [r0, #0]
 8008566:	3301      	adds	r3, #1
 8008568:	428c      	cmp	r4, r1
 800856a:	d1f6      	bne.n	800855a <memchr+0x8>
 800856c:	bd10      	pop	{r4, pc}
	...

08008570 <nanf>:
 8008570:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008578 <nanf+0x8>
 8008574:	4770      	bx	lr
 8008576:	bf00      	nop
 8008578:	7fc00000 	.word	0x7fc00000

0800857c <quorem>:
 800857c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	6903      	ldr	r3, [r0, #16]
 8008582:	4607      	mov	r7, r0
 8008584:	690c      	ldr	r4, [r1, #16]
 8008586:	42a3      	cmp	r3, r4
 8008588:	f2c0 8083 	blt.w	8008692 <quorem+0x116>
 800858c:	3c01      	subs	r4, #1
 800858e:	f100 0514 	add.w	r5, r0, #20
 8008592:	f101 0814 	add.w	r8, r1, #20
 8008596:	00a3      	lsls	r3, r4, #2
 8008598:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800859c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085a6:	9301      	str	r3, [sp, #4]
 80085a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80085ac:	3301      	adds	r3, #1
 80085ae:	429a      	cmp	r2, r3
 80085b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80085b4:	d331      	bcc.n	800861a <quorem+0x9e>
 80085b6:	f04f 0a00 	mov.w	sl, #0
 80085ba:	46c4      	mov	ip, r8
 80085bc:	46ae      	mov	lr, r5
 80085be:	46d3      	mov	fp, sl
 80085c0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085c4:	b298      	uxth	r0, r3
 80085c6:	45e1      	cmp	r9, ip
 80085c8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80085cc:	fb06 a000 	mla	r0, r6, r0, sl
 80085d0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 80085d4:	b280      	uxth	r0, r0
 80085d6:	fb06 2303 	mla	r3, r6, r3, r2
 80085da:	f8de 2000 	ldr.w	r2, [lr]
 80085de:	b292      	uxth	r2, r2
 80085e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085e4:	eba2 0200 	sub.w	r2, r2, r0
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	f8de 0000 	ldr.w	r0, [lr]
 80085ee:	445a      	add	r2, fp
 80085f0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80085f4:	b292      	uxth	r2, r2
 80085f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80085fa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80085fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008602:	f84e 2b04 	str.w	r2, [lr], #4
 8008606:	d2db      	bcs.n	80085c0 <quorem+0x44>
 8008608:	9b00      	ldr	r3, [sp, #0]
 800860a:	58eb      	ldr	r3, [r5, r3]
 800860c:	b92b      	cbnz	r3, 800861a <quorem+0x9e>
 800860e:	9b01      	ldr	r3, [sp, #4]
 8008610:	3b04      	subs	r3, #4
 8008612:	429d      	cmp	r5, r3
 8008614:	461a      	mov	r2, r3
 8008616:	d330      	bcc.n	800867a <quorem+0xfe>
 8008618:	613c      	str	r4, [r7, #16]
 800861a:	4638      	mov	r0, r7
 800861c:	f001 f9c6 	bl	80099ac <__mcmp>
 8008620:	2800      	cmp	r0, #0
 8008622:	db26      	blt.n	8008672 <quorem+0xf6>
 8008624:	4629      	mov	r1, r5
 8008626:	2000      	movs	r0, #0
 8008628:	f858 2b04 	ldr.w	r2, [r8], #4
 800862c:	f8d1 c000 	ldr.w	ip, [r1]
 8008630:	fa1f fe82 	uxth.w	lr, r2
 8008634:	45c1      	cmp	r9, r8
 8008636:	fa1f f38c 	uxth.w	r3, ip
 800863a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800863e:	eba3 030e 	sub.w	r3, r3, lr
 8008642:	4403      	add	r3, r0
 8008644:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008648:	b29b      	uxth	r3, r3
 800864a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800864e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008652:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008656:	f841 3b04 	str.w	r3, [r1], #4
 800865a:	d2e5      	bcs.n	8008628 <quorem+0xac>
 800865c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008660:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008664:	b922      	cbnz	r2, 8008670 <quorem+0xf4>
 8008666:	3b04      	subs	r3, #4
 8008668:	429d      	cmp	r5, r3
 800866a:	461a      	mov	r2, r3
 800866c:	d30b      	bcc.n	8008686 <quorem+0x10a>
 800866e:	613c      	str	r4, [r7, #16]
 8008670:	3601      	adds	r6, #1
 8008672:	4630      	mov	r0, r6
 8008674:	b003      	add	sp, #12
 8008676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867a:	6812      	ldr	r2, [r2, #0]
 800867c:	3b04      	subs	r3, #4
 800867e:	2a00      	cmp	r2, #0
 8008680:	d1ca      	bne.n	8008618 <quorem+0x9c>
 8008682:	3c01      	subs	r4, #1
 8008684:	e7c5      	b.n	8008612 <quorem+0x96>
 8008686:	6812      	ldr	r2, [r2, #0]
 8008688:	3b04      	subs	r3, #4
 800868a:	2a00      	cmp	r2, #0
 800868c:	d1ef      	bne.n	800866e <quorem+0xf2>
 800868e:	3c01      	subs	r4, #1
 8008690:	e7ea      	b.n	8008668 <quorem+0xec>
 8008692:	2000      	movs	r0, #0
 8008694:	e7ee      	b.n	8008674 <quorem+0xf8>
	...

08008698 <_dtoa_r>:
 8008698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	69c7      	ldr	r7, [r0, #28]
 800869e:	b099      	sub	sp, #100	@ 0x64
 80086a0:	4683      	mov	fp, r0
 80086a2:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80086a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80086a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80086a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086aa:	ec55 4b10 	vmov	r4, r5, d0
 80086ae:	ed8d 0b02 	vstr	d0, [sp, #8]
 80086b2:	b97f      	cbnz	r7, 80086d4 <_dtoa_r+0x3c>
 80086b4:	2010      	movs	r0, #16
 80086b6:	f000 fdfd 	bl	80092b4 <malloc>
 80086ba:	4602      	mov	r2, r0
 80086bc:	f8cb 001c 	str.w	r0, [fp, #28]
 80086c0:	b920      	cbnz	r0, 80086cc <_dtoa_r+0x34>
 80086c2:	4ba7      	ldr	r3, [pc, #668]	@ (8008960 <_dtoa_r+0x2c8>)
 80086c4:	21ef      	movs	r1, #239	@ 0xef
 80086c6:	48a7      	ldr	r0, [pc, #668]	@ (8008964 <_dtoa_r+0x2cc>)
 80086c8:	f002 fe0a 	bl	800b2e0 <__assert_func>
 80086cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80086d0:	6007      	str	r7, [r0, #0]
 80086d2:	60c7      	str	r7, [r0, #12]
 80086d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086d8:	6819      	ldr	r1, [r3, #0]
 80086da:	b159      	cbz	r1, 80086f4 <_dtoa_r+0x5c>
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	2301      	movs	r3, #1
 80086e0:	4658      	mov	r0, fp
 80086e2:	4093      	lsls	r3, r2
 80086e4:	604a      	str	r2, [r1, #4]
 80086e6:	608b      	str	r3, [r1, #8]
 80086e8:	f000 feda 	bl	80094a0 <_Bfree>
 80086ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086f0:	2200      	movs	r2, #0
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	1e2b      	subs	r3, r5, #0
 80086f6:	bfb7      	itett	lt
 80086f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80086fc:	2300      	movge	r3, #0
 80086fe:	2201      	movlt	r2, #1
 8008700:	9303      	strlt	r3, [sp, #12]
 8008702:	bfa8      	it	ge
 8008704:	6033      	strge	r3, [r6, #0]
 8008706:	9f03      	ldr	r7, [sp, #12]
 8008708:	4b97      	ldr	r3, [pc, #604]	@ (8008968 <_dtoa_r+0x2d0>)
 800870a:	bfb8      	it	lt
 800870c:	6032      	strlt	r2, [r6, #0]
 800870e:	43bb      	bics	r3, r7
 8008710:	d112      	bne.n	8008738 <_dtoa_r+0xa0>
 8008712:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008716:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800871e:	4323      	orrs	r3, r4
 8008720:	f000 854c 	beq.w	80091bc <_dtoa_r+0xb24>
 8008724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008726:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800897c <_dtoa_r+0x2e4>
 800872a:	2b00      	cmp	r3, #0
 800872c:	f000 854e 	beq.w	80091cc <_dtoa_r+0xb34>
 8008730:	f10a 0303 	add.w	r3, sl, #3
 8008734:	f000 bd48 	b.w	80091c8 <_dtoa_r+0xb30>
 8008738:	ed9d 7b02 	vldr	d7, [sp, #8]
 800873c:	2200      	movs	r2, #0
 800873e:	2300      	movs	r3, #0
 8008740:	ec51 0b17 	vmov	r0, r1, d7
 8008744:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008748:	f7f8 f9d2 	bl	8000af0 <__aeabi_dcmpeq>
 800874c:	4680      	mov	r8, r0
 800874e:	b158      	cbz	r0, 8008768 <_dtoa_r+0xd0>
 8008750:	2301      	movs	r3, #1
 8008752:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008758:	b113      	cbz	r3, 8008760 <_dtoa_r+0xc8>
 800875a:	4b84      	ldr	r3, [pc, #528]	@ (800896c <_dtoa_r+0x2d4>)
 800875c:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8008980 <_dtoa_r+0x2e8>
 8008764:	f000 bd32 	b.w	80091cc <_dtoa_r+0xb34>
 8008768:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800876c:	aa16      	add	r2, sp, #88	@ 0x58
 800876e:	a917      	add	r1, sp, #92	@ 0x5c
 8008770:	4658      	mov	r0, fp
 8008772:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008776:	f001 fa41 	bl	8009bfc <__d2b>
 800877a:	4681      	mov	r9, r0
 800877c:	2e00      	cmp	r6, #0
 800877e:	d075      	beq.n	800886c <_dtoa_r+0x1d4>
 8008780:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008782:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008786:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800878a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800878e:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008792:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008796:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800879a:	4619      	mov	r1, r3
 800879c:	2200      	movs	r2, #0
 800879e:	4b74      	ldr	r3, [pc, #464]	@ (8008970 <_dtoa_r+0x2d8>)
 80087a0:	f7f7 fd86 	bl	80002b0 <__aeabi_dsub>
 80087a4:	a368      	add	r3, pc, #416	@ (adr r3, 8008948 <_dtoa_r+0x2b0>)
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	f7f7 ff39 	bl	8000620 <__aeabi_dmul>
 80087ae:	a368      	add	r3, pc, #416	@ (adr r3, 8008950 <_dtoa_r+0x2b8>)
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	f7f7 fd7e 	bl	80002b4 <__adddf3>
 80087b8:	4604      	mov	r4, r0
 80087ba:	460d      	mov	r5, r1
 80087bc:	4630      	mov	r0, r6
 80087be:	f7f7 fec5 	bl	800054c <__aeabi_i2d>
 80087c2:	a365      	add	r3, pc, #404	@ (adr r3, 8008958 <_dtoa_r+0x2c0>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	f7f7 ff2a 	bl	8000620 <__aeabi_dmul>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4620      	mov	r0, r4
 80087d2:	4629      	mov	r1, r5
 80087d4:	f7f7 fd6e 	bl	80002b4 <__adddf3>
 80087d8:	4604      	mov	r4, r0
 80087da:	460d      	mov	r5, r1
 80087dc:	f7f8 f9d0 	bl	8000b80 <__aeabi_d2iz>
 80087e0:	2200      	movs	r2, #0
 80087e2:	4607      	mov	r7, r0
 80087e4:	2300      	movs	r3, #0
 80087e6:	4620      	mov	r0, r4
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7f8 f98b 	bl	8000b04 <__aeabi_dcmplt>
 80087ee:	b140      	cbz	r0, 8008802 <_dtoa_r+0x16a>
 80087f0:	4638      	mov	r0, r7
 80087f2:	f7f7 feab 	bl	800054c <__aeabi_i2d>
 80087f6:	4622      	mov	r2, r4
 80087f8:	462b      	mov	r3, r5
 80087fa:	f7f8 f979 	bl	8000af0 <__aeabi_dcmpeq>
 80087fe:	b900      	cbnz	r0, 8008802 <_dtoa_r+0x16a>
 8008800:	3f01      	subs	r7, #1
 8008802:	2f16      	cmp	r7, #22
 8008804:	d851      	bhi.n	80088aa <_dtoa_r+0x212>
 8008806:	4b5b      	ldr	r3, [pc, #364]	@ (8008974 <_dtoa_r+0x2dc>)
 8008808:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800880c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f7f8 f976 	bl	8000b04 <__aeabi_dcmplt>
 8008818:	2800      	cmp	r0, #0
 800881a:	d048      	beq.n	80088ae <_dtoa_r+0x216>
 800881c:	3f01      	subs	r7, #1
 800881e:	2300      	movs	r3, #0
 8008820:	9312      	str	r3, [sp, #72]	@ 0x48
 8008822:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008824:	1b9b      	subs	r3, r3, r6
 8008826:	1e5a      	subs	r2, r3, #1
 8008828:	bf46      	itte	mi
 800882a:	f1c3 0801 	rsbmi	r8, r3, #1
 800882e:	2300      	movmi	r3, #0
 8008830:	f04f 0800 	movpl.w	r8, #0
 8008834:	9208      	str	r2, [sp, #32]
 8008836:	bf48      	it	mi
 8008838:	9308      	strmi	r3, [sp, #32]
 800883a:	2f00      	cmp	r7, #0
 800883c:	db39      	blt.n	80088b2 <_dtoa_r+0x21a>
 800883e:	9b08      	ldr	r3, [sp, #32]
 8008840:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008842:	443b      	add	r3, r7
 8008844:	9308      	str	r3, [sp, #32]
 8008846:	2300      	movs	r3, #0
 8008848:	930a      	str	r3, [sp, #40]	@ 0x28
 800884a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884c:	2b09      	cmp	r3, #9
 800884e:	d864      	bhi.n	800891a <_dtoa_r+0x282>
 8008850:	2b05      	cmp	r3, #5
 8008852:	bfc5      	ittet	gt
 8008854:	3b04      	subgt	r3, #4
 8008856:	2400      	movgt	r4, #0
 8008858:	2401      	movle	r4, #1
 800885a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800885c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800885e:	3b02      	subs	r3, #2
 8008860:	2b03      	cmp	r3, #3
 8008862:	d865      	bhi.n	8008930 <_dtoa_r+0x298>
 8008864:	e8df f003 	tbb	[pc, r3]
 8008868:	5737392c 	.word	0x5737392c
 800886c:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008870:	441e      	add	r6, r3
 8008872:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008876:	2b20      	cmp	r3, #32
 8008878:	bfc9      	itett	gt
 800887a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800887e:	f1c3 0320 	rsble	r3, r3, #32
 8008882:	409f      	lslgt	r7, r3
 8008884:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008888:	bfd8      	it	le
 800888a:	fa04 f003 	lslle.w	r0, r4, r3
 800888e:	f106 36ff 	add.w	r6, r6, #4294967295
 8008892:	bfc4      	itt	gt
 8008894:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008898:	ea47 0003 	orrgt.w	r0, r7, r3
 800889c:	f7f7 fe46 	bl	800052c <__aeabi_ui2d>
 80088a0:	2201      	movs	r2, #1
 80088a2:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80088a6:	9214      	str	r2, [sp, #80]	@ 0x50
 80088a8:	e777      	b.n	800879a <_dtoa_r+0x102>
 80088aa:	2301      	movs	r3, #1
 80088ac:	e7b8      	b.n	8008820 <_dtoa_r+0x188>
 80088ae:	9012      	str	r0, [sp, #72]	@ 0x48
 80088b0:	e7b7      	b.n	8008822 <_dtoa_r+0x18a>
 80088b2:	427b      	negs	r3, r7
 80088b4:	eba8 0807 	sub.w	r8, r8, r7
 80088b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80088ba:	2300      	movs	r3, #0
 80088bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088be:	e7c4      	b.n	800884a <_dtoa_r+0x1b2>
 80088c0:	2300      	movs	r3, #0
 80088c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	dc35      	bgt.n	8008936 <_dtoa_r+0x29e>
 80088ca:	2301      	movs	r3, #1
 80088cc:	461a      	mov	r2, r3
 80088ce:	9300      	str	r3, [sp, #0]
 80088d0:	9307      	str	r3, [sp, #28]
 80088d2:	920e      	str	r2, [sp, #56]	@ 0x38
 80088d4:	e00b      	b.n	80088ee <_dtoa_r+0x256>
 80088d6:	2301      	movs	r3, #1
 80088d8:	e7f3      	b.n	80088c2 <_dtoa_r+0x22a>
 80088da:	2300      	movs	r3, #0
 80088dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088e0:	18fb      	adds	r3, r7, r3
 80088e2:	9300      	str	r3, [sp, #0]
 80088e4:	3301      	adds	r3, #1
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	9307      	str	r3, [sp, #28]
 80088ea:	bfb8      	it	lt
 80088ec:	2301      	movlt	r3, #1
 80088ee:	f8db 001c 	ldr.w	r0, [fp, #28]
 80088f2:	2100      	movs	r1, #0
 80088f4:	2204      	movs	r2, #4
 80088f6:	f102 0514 	add.w	r5, r2, #20
 80088fa:	429d      	cmp	r5, r3
 80088fc:	d91f      	bls.n	800893e <_dtoa_r+0x2a6>
 80088fe:	6041      	str	r1, [r0, #4]
 8008900:	4658      	mov	r0, fp
 8008902:	f000 fd8d 	bl	8009420 <_Balloc>
 8008906:	4682      	mov	sl, r0
 8008908:	2800      	cmp	r0, #0
 800890a:	d13b      	bne.n	8008984 <_dtoa_r+0x2ec>
 800890c:	4b1a      	ldr	r3, [pc, #104]	@ (8008978 <_dtoa_r+0x2e0>)
 800890e:	4602      	mov	r2, r0
 8008910:	f240 11af 	movw	r1, #431	@ 0x1af
 8008914:	e6d7      	b.n	80086c6 <_dtoa_r+0x2e>
 8008916:	2301      	movs	r3, #1
 8008918:	e7e0      	b.n	80088dc <_dtoa_r+0x244>
 800891a:	2401      	movs	r4, #1
 800891c:	2300      	movs	r3, #0
 800891e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008920:	9309      	str	r3, [sp, #36]	@ 0x24
 8008922:	f04f 33ff 	mov.w	r3, #4294967295
 8008926:	2200      	movs	r2, #0
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	9307      	str	r3, [sp, #28]
 800892c:	2312      	movs	r3, #18
 800892e:	e7d0      	b.n	80088d2 <_dtoa_r+0x23a>
 8008930:	2301      	movs	r3, #1
 8008932:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008934:	e7f5      	b.n	8008922 <_dtoa_r+0x28a>
 8008936:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	9307      	str	r3, [sp, #28]
 800893c:	e7d7      	b.n	80088ee <_dtoa_r+0x256>
 800893e:	3101      	adds	r1, #1
 8008940:	0052      	lsls	r2, r2, #1
 8008942:	e7d8      	b.n	80088f6 <_dtoa_r+0x25e>
 8008944:	f3af 8000 	nop.w
 8008948:	636f4361 	.word	0x636f4361
 800894c:	3fd287a7 	.word	0x3fd287a7
 8008950:	8b60c8b3 	.word	0x8b60c8b3
 8008954:	3fc68a28 	.word	0x3fc68a28
 8008958:	509f79fb 	.word	0x509f79fb
 800895c:	3fd34413 	.word	0x3fd34413
 8008960:	0800c47a 	.word	0x0800c47a
 8008964:	0800c491 	.word	0x0800c491
 8008968:	7ff00000 	.word	0x7ff00000
 800896c:	0800c445 	.word	0x0800c445
 8008970:	3ff80000 	.word	0x3ff80000
 8008974:	0800c588 	.word	0x0800c588
 8008978:	0800c4e9 	.word	0x0800c4e9
 800897c:	0800c476 	.word	0x0800c476
 8008980:	0800c444 	.word	0x0800c444
 8008984:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008988:	6018      	str	r0, [r3, #0]
 800898a:	9b07      	ldr	r3, [sp, #28]
 800898c:	2b0e      	cmp	r3, #14
 800898e:	f200 80a4 	bhi.w	8008ada <_dtoa_r+0x442>
 8008992:	2c00      	cmp	r4, #0
 8008994:	f000 80a1 	beq.w	8008ada <_dtoa_r+0x442>
 8008998:	2f00      	cmp	r7, #0
 800899a:	dd33      	ble.n	8008a04 <_dtoa_r+0x36c>
 800899c:	f007 020f 	and.w	r2, r7, #15
 80089a0:	4bac      	ldr	r3, [pc, #688]	@ (8008c54 <_dtoa_r+0x5bc>)
 80089a2:	05f8      	lsls	r0, r7, #23
 80089a4:	ea4f 1427 	mov.w	r4, r7, asr #4
 80089a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089ac:	ed93 7b00 	vldr	d7, [r3]
 80089b0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80089b4:	d516      	bpl.n	80089e4 <_dtoa_r+0x34c>
 80089b6:	4ba8      	ldr	r3, [pc, #672]	@ (8008c58 <_dtoa_r+0x5c0>)
 80089b8:	f004 040f 	and.w	r4, r4, #15
 80089bc:	2603      	movs	r6, #3
 80089be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089c6:	f7f7 ff55 	bl	8000874 <__aeabi_ddiv>
 80089ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ce:	4da2      	ldr	r5, [pc, #648]	@ (8008c58 <_dtoa_r+0x5c0>)
 80089d0:	b954      	cbnz	r4, 80089e8 <_dtoa_r+0x350>
 80089d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089da:	f7f7 ff4b 	bl	8000874 <__aeabi_ddiv>
 80089de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089e2:	e028      	b.n	8008a36 <_dtoa_r+0x39e>
 80089e4:	2602      	movs	r6, #2
 80089e6:	e7f2      	b.n	80089ce <_dtoa_r+0x336>
 80089e8:	07e1      	lsls	r1, r4, #31
 80089ea:	d508      	bpl.n	80089fe <_dtoa_r+0x366>
 80089ec:	3601      	adds	r6, #1
 80089ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089f6:	f7f7 fe13 	bl	8000620 <__aeabi_dmul>
 80089fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089fe:	1064      	asrs	r4, r4, #1
 8008a00:	3508      	adds	r5, #8
 8008a02:	e7e5      	b.n	80089d0 <_dtoa_r+0x338>
 8008a04:	f000 80d2 	beq.w	8008bac <_dtoa_r+0x514>
 8008a08:	427c      	negs	r4, r7
 8008a0a:	4b92      	ldr	r3, [pc, #584]	@ (8008c54 <_dtoa_r+0x5bc>)
 8008a0c:	4d92      	ldr	r5, [pc, #584]	@ (8008c58 <_dtoa_r+0x5c0>)
 8008a0e:	2602      	movs	r6, #2
 8008a10:	f004 020f 	and.w	r2, r4, #15
 8008a14:	1124      	asrs	r4, r4, #4
 8008a16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a22:	f7f7 fdfd 	bl	8000620 <__aeabi_dmul>
 8008a26:	2300      	movs	r3, #0
 8008a28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a2c:	2c00      	cmp	r4, #0
 8008a2e:	f040 80b2 	bne.w	8008b96 <_dtoa_r+0x4fe>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1d3      	bne.n	80089de <_dtoa_r+0x346>
 8008a36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 80b7 	beq.w	8008bb0 <_dtoa_r+0x518>
 8008a42:	2200      	movs	r2, #0
 8008a44:	4b85      	ldr	r3, [pc, #532]	@ (8008c5c <_dtoa_r+0x5c4>)
 8008a46:	4620      	mov	r0, r4
 8008a48:	4629      	mov	r1, r5
 8008a4a:	f7f8 f85b 	bl	8000b04 <__aeabi_dcmplt>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	f000 80ae 	beq.w	8008bb0 <_dtoa_r+0x518>
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 80aa 	beq.w	8008bb0 <_dtoa_r+0x518>
 8008a5c:	9b00      	ldr	r3, [sp, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	dd37      	ble.n	8008ad2 <_dtoa_r+0x43a>
 8008a62:	1e7b      	subs	r3, r7, #1
 8008a64:	4620      	mov	r0, r4
 8008a66:	2200      	movs	r2, #0
 8008a68:	4629      	mov	r1, r5
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	3601      	adds	r6, #1
 8008a6e:	4b7c      	ldr	r3, [pc, #496]	@ (8008c60 <_dtoa_r+0x5c8>)
 8008a70:	f7f7 fdd6 	bl	8000620 <__aeabi_dmul>
 8008a74:	9c00      	ldr	r4, [sp, #0]
 8008a76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a7a:	4630      	mov	r0, r6
 8008a7c:	f7f7 fd66 	bl	800054c <__aeabi_i2d>
 8008a80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a84:	f7f7 fdcc 	bl	8000620 <__aeabi_dmul>
 8008a88:	2200      	movs	r2, #0
 8008a8a:	4b76      	ldr	r3, [pc, #472]	@ (8008c64 <_dtoa_r+0x5cc>)
 8008a8c:	f7f7 fc12 	bl	80002b4 <__adddf3>
 8008a90:	4605      	mov	r5, r0
 8008a92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a96:	2c00      	cmp	r4, #0
 8008a98:	f040 808d 	bne.w	8008bb6 <_dtoa_r+0x51e>
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4b72      	ldr	r3, [pc, #456]	@ (8008c68 <_dtoa_r+0x5d0>)
 8008aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa4:	f7f7 fc04 	bl	80002b0 <__aeabi_dsub>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ab0:	462a      	mov	r2, r5
 8008ab2:	4633      	mov	r3, r6
 8008ab4:	f7f8 f844 	bl	8000b40 <__aeabi_dcmpgt>
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	f040 828b 	bne.w	8008fd4 <_dtoa_r+0x93c>
 8008abe:	462a      	mov	r2, r5
 8008ac0:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ac8:	f7f8 f81c 	bl	8000b04 <__aeabi_dcmplt>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f040 8128 	bne.w	8008d22 <_dtoa_r+0x68a>
 8008ad2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008ad6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008ada:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f2c0 815a 	blt.w	8008d96 <_dtoa_r+0x6fe>
 8008ae2:	2f0e      	cmp	r7, #14
 8008ae4:	f300 8157 	bgt.w	8008d96 <_dtoa_r+0x6fe>
 8008ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8008c54 <_dtoa_r+0x5bc>)
 8008aea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008aee:	ed93 7b00 	vldr	d7, [r3]
 8008af2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	ed8d 7b00 	vstr	d7, [sp]
 8008afa:	da03      	bge.n	8008b04 <_dtoa_r+0x46c>
 8008afc:	9b07      	ldr	r3, [sp, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f340 8101 	ble.w	8008d06 <_dtoa_r+0x66e>
 8008b04:	4656      	mov	r6, sl
 8008b06:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	4629      	mov	r1, r5
 8008b12:	f7f7 feaf 	bl	8000874 <__aeabi_ddiv>
 8008b16:	f7f8 f833 	bl	8000b80 <__aeabi_d2iz>
 8008b1a:	4680      	mov	r8, r0
 8008b1c:	f7f7 fd16 	bl	800054c <__aeabi_i2d>
 8008b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b24:	f7f7 fd7c 	bl	8000620 <__aeabi_dmul>
 8008b28:	4602      	mov	r2, r0
 8008b2a:	4620      	mov	r0, r4
 8008b2c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b30:	460b      	mov	r3, r1
 8008b32:	4629      	mov	r1, r5
 8008b34:	f7f7 fbbc 	bl	80002b0 <__aeabi_dsub>
 8008b38:	9d07      	ldr	r5, [sp, #28]
 8008b3a:	f806 4b01 	strb.w	r4, [r6], #1
 8008b3e:	eba6 040a 	sub.w	r4, r6, sl
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	42a5      	cmp	r5, r4
 8008b48:	f040 8117 	bne.w	8008d7a <_dtoa_r+0x6e2>
 8008b4c:	f7f7 fbb2 	bl	80002b4 <__adddf3>
 8008b50:	4604      	mov	r4, r0
 8008b52:	460d      	mov	r5, r1
 8008b54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b58:	f7f7 fff2 	bl	8000b40 <__aeabi_dcmpgt>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	f040 80f9 	bne.w	8008d54 <_dtoa_r+0x6bc>
 8008b62:	4620      	mov	r0, r4
 8008b64:	4629      	mov	r1, r5
 8008b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b6a:	f7f7 ffc1 	bl	8000af0 <__aeabi_dcmpeq>
 8008b6e:	b118      	cbz	r0, 8008b78 <_dtoa_r+0x4e0>
 8008b70:	f018 0f01 	tst.w	r8, #1
 8008b74:	f040 80ee 	bne.w	8008d54 <_dtoa_r+0x6bc>
 8008b78:	4649      	mov	r1, r9
 8008b7a:	4658      	mov	r0, fp
 8008b7c:	f000 fc90 	bl	80094a0 <_Bfree>
 8008b80:	2300      	movs	r3, #0
 8008b82:	3701      	adds	r7, #1
 8008b84:	7033      	strb	r3, [r6, #0]
 8008b86:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b88:	601f      	str	r7, [r3, #0]
 8008b8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 831d 	beq.w	80091cc <_dtoa_r+0xb34>
 8008b92:	601e      	str	r6, [r3, #0]
 8008b94:	e31a      	b.n	80091cc <_dtoa_r+0xb34>
 8008b96:	07e2      	lsls	r2, r4, #31
 8008b98:	d505      	bpl.n	8008ba6 <_dtoa_r+0x50e>
 8008b9a:	3601      	adds	r6, #1
 8008b9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ba0:	f7f7 fd3e 	bl	8000620 <__aeabi_dmul>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	1064      	asrs	r4, r4, #1
 8008ba8:	3508      	adds	r5, #8
 8008baa:	e73f      	b.n	8008a2c <_dtoa_r+0x394>
 8008bac:	2602      	movs	r6, #2
 8008bae:	e742      	b.n	8008a36 <_dtoa_r+0x39e>
 8008bb0:	9c07      	ldr	r4, [sp, #28]
 8008bb2:	9704      	str	r7, [sp, #16]
 8008bb4:	e761      	b.n	8008a7a <_dtoa_r+0x3e2>
 8008bb6:	4b27      	ldr	r3, [pc, #156]	@ (8008c54 <_dtoa_r+0x5bc>)
 8008bb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008bba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bbe:	4454      	add	r4, sl
 8008bc0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bc4:	2900      	cmp	r1, #0
 8008bc6:	d053      	beq.n	8008c70 <_dtoa_r+0x5d8>
 8008bc8:	2000      	movs	r0, #0
 8008bca:	4928      	ldr	r1, [pc, #160]	@ (8008c6c <_dtoa_r+0x5d4>)
 8008bcc:	f7f7 fe52 	bl	8000874 <__aeabi_ddiv>
 8008bd0:	4633      	mov	r3, r6
 8008bd2:	4656      	mov	r6, sl
 8008bd4:	462a      	mov	r2, r5
 8008bd6:	f7f7 fb6b 	bl	80002b0 <__aeabi_dsub>
 8008bda:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be2:	f7f7 ffcd 	bl	8000b80 <__aeabi_d2iz>
 8008be6:	4605      	mov	r5, r0
 8008be8:	f7f7 fcb0 	bl	800054c <__aeabi_i2d>
 8008bec:	4602      	mov	r2, r0
 8008bee:	460b      	mov	r3, r1
 8008bf0:	3530      	adds	r5, #48	@ 0x30
 8008bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf6:	f7f7 fb5b 	bl	80002b0 <__aeabi_dsub>
 8008bfa:	4602      	mov	r2, r0
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	f806 5b01 	strb.w	r5, [r6], #1
 8008c02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c0a:	f7f7 ff7b 	bl	8000b04 <__aeabi_dcmplt>
 8008c0e:	2800      	cmp	r0, #0
 8008c10:	d171      	bne.n	8008cf6 <_dtoa_r+0x65e>
 8008c12:	2000      	movs	r0, #0
 8008c14:	4911      	ldr	r1, [pc, #68]	@ (8008c5c <_dtoa_r+0x5c4>)
 8008c16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c1a:	f7f7 fb49 	bl	80002b0 <__aeabi_dsub>
 8008c1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c22:	f7f7 ff6f 	bl	8000b04 <__aeabi_dcmplt>
 8008c26:	2800      	cmp	r0, #0
 8008c28:	f040 8095 	bne.w	8008d56 <_dtoa_r+0x6be>
 8008c2c:	42a6      	cmp	r6, r4
 8008c2e:	f43f af50 	beq.w	8008ad2 <_dtoa_r+0x43a>
 8008c32:	2200      	movs	r2, #0
 8008c34:	4b0a      	ldr	r3, [pc, #40]	@ (8008c60 <_dtoa_r+0x5c8>)
 8008c36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c3a:	f7f7 fcf1 	bl	8000620 <__aeabi_dmul>
 8008c3e:	2200      	movs	r2, #0
 8008c40:	4b07      	ldr	r3, [pc, #28]	@ (8008c60 <_dtoa_r+0x5c8>)
 8008c42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c4a:	f7f7 fce9 	bl	8000620 <__aeabi_dmul>
 8008c4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c52:	e7c4      	b.n	8008bde <_dtoa_r+0x546>
 8008c54:	0800c588 	.word	0x0800c588
 8008c58:	0800c560 	.word	0x0800c560
 8008c5c:	3ff00000 	.word	0x3ff00000
 8008c60:	40240000 	.word	0x40240000
 8008c64:	401c0000 	.word	0x401c0000
 8008c68:	40140000 	.word	0x40140000
 8008c6c:	3fe00000 	.word	0x3fe00000
 8008c70:	4631      	mov	r1, r6
 8008c72:	4656      	mov	r6, sl
 8008c74:	4628      	mov	r0, r5
 8008c76:	f7f7 fcd3 	bl	8000620 <__aeabi_dmul>
 8008c7a:	9415      	str	r4, [sp, #84]	@ 0x54
 8008c7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c84:	f7f7 ff7c 	bl	8000b80 <__aeabi_d2iz>
 8008c88:	4605      	mov	r5, r0
 8008c8a:	f7f7 fc5f 	bl	800054c <__aeabi_i2d>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	3530      	adds	r5, #48	@ 0x30
 8008c92:	460b      	mov	r3, r1
 8008c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c98:	f7f7 fb0a 	bl	80002b0 <__aeabi_dsub>
 8008c9c:	f806 5b01 	strb.w	r5, [r6], #1
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	42a6      	cmp	r6, r4
 8008ca6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	d124      	bne.n	8008cfa <_dtoa_r+0x662>
 8008cb0:	4bac      	ldr	r3, [pc, #688]	@ (8008f64 <_dtoa_r+0x8cc>)
 8008cb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008cb6:	f7f7 fafd 	bl	80002b4 <__adddf3>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cc2:	f7f7 ff3d 	bl	8000b40 <__aeabi_dcmpgt>
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d145      	bne.n	8008d56 <_dtoa_r+0x6be>
 8008cca:	2000      	movs	r0, #0
 8008ccc:	49a5      	ldr	r1, [pc, #660]	@ (8008f64 <_dtoa_r+0x8cc>)
 8008cce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cd2:	f7f7 faed 	bl	80002b0 <__aeabi_dsub>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	460b      	mov	r3, r1
 8008cda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cde:	f7f7 ff11 	bl	8000b04 <__aeabi_dcmplt>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	f43f aef5 	beq.w	8008ad2 <_dtoa_r+0x43a>
 8008ce8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008cea:	1e73      	subs	r3, r6, #1
 8008cec:	9315      	str	r3, [sp, #84]	@ 0x54
 8008cee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008cf2:	2b30      	cmp	r3, #48	@ 0x30
 8008cf4:	d0f8      	beq.n	8008ce8 <_dtoa_r+0x650>
 8008cf6:	9f04      	ldr	r7, [sp, #16]
 8008cf8:	e73e      	b.n	8008b78 <_dtoa_r+0x4e0>
 8008cfa:	4b9b      	ldr	r3, [pc, #620]	@ (8008f68 <_dtoa_r+0x8d0>)
 8008cfc:	f7f7 fc90 	bl	8000620 <__aeabi_dmul>
 8008d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d04:	e7bc      	b.n	8008c80 <_dtoa_r+0x5e8>
 8008d06:	d10c      	bne.n	8008d22 <_dtoa_r+0x68a>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	4b98      	ldr	r3, [pc, #608]	@ (8008f6c <_dtoa_r+0x8d4>)
 8008d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d10:	f7f7 fc86 	bl	8000620 <__aeabi_dmul>
 8008d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d18:	f7f7 ff08 	bl	8000b2c <__aeabi_dcmpge>
 8008d1c:	2800      	cmp	r0, #0
 8008d1e:	f000 8157 	beq.w	8008fd0 <_dtoa_r+0x938>
 8008d22:	2400      	movs	r4, #0
 8008d24:	4625      	mov	r5, r4
 8008d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d28:	4656      	mov	r6, sl
 8008d2a:	43db      	mvns	r3, r3
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	2700      	movs	r7, #0
 8008d30:	4621      	mov	r1, r4
 8008d32:	4658      	mov	r0, fp
 8008d34:	f000 fbb4 	bl	80094a0 <_Bfree>
 8008d38:	2d00      	cmp	r5, #0
 8008d3a:	d0dc      	beq.n	8008cf6 <_dtoa_r+0x65e>
 8008d3c:	b12f      	cbz	r7, 8008d4a <_dtoa_r+0x6b2>
 8008d3e:	42af      	cmp	r7, r5
 8008d40:	d003      	beq.n	8008d4a <_dtoa_r+0x6b2>
 8008d42:	4639      	mov	r1, r7
 8008d44:	4658      	mov	r0, fp
 8008d46:	f000 fbab 	bl	80094a0 <_Bfree>
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4658      	mov	r0, fp
 8008d4e:	f000 fba7 	bl	80094a0 <_Bfree>
 8008d52:	e7d0      	b.n	8008cf6 <_dtoa_r+0x65e>
 8008d54:	9704      	str	r7, [sp, #16]
 8008d56:	4633      	mov	r3, r6
 8008d58:	461e      	mov	r6, r3
 8008d5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d5e:	2a39      	cmp	r2, #57	@ 0x39
 8008d60:	d107      	bne.n	8008d72 <_dtoa_r+0x6da>
 8008d62:	459a      	cmp	sl, r3
 8008d64:	d1f8      	bne.n	8008d58 <_dtoa_r+0x6c0>
 8008d66:	9a04      	ldr	r2, [sp, #16]
 8008d68:	3201      	adds	r2, #1
 8008d6a:	9204      	str	r2, [sp, #16]
 8008d6c:	2230      	movs	r2, #48	@ 0x30
 8008d6e:	f88a 2000 	strb.w	r2, [sl]
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	3201      	adds	r2, #1
 8008d76:	701a      	strb	r2, [r3, #0]
 8008d78:	e7bd      	b.n	8008cf6 <_dtoa_r+0x65e>
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	4b7a      	ldr	r3, [pc, #488]	@ (8008f68 <_dtoa_r+0x8d0>)
 8008d7e:	f7f7 fc4f 	bl	8000620 <__aeabi_dmul>
 8008d82:	2200      	movs	r2, #0
 8008d84:	2300      	movs	r3, #0
 8008d86:	4604      	mov	r4, r0
 8008d88:	460d      	mov	r5, r1
 8008d8a:	f7f7 feb1 	bl	8000af0 <__aeabi_dcmpeq>
 8008d8e:	2800      	cmp	r0, #0
 8008d90:	f43f aebb 	beq.w	8008b0a <_dtoa_r+0x472>
 8008d94:	e6f0      	b.n	8008b78 <_dtoa_r+0x4e0>
 8008d96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d98:	2a00      	cmp	r2, #0
 8008d9a:	f000 80db 	beq.w	8008f54 <_dtoa_r+0x8bc>
 8008d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da0:	2a01      	cmp	r2, #1
 8008da2:	f300 80bf 	bgt.w	8008f24 <_dtoa_r+0x88c>
 8008da6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008da8:	2a00      	cmp	r2, #0
 8008daa:	f000 80b7 	beq.w	8008f1c <_dtoa_r+0x884>
 8008dae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008db2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008db4:	4646      	mov	r6, r8
 8008db6:	9a08      	ldr	r2, [sp, #32]
 8008db8:	2101      	movs	r1, #1
 8008dba:	4658      	mov	r0, fp
 8008dbc:	4498      	add	r8, r3
 8008dbe:	441a      	add	r2, r3
 8008dc0:	9208      	str	r2, [sp, #32]
 8008dc2:	f000 fc6d 	bl	80096a0 <__i2b>
 8008dc6:	4605      	mov	r5, r0
 8008dc8:	b15e      	cbz	r6, 8008de2 <_dtoa_r+0x74a>
 8008dca:	9b08      	ldr	r3, [sp, #32]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	dd08      	ble.n	8008de2 <_dtoa_r+0x74a>
 8008dd0:	42b3      	cmp	r3, r6
 8008dd2:	9a08      	ldr	r2, [sp, #32]
 8008dd4:	bfa8      	it	ge
 8008dd6:	4633      	movge	r3, r6
 8008dd8:	eba8 0803 	sub.w	r8, r8, r3
 8008ddc:	1af6      	subs	r6, r6, r3
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	9308      	str	r3, [sp, #32]
 8008de2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008de4:	b1f3      	cbz	r3, 8008e24 <_dtoa_r+0x78c>
 8008de6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 80b7 	beq.w	8008f5c <_dtoa_r+0x8c4>
 8008dee:	b18c      	cbz	r4, 8008e14 <_dtoa_r+0x77c>
 8008df0:	4629      	mov	r1, r5
 8008df2:	4622      	mov	r2, r4
 8008df4:	4658      	mov	r0, fp
 8008df6:	f000 fd13 	bl	8009820 <__pow5mult>
 8008dfa:	464a      	mov	r2, r9
 8008dfc:	4601      	mov	r1, r0
 8008dfe:	4605      	mov	r5, r0
 8008e00:	4658      	mov	r0, fp
 8008e02:	f000 fc63 	bl	80096cc <__multiply>
 8008e06:	4649      	mov	r1, r9
 8008e08:	9004      	str	r0, [sp, #16]
 8008e0a:	4658      	mov	r0, fp
 8008e0c:	f000 fb48 	bl	80094a0 <_Bfree>
 8008e10:	9b04      	ldr	r3, [sp, #16]
 8008e12:	4699      	mov	r9, r3
 8008e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e16:	1b1a      	subs	r2, r3, r4
 8008e18:	d004      	beq.n	8008e24 <_dtoa_r+0x78c>
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	4658      	mov	r0, fp
 8008e1e:	f000 fcff 	bl	8009820 <__pow5mult>
 8008e22:	4681      	mov	r9, r0
 8008e24:	2101      	movs	r1, #1
 8008e26:	4658      	mov	r0, fp
 8008e28:	f000 fc3a 	bl	80096a0 <__i2b>
 8008e2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e2e:	4604      	mov	r4, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	f000 81cf 	beq.w	80091d4 <_dtoa_r+0xb3c>
 8008e36:	461a      	mov	r2, r3
 8008e38:	4601      	mov	r1, r0
 8008e3a:	4658      	mov	r0, fp
 8008e3c:	f000 fcf0 	bl	8009820 <__pow5mult>
 8008e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e42:	4604      	mov	r4, r0
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	f300 8095 	bgt.w	8008f74 <_dtoa_r+0x8dc>
 8008e4a:	9b02      	ldr	r3, [sp, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f040 8087 	bne.w	8008f60 <_dtoa_r+0x8c8>
 8008e52:	9b03      	ldr	r3, [sp, #12]
 8008e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f040 8089 	bne.w	8008f70 <_dtoa_r+0x8d8>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e64:	0d1b      	lsrs	r3, r3, #20
 8008e66:	051b      	lsls	r3, r3, #20
 8008e68:	b12b      	cbz	r3, 8008e76 <_dtoa_r+0x7de>
 8008e6a:	9b08      	ldr	r3, [sp, #32]
 8008e6c:	f108 0801 	add.w	r8, r8, #1
 8008e70:	3301      	adds	r3, #1
 8008e72:	9308      	str	r3, [sp, #32]
 8008e74:	2301      	movs	r3, #1
 8008e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 81b0 	beq.w	80091e0 <_dtoa_r+0xb48>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e86:	6918      	ldr	r0, [r3, #16]
 8008e88:	f000 fbbe 	bl	8009608 <__hi0bits>
 8008e8c:	f1c0 0020 	rsb	r0, r0, #32
 8008e90:	9b08      	ldr	r3, [sp, #32]
 8008e92:	4418      	add	r0, r3
 8008e94:	f010 001f 	ands.w	r0, r0, #31
 8008e98:	d077      	beq.n	8008f8a <_dtoa_r+0x8f2>
 8008e9a:	f1c0 0320 	rsb	r3, r0, #32
 8008e9e:	2b04      	cmp	r3, #4
 8008ea0:	dd6b      	ble.n	8008f7a <_dtoa_r+0x8e2>
 8008ea2:	f1c0 001c 	rsb	r0, r0, #28
 8008ea6:	9b08      	ldr	r3, [sp, #32]
 8008ea8:	4480      	add	r8, r0
 8008eaa:	4403      	add	r3, r0
 8008eac:	4406      	add	r6, r0
 8008eae:	9308      	str	r3, [sp, #32]
 8008eb0:	f1b8 0f00 	cmp.w	r8, #0
 8008eb4:	dd05      	ble.n	8008ec2 <_dtoa_r+0x82a>
 8008eb6:	4649      	mov	r1, r9
 8008eb8:	4642      	mov	r2, r8
 8008eba:	4658      	mov	r0, fp
 8008ebc:	f000 fd0a 	bl	80098d4 <__lshift>
 8008ec0:	4681      	mov	r9, r0
 8008ec2:	9b08      	ldr	r3, [sp, #32]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dd05      	ble.n	8008ed4 <_dtoa_r+0x83c>
 8008ec8:	4621      	mov	r1, r4
 8008eca:	461a      	mov	r2, r3
 8008ecc:	4658      	mov	r0, fp
 8008ece:	f000 fd01 	bl	80098d4 <__lshift>
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d059      	beq.n	8008f8e <_dtoa_r+0x8f6>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4648      	mov	r0, r9
 8008ede:	f000 fd65 	bl	80099ac <__mcmp>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	da53      	bge.n	8008f8e <_dtoa_r+0x8f6>
 8008ee6:	1e7b      	subs	r3, r7, #1
 8008ee8:	4649      	mov	r1, r9
 8008eea:	220a      	movs	r2, #10
 8008eec:	4658      	mov	r0, fp
 8008eee:	9304      	str	r3, [sp, #16]
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	f000 faf7 	bl	80094e4 <__multadd>
 8008ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ef8:	4681      	mov	r9, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f000 8172 	beq.w	80091e4 <_dtoa_r+0xb4c>
 8008f00:	2300      	movs	r3, #0
 8008f02:	4629      	mov	r1, r5
 8008f04:	220a      	movs	r2, #10
 8008f06:	4658      	mov	r0, fp
 8008f08:	f000 faec 	bl	80094e4 <__multadd>
 8008f0c:	9b00      	ldr	r3, [sp, #0]
 8008f0e:	4605      	mov	r5, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	dc67      	bgt.n	8008fe4 <_dtoa_r+0x94c>
 8008f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	dc41      	bgt.n	8008f9e <_dtoa_r+0x906>
 8008f1a:	e063      	b.n	8008fe4 <_dtoa_r+0x94c>
 8008f1c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f1e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f22:	e746      	b.n	8008db2 <_dtoa_r+0x71a>
 8008f24:	9b07      	ldr	r3, [sp, #28]
 8008f26:	1e5c      	subs	r4, r3, #1
 8008f28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f2a:	42a3      	cmp	r3, r4
 8008f2c:	bfb7      	itett	lt
 8008f2e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f30:	1b1c      	subge	r4, r3, r4
 8008f32:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008f34:	1ae3      	sublt	r3, r4, r3
 8008f36:	bfbe      	ittt	lt
 8008f38:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f3a:	2400      	movlt	r4, #0
 8008f3c:	18d2      	addlt	r2, r2, r3
 8008f3e:	9b07      	ldr	r3, [sp, #28]
 8008f40:	bfb8      	it	lt
 8008f42:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	bfb5      	itete	lt
 8008f48:	eba8 0603 	sublt.w	r6, r8, r3
 8008f4c:	4646      	movge	r6, r8
 8008f4e:	2300      	movlt	r3, #0
 8008f50:	9b07      	ldrge	r3, [sp, #28]
 8008f52:	e730      	b.n	8008db6 <_dtoa_r+0x71e>
 8008f54:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f56:	4646      	mov	r6, r8
 8008f58:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f5a:	e735      	b.n	8008dc8 <_dtoa_r+0x730>
 8008f5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f5e:	e75c      	b.n	8008e1a <_dtoa_r+0x782>
 8008f60:	2300      	movs	r3, #0
 8008f62:	e788      	b.n	8008e76 <_dtoa_r+0x7de>
 8008f64:	3fe00000 	.word	0x3fe00000
 8008f68:	40240000 	.word	0x40240000
 8008f6c:	40140000 	.word	0x40140000
 8008f70:	9b02      	ldr	r3, [sp, #8]
 8008f72:	e780      	b.n	8008e76 <_dtoa_r+0x7de>
 8008f74:	2300      	movs	r3, #0
 8008f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f78:	e782      	b.n	8008e80 <_dtoa_r+0x7e8>
 8008f7a:	d099      	beq.n	8008eb0 <_dtoa_r+0x818>
 8008f7c:	331c      	adds	r3, #28
 8008f7e:	9a08      	ldr	r2, [sp, #32]
 8008f80:	441a      	add	r2, r3
 8008f82:	4498      	add	r8, r3
 8008f84:	441e      	add	r6, r3
 8008f86:	9208      	str	r2, [sp, #32]
 8008f88:	e792      	b.n	8008eb0 <_dtoa_r+0x818>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	e7f6      	b.n	8008f7c <_dtoa_r+0x8e4>
 8008f8e:	9b07      	ldr	r3, [sp, #28]
 8008f90:	9704      	str	r7, [sp, #16]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	dc20      	bgt.n	8008fd8 <_dtoa_r+0x940>
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	dd1e      	ble.n	8008fdc <_dtoa_r+0x944>
 8008f9e:	9b00      	ldr	r3, [sp, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f47f aec0 	bne.w	8008d26 <_dtoa_r+0x68e>
 8008fa6:	4621      	mov	r1, r4
 8008fa8:	2205      	movs	r2, #5
 8008faa:	4658      	mov	r0, fp
 8008fac:	f000 fa9a 	bl	80094e4 <__multadd>
 8008fb0:	4601      	mov	r1, r0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4648      	mov	r0, r9
 8008fb6:	f000 fcf9 	bl	80099ac <__mcmp>
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	f77f aeb3 	ble.w	8008d26 <_dtoa_r+0x68e>
 8008fc0:	2331      	movs	r3, #49	@ 0x31
 8008fc2:	4656      	mov	r6, sl
 8008fc4:	f806 3b01 	strb.w	r3, [r6], #1
 8008fc8:	9b04      	ldr	r3, [sp, #16]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	9304      	str	r3, [sp, #16]
 8008fce:	e6ae      	b.n	8008d2e <_dtoa_r+0x696>
 8008fd0:	9c07      	ldr	r4, [sp, #28]
 8008fd2:	9704      	str	r7, [sp, #16]
 8008fd4:	4625      	mov	r5, r4
 8008fd6:	e7f3      	b.n	8008fc0 <_dtoa_r+0x928>
 8008fd8:	9b07      	ldr	r3, [sp, #28]
 8008fda:	9300      	str	r3, [sp, #0]
 8008fdc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f000 8104 	beq.w	80091ec <_dtoa_r+0xb54>
 8008fe4:	2e00      	cmp	r6, #0
 8008fe6:	dd05      	ble.n	8008ff4 <_dtoa_r+0x95c>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4632      	mov	r2, r6
 8008fec:	4658      	mov	r0, fp
 8008fee:	f000 fc71 	bl	80098d4 <__lshift>
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d05a      	beq.n	80090b0 <_dtoa_r+0xa18>
 8008ffa:	6869      	ldr	r1, [r5, #4]
 8008ffc:	4658      	mov	r0, fp
 8008ffe:	f000 fa0f 	bl	8009420 <_Balloc>
 8009002:	4606      	mov	r6, r0
 8009004:	b928      	cbnz	r0, 8009012 <_dtoa_r+0x97a>
 8009006:	4b84      	ldr	r3, [pc, #528]	@ (8009218 <_dtoa_r+0xb80>)
 8009008:	4602      	mov	r2, r0
 800900a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800900e:	f7ff bb5a 	b.w	80086c6 <_dtoa_r+0x2e>
 8009012:	692a      	ldr	r2, [r5, #16]
 8009014:	f105 010c 	add.w	r1, r5, #12
 8009018:	300c      	adds	r0, #12
 800901a:	3202      	adds	r2, #2
 800901c:	0092      	lsls	r2, r2, #2
 800901e:	f002 f947 	bl	800b2b0 <memcpy>
 8009022:	2201      	movs	r2, #1
 8009024:	4631      	mov	r1, r6
 8009026:	4658      	mov	r0, fp
 8009028:	f000 fc54 	bl	80098d4 <__lshift>
 800902c:	f10a 0301 	add.w	r3, sl, #1
 8009030:	462f      	mov	r7, r5
 8009032:	4605      	mov	r5, r0
 8009034:	9307      	str	r3, [sp, #28]
 8009036:	9b00      	ldr	r3, [sp, #0]
 8009038:	4453      	add	r3, sl
 800903a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800903c:	9b02      	ldr	r3, [sp, #8]
 800903e:	f003 0301 	and.w	r3, r3, #1
 8009042:	930a      	str	r3, [sp, #40]	@ 0x28
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	4621      	mov	r1, r4
 8009048:	4648      	mov	r0, r9
 800904a:	3b01      	subs	r3, #1
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	f7ff fa95 	bl	800857c <quorem>
 8009052:	4639      	mov	r1, r7
 8009054:	9002      	str	r0, [sp, #8]
 8009056:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800905a:	4648      	mov	r0, r9
 800905c:	f000 fca6 	bl	80099ac <__mcmp>
 8009060:	462a      	mov	r2, r5
 8009062:	9008      	str	r0, [sp, #32]
 8009064:	4621      	mov	r1, r4
 8009066:	4658      	mov	r0, fp
 8009068:	f000 fcbc 	bl	80099e4 <__mdiff>
 800906c:	68c2      	ldr	r2, [r0, #12]
 800906e:	4606      	mov	r6, r0
 8009070:	bb02      	cbnz	r2, 80090b4 <_dtoa_r+0xa1c>
 8009072:	4601      	mov	r1, r0
 8009074:	4648      	mov	r0, r9
 8009076:	f000 fc99 	bl	80099ac <__mcmp>
 800907a:	4602      	mov	r2, r0
 800907c:	4631      	mov	r1, r6
 800907e:	4658      	mov	r0, fp
 8009080:	920e      	str	r2, [sp, #56]	@ 0x38
 8009082:	f000 fa0d 	bl	80094a0 <_Bfree>
 8009086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009088:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800908a:	9e07      	ldr	r6, [sp, #28]
 800908c:	ea43 0102 	orr.w	r1, r3, r2
 8009090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009092:	4319      	orrs	r1, r3
 8009094:	d110      	bne.n	80090b8 <_dtoa_r+0xa20>
 8009096:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800909a:	d029      	beq.n	80090f0 <_dtoa_r+0xa58>
 800909c:	9b08      	ldr	r3, [sp, #32]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	dd02      	ble.n	80090a8 <_dtoa_r+0xa10>
 80090a2:	9b02      	ldr	r3, [sp, #8]
 80090a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80090a8:	9b00      	ldr	r3, [sp, #0]
 80090aa:	f883 8000 	strb.w	r8, [r3]
 80090ae:	e63f      	b.n	8008d30 <_dtoa_r+0x698>
 80090b0:	4628      	mov	r0, r5
 80090b2:	e7bb      	b.n	800902c <_dtoa_r+0x994>
 80090b4:	2201      	movs	r2, #1
 80090b6:	e7e1      	b.n	800907c <_dtoa_r+0x9e4>
 80090b8:	9b08      	ldr	r3, [sp, #32]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	db04      	blt.n	80090c8 <_dtoa_r+0xa30>
 80090be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090c0:	430b      	orrs	r3, r1
 80090c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090c4:	430b      	orrs	r3, r1
 80090c6:	d120      	bne.n	800910a <_dtoa_r+0xa72>
 80090c8:	2a00      	cmp	r2, #0
 80090ca:	dded      	ble.n	80090a8 <_dtoa_r+0xa10>
 80090cc:	4649      	mov	r1, r9
 80090ce:	2201      	movs	r2, #1
 80090d0:	4658      	mov	r0, fp
 80090d2:	f000 fbff 	bl	80098d4 <__lshift>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4681      	mov	r9, r0
 80090da:	f000 fc67 	bl	80099ac <__mcmp>
 80090de:	2800      	cmp	r0, #0
 80090e0:	dc03      	bgt.n	80090ea <_dtoa_r+0xa52>
 80090e2:	d1e1      	bne.n	80090a8 <_dtoa_r+0xa10>
 80090e4:	f018 0f01 	tst.w	r8, #1
 80090e8:	d0de      	beq.n	80090a8 <_dtoa_r+0xa10>
 80090ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090ee:	d1d8      	bne.n	80090a2 <_dtoa_r+0xa0a>
 80090f0:	2339      	movs	r3, #57	@ 0x39
 80090f2:	9a00      	ldr	r2, [sp, #0]
 80090f4:	7013      	strb	r3, [r2, #0]
 80090f6:	4633      	mov	r3, r6
 80090f8:	461e      	mov	r6, r3
 80090fa:	3b01      	subs	r3, #1
 80090fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009100:	2a39      	cmp	r2, #57	@ 0x39
 8009102:	d052      	beq.n	80091aa <_dtoa_r+0xb12>
 8009104:	3201      	adds	r2, #1
 8009106:	701a      	strb	r2, [r3, #0]
 8009108:	e612      	b.n	8008d30 <_dtoa_r+0x698>
 800910a:	2a00      	cmp	r2, #0
 800910c:	dd07      	ble.n	800911e <_dtoa_r+0xa86>
 800910e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009112:	d0ed      	beq.n	80090f0 <_dtoa_r+0xa58>
 8009114:	f108 0301 	add.w	r3, r8, #1
 8009118:	9a00      	ldr	r2, [sp, #0]
 800911a:	7013      	strb	r3, [r2, #0]
 800911c:	e608      	b.n	8008d30 <_dtoa_r+0x698>
 800911e:	9b07      	ldr	r3, [sp, #28]
 8009120:	9a07      	ldr	r2, [sp, #28]
 8009122:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009126:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009128:	4293      	cmp	r3, r2
 800912a:	d028      	beq.n	800917e <_dtoa_r+0xae6>
 800912c:	4649      	mov	r1, r9
 800912e:	2300      	movs	r3, #0
 8009130:	220a      	movs	r2, #10
 8009132:	4658      	mov	r0, fp
 8009134:	f000 f9d6 	bl	80094e4 <__multadd>
 8009138:	42af      	cmp	r7, r5
 800913a:	4681      	mov	r9, r0
 800913c:	f04f 0300 	mov.w	r3, #0
 8009140:	f04f 020a 	mov.w	r2, #10
 8009144:	4639      	mov	r1, r7
 8009146:	4658      	mov	r0, fp
 8009148:	d107      	bne.n	800915a <_dtoa_r+0xac2>
 800914a:	f000 f9cb 	bl	80094e4 <__multadd>
 800914e:	4607      	mov	r7, r0
 8009150:	4605      	mov	r5, r0
 8009152:	9b07      	ldr	r3, [sp, #28]
 8009154:	3301      	adds	r3, #1
 8009156:	9307      	str	r3, [sp, #28]
 8009158:	e774      	b.n	8009044 <_dtoa_r+0x9ac>
 800915a:	f000 f9c3 	bl	80094e4 <__multadd>
 800915e:	4629      	mov	r1, r5
 8009160:	4607      	mov	r7, r0
 8009162:	2300      	movs	r3, #0
 8009164:	220a      	movs	r2, #10
 8009166:	4658      	mov	r0, fp
 8009168:	f000 f9bc 	bl	80094e4 <__multadd>
 800916c:	4605      	mov	r5, r0
 800916e:	e7f0      	b.n	8009152 <_dtoa_r+0xaba>
 8009170:	9b00      	ldr	r3, [sp, #0]
 8009172:	2700      	movs	r7, #0
 8009174:	2b00      	cmp	r3, #0
 8009176:	bfcc      	ite	gt
 8009178:	461e      	movgt	r6, r3
 800917a:	2601      	movle	r6, #1
 800917c:	4456      	add	r6, sl
 800917e:	4649      	mov	r1, r9
 8009180:	2201      	movs	r2, #1
 8009182:	4658      	mov	r0, fp
 8009184:	f000 fba6 	bl	80098d4 <__lshift>
 8009188:	4621      	mov	r1, r4
 800918a:	4681      	mov	r9, r0
 800918c:	f000 fc0e 	bl	80099ac <__mcmp>
 8009190:	2800      	cmp	r0, #0
 8009192:	dcb0      	bgt.n	80090f6 <_dtoa_r+0xa5e>
 8009194:	d102      	bne.n	800919c <_dtoa_r+0xb04>
 8009196:	f018 0f01 	tst.w	r8, #1
 800919a:	d1ac      	bne.n	80090f6 <_dtoa_r+0xa5e>
 800919c:	4633      	mov	r3, r6
 800919e:	461e      	mov	r6, r3
 80091a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80091a4:	2a30      	cmp	r2, #48	@ 0x30
 80091a6:	d0fa      	beq.n	800919e <_dtoa_r+0xb06>
 80091a8:	e5c2      	b.n	8008d30 <_dtoa_r+0x698>
 80091aa:	459a      	cmp	sl, r3
 80091ac:	d1a4      	bne.n	80090f8 <_dtoa_r+0xa60>
 80091ae:	9b04      	ldr	r3, [sp, #16]
 80091b0:	3301      	adds	r3, #1
 80091b2:	9304      	str	r3, [sp, #16]
 80091b4:	2331      	movs	r3, #49	@ 0x31
 80091b6:	f88a 3000 	strb.w	r3, [sl]
 80091ba:	e5b9      	b.n	8008d30 <_dtoa_r+0x698>
 80091bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800921c <_dtoa_r+0xb84>
 80091c2:	b11b      	cbz	r3, 80091cc <_dtoa_r+0xb34>
 80091c4:	f10a 0308 	add.w	r3, sl, #8
 80091c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091ca:	6013      	str	r3, [r2, #0]
 80091cc:	4650      	mov	r0, sl
 80091ce:	b019      	add	sp, #100	@ 0x64
 80091d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	f77f ae37 	ble.w	8008e4a <_dtoa_r+0x7b2>
 80091dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091de:	930a      	str	r3, [sp, #40]	@ 0x28
 80091e0:	2001      	movs	r0, #1
 80091e2:	e655      	b.n	8008e90 <_dtoa_r+0x7f8>
 80091e4:	9b00      	ldr	r3, [sp, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f77f aed6 	ble.w	8008f98 <_dtoa_r+0x900>
 80091ec:	4656      	mov	r6, sl
 80091ee:	4621      	mov	r1, r4
 80091f0:	4648      	mov	r0, r9
 80091f2:	f7ff f9c3 	bl	800857c <quorem>
 80091f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091fa:	9b00      	ldr	r3, [sp, #0]
 80091fc:	f806 8b01 	strb.w	r8, [r6], #1
 8009200:	eba6 020a 	sub.w	r2, r6, sl
 8009204:	4293      	cmp	r3, r2
 8009206:	ddb3      	ble.n	8009170 <_dtoa_r+0xad8>
 8009208:	4649      	mov	r1, r9
 800920a:	2300      	movs	r3, #0
 800920c:	220a      	movs	r2, #10
 800920e:	4658      	mov	r0, fp
 8009210:	f000 f968 	bl	80094e4 <__multadd>
 8009214:	4681      	mov	r9, r0
 8009216:	e7ea      	b.n	80091ee <_dtoa_r+0xb56>
 8009218:	0800c4e9 	.word	0x0800c4e9
 800921c:	0800c46d 	.word	0x0800c46d

08009220 <_free_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4605      	mov	r5, r0
 8009224:	2900      	cmp	r1, #0
 8009226:	d041      	beq.n	80092ac <_free_r+0x8c>
 8009228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800922c:	1f0c      	subs	r4, r1, #4
 800922e:	2b00      	cmp	r3, #0
 8009230:	bfb8      	it	lt
 8009232:	18e4      	addlt	r4, r4, r3
 8009234:	f000 f8e8 	bl	8009408 <__malloc_lock>
 8009238:	4a1d      	ldr	r2, [pc, #116]	@ (80092b0 <_free_r+0x90>)
 800923a:	6813      	ldr	r3, [r2, #0]
 800923c:	b933      	cbnz	r3, 800924c <_free_r+0x2c>
 800923e:	6063      	str	r3, [r4, #4]
 8009240:	6014      	str	r4, [r2, #0]
 8009242:	4628      	mov	r0, r5
 8009244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009248:	f000 b8e4 	b.w	8009414 <__malloc_unlock>
 800924c:	42a3      	cmp	r3, r4
 800924e:	d908      	bls.n	8009262 <_free_r+0x42>
 8009250:	6820      	ldr	r0, [r4, #0]
 8009252:	1821      	adds	r1, r4, r0
 8009254:	428b      	cmp	r3, r1
 8009256:	bf01      	itttt	eq
 8009258:	6819      	ldreq	r1, [r3, #0]
 800925a:	685b      	ldreq	r3, [r3, #4]
 800925c:	1809      	addeq	r1, r1, r0
 800925e:	6021      	streq	r1, [r4, #0]
 8009260:	e7ed      	b.n	800923e <_free_r+0x1e>
 8009262:	461a      	mov	r2, r3
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	b10b      	cbz	r3, 800926c <_free_r+0x4c>
 8009268:	42a3      	cmp	r3, r4
 800926a:	d9fa      	bls.n	8009262 <_free_r+0x42>
 800926c:	6811      	ldr	r1, [r2, #0]
 800926e:	1850      	adds	r0, r2, r1
 8009270:	42a0      	cmp	r0, r4
 8009272:	d10b      	bne.n	800928c <_free_r+0x6c>
 8009274:	6820      	ldr	r0, [r4, #0]
 8009276:	4401      	add	r1, r0
 8009278:	1850      	adds	r0, r2, r1
 800927a:	6011      	str	r1, [r2, #0]
 800927c:	4283      	cmp	r3, r0
 800927e:	d1e0      	bne.n	8009242 <_free_r+0x22>
 8009280:	6818      	ldr	r0, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	4408      	add	r0, r1
 8009286:	6053      	str	r3, [r2, #4]
 8009288:	6010      	str	r0, [r2, #0]
 800928a:	e7da      	b.n	8009242 <_free_r+0x22>
 800928c:	d902      	bls.n	8009294 <_free_r+0x74>
 800928e:	230c      	movs	r3, #12
 8009290:	602b      	str	r3, [r5, #0]
 8009292:	e7d6      	b.n	8009242 <_free_r+0x22>
 8009294:	6820      	ldr	r0, [r4, #0]
 8009296:	1821      	adds	r1, r4, r0
 8009298:	428b      	cmp	r3, r1
 800929a:	bf02      	ittt	eq
 800929c:	6819      	ldreq	r1, [r3, #0]
 800929e:	685b      	ldreq	r3, [r3, #4]
 80092a0:	1809      	addeq	r1, r1, r0
 80092a2:	6063      	str	r3, [r4, #4]
 80092a4:	bf08      	it	eq
 80092a6:	6021      	streq	r1, [r4, #0]
 80092a8:	6054      	str	r4, [r2, #4]
 80092aa:	e7ca      	b.n	8009242 <_free_r+0x22>
 80092ac:	bd38      	pop	{r3, r4, r5, pc}
 80092ae:	bf00      	nop
 80092b0:	20000614 	.word	0x20000614

080092b4 <malloc>:
 80092b4:	4b02      	ldr	r3, [pc, #8]	@ (80092c0 <malloc+0xc>)
 80092b6:	4601      	mov	r1, r0
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	f000 b825 	b.w	8009308 <_malloc_r>
 80092be:	bf00      	nop
 80092c0:	2000001c 	.word	0x2000001c

080092c4 <sbrk_aligned>:
 80092c4:	b570      	push	{r4, r5, r6, lr}
 80092c6:	4e0f      	ldr	r6, [pc, #60]	@ (8009304 <sbrk_aligned+0x40>)
 80092c8:	460c      	mov	r4, r1
 80092ca:	4605      	mov	r5, r0
 80092cc:	6831      	ldr	r1, [r6, #0]
 80092ce:	b911      	cbnz	r1, 80092d6 <sbrk_aligned+0x12>
 80092d0:	f001 ffde 	bl	800b290 <_sbrk_r>
 80092d4:	6030      	str	r0, [r6, #0]
 80092d6:	4621      	mov	r1, r4
 80092d8:	4628      	mov	r0, r5
 80092da:	f001 ffd9 	bl	800b290 <_sbrk_r>
 80092de:	1c43      	adds	r3, r0, #1
 80092e0:	d103      	bne.n	80092ea <sbrk_aligned+0x26>
 80092e2:	f04f 34ff 	mov.w	r4, #4294967295
 80092e6:	4620      	mov	r0, r4
 80092e8:	bd70      	pop	{r4, r5, r6, pc}
 80092ea:	1cc4      	adds	r4, r0, #3
 80092ec:	f024 0403 	bic.w	r4, r4, #3
 80092f0:	42a0      	cmp	r0, r4
 80092f2:	d0f8      	beq.n	80092e6 <sbrk_aligned+0x22>
 80092f4:	1a21      	subs	r1, r4, r0
 80092f6:	4628      	mov	r0, r5
 80092f8:	f001 ffca 	bl	800b290 <_sbrk_r>
 80092fc:	3001      	adds	r0, #1
 80092fe:	d1f2      	bne.n	80092e6 <sbrk_aligned+0x22>
 8009300:	e7ef      	b.n	80092e2 <sbrk_aligned+0x1e>
 8009302:	bf00      	nop
 8009304:	20000610 	.word	0x20000610

08009308 <_malloc_r>:
 8009308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800930c:	1ccd      	adds	r5, r1, #3
 800930e:	4606      	mov	r6, r0
 8009310:	f025 0503 	bic.w	r5, r5, #3
 8009314:	3508      	adds	r5, #8
 8009316:	2d0c      	cmp	r5, #12
 8009318:	bf38      	it	cc
 800931a:	250c      	movcc	r5, #12
 800931c:	2d00      	cmp	r5, #0
 800931e:	db01      	blt.n	8009324 <_malloc_r+0x1c>
 8009320:	42a9      	cmp	r1, r5
 8009322:	d904      	bls.n	800932e <_malloc_r+0x26>
 8009324:	230c      	movs	r3, #12
 8009326:	6033      	str	r3, [r6, #0]
 8009328:	2000      	movs	r0, #0
 800932a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800932e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009404 <_malloc_r+0xfc>
 8009332:	f000 f869 	bl	8009408 <__malloc_lock>
 8009336:	f8d8 3000 	ldr.w	r3, [r8]
 800933a:	461c      	mov	r4, r3
 800933c:	bb44      	cbnz	r4, 8009390 <_malloc_r+0x88>
 800933e:	4629      	mov	r1, r5
 8009340:	4630      	mov	r0, r6
 8009342:	f7ff ffbf 	bl	80092c4 <sbrk_aligned>
 8009346:	1c43      	adds	r3, r0, #1
 8009348:	4604      	mov	r4, r0
 800934a:	d158      	bne.n	80093fe <_malloc_r+0xf6>
 800934c:	f8d8 4000 	ldr.w	r4, [r8]
 8009350:	4627      	mov	r7, r4
 8009352:	2f00      	cmp	r7, #0
 8009354:	d143      	bne.n	80093de <_malloc_r+0xd6>
 8009356:	2c00      	cmp	r4, #0
 8009358:	d04b      	beq.n	80093f2 <_malloc_r+0xea>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	4639      	mov	r1, r7
 800935e:	4630      	mov	r0, r6
 8009360:	eb04 0903 	add.w	r9, r4, r3
 8009364:	f001 ff94 	bl	800b290 <_sbrk_r>
 8009368:	4581      	cmp	r9, r0
 800936a:	d142      	bne.n	80093f2 <_malloc_r+0xea>
 800936c:	6821      	ldr	r1, [r4, #0]
 800936e:	4630      	mov	r0, r6
 8009370:	1a6d      	subs	r5, r5, r1
 8009372:	4629      	mov	r1, r5
 8009374:	f7ff ffa6 	bl	80092c4 <sbrk_aligned>
 8009378:	3001      	adds	r0, #1
 800937a:	d03a      	beq.n	80093f2 <_malloc_r+0xea>
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	442b      	add	r3, r5
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	f8d8 3000 	ldr.w	r3, [r8]
 8009386:	685a      	ldr	r2, [r3, #4]
 8009388:	bb62      	cbnz	r2, 80093e4 <_malloc_r+0xdc>
 800938a:	f8c8 7000 	str.w	r7, [r8]
 800938e:	e00f      	b.n	80093b0 <_malloc_r+0xa8>
 8009390:	6822      	ldr	r2, [r4, #0]
 8009392:	1b52      	subs	r2, r2, r5
 8009394:	d420      	bmi.n	80093d8 <_malloc_r+0xd0>
 8009396:	2a0b      	cmp	r2, #11
 8009398:	d917      	bls.n	80093ca <_malloc_r+0xc2>
 800939a:	1961      	adds	r1, r4, r5
 800939c:	42a3      	cmp	r3, r4
 800939e:	6025      	str	r5, [r4, #0]
 80093a0:	bf18      	it	ne
 80093a2:	6059      	strne	r1, [r3, #4]
 80093a4:	6863      	ldr	r3, [r4, #4]
 80093a6:	bf08      	it	eq
 80093a8:	f8c8 1000 	streq.w	r1, [r8]
 80093ac:	5162      	str	r2, [r4, r5]
 80093ae:	604b      	str	r3, [r1, #4]
 80093b0:	4630      	mov	r0, r6
 80093b2:	f000 f82f 	bl	8009414 <__malloc_unlock>
 80093b6:	f104 000b 	add.w	r0, r4, #11
 80093ba:	1d23      	adds	r3, r4, #4
 80093bc:	f020 0007 	bic.w	r0, r0, #7
 80093c0:	1ac2      	subs	r2, r0, r3
 80093c2:	bf1c      	itt	ne
 80093c4:	1a1b      	subne	r3, r3, r0
 80093c6:	50a3      	strne	r3, [r4, r2]
 80093c8:	e7af      	b.n	800932a <_malloc_r+0x22>
 80093ca:	6862      	ldr	r2, [r4, #4]
 80093cc:	42a3      	cmp	r3, r4
 80093ce:	bf0c      	ite	eq
 80093d0:	f8c8 2000 	streq.w	r2, [r8]
 80093d4:	605a      	strne	r2, [r3, #4]
 80093d6:	e7eb      	b.n	80093b0 <_malloc_r+0xa8>
 80093d8:	4623      	mov	r3, r4
 80093da:	6864      	ldr	r4, [r4, #4]
 80093dc:	e7ae      	b.n	800933c <_malloc_r+0x34>
 80093de:	463c      	mov	r4, r7
 80093e0:	687f      	ldr	r7, [r7, #4]
 80093e2:	e7b6      	b.n	8009352 <_malloc_r+0x4a>
 80093e4:	461a      	mov	r2, r3
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	42a3      	cmp	r3, r4
 80093ea:	d1fb      	bne.n	80093e4 <_malloc_r+0xdc>
 80093ec:	2300      	movs	r3, #0
 80093ee:	6053      	str	r3, [r2, #4]
 80093f0:	e7de      	b.n	80093b0 <_malloc_r+0xa8>
 80093f2:	230c      	movs	r3, #12
 80093f4:	4630      	mov	r0, r6
 80093f6:	6033      	str	r3, [r6, #0]
 80093f8:	f000 f80c 	bl	8009414 <__malloc_unlock>
 80093fc:	e794      	b.n	8009328 <_malloc_r+0x20>
 80093fe:	6005      	str	r5, [r0, #0]
 8009400:	e7d6      	b.n	80093b0 <_malloc_r+0xa8>
 8009402:	bf00      	nop
 8009404:	20000614 	.word	0x20000614

08009408 <__malloc_lock>:
 8009408:	4801      	ldr	r0, [pc, #4]	@ (8009410 <__malloc_lock+0x8>)
 800940a:	f7ff b8a0 	b.w	800854e <__retarget_lock_acquire_recursive>
 800940e:	bf00      	nop
 8009410:	2000060c 	.word	0x2000060c

08009414 <__malloc_unlock>:
 8009414:	4801      	ldr	r0, [pc, #4]	@ (800941c <__malloc_unlock+0x8>)
 8009416:	f7ff b89b 	b.w	8008550 <__retarget_lock_release_recursive>
 800941a:	bf00      	nop
 800941c:	2000060c 	.word	0x2000060c

08009420 <_Balloc>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	69c6      	ldr	r6, [r0, #28]
 8009424:	4604      	mov	r4, r0
 8009426:	460d      	mov	r5, r1
 8009428:	b976      	cbnz	r6, 8009448 <_Balloc+0x28>
 800942a:	2010      	movs	r0, #16
 800942c:	f7ff ff42 	bl	80092b4 <malloc>
 8009430:	4602      	mov	r2, r0
 8009432:	61e0      	str	r0, [r4, #28]
 8009434:	b920      	cbnz	r0, 8009440 <_Balloc+0x20>
 8009436:	4b18      	ldr	r3, [pc, #96]	@ (8009498 <_Balloc+0x78>)
 8009438:	216b      	movs	r1, #107	@ 0x6b
 800943a:	4818      	ldr	r0, [pc, #96]	@ (800949c <_Balloc+0x7c>)
 800943c:	f001 ff50 	bl	800b2e0 <__assert_func>
 8009440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009444:	6006      	str	r6, [r0, #0]
 8009446:	60c6      	str	r6, [r0, #12]
 8009448:	69e6      	ldr	r6, [r4, #28]
 800944a:	68f3      	ldr	r3, [r6, #12]
 800944c:	b183      	cbz	r3, 8009470 <_Balloc+0x50>
 800944e:	69e3      	ldr	r3, [r4, #28]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009456:	b9b8      	cbnz	r0, 8009488 <_Balloc+0x68>
 8009458:	2101      	movs	r1, #1
 800945a:	4620      	mov	r0, r4
 800945c:	fa01 f605 	lsl.w	r6, r1, r5
 8009460:	1d72      	adds	r2, r6, #5
 8009462:	0092      	lsls	r2, r2, #2
 8009464:	f001 ff5a 	bl	800b31c <_calloc_r>
 8009468:	b160      	cbz	r0, 8009484 <_Balloc+0x64>
 800946a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800946e:	e00e      	b.n	800948e <_Balloc+0x6e>
 8009470:	2221      	movs	r2, #33	@ 0x21
 8009472:	2104      	movs	r1, #4
 8009474:	4620      	mov	r0, r4
 8009476:	f001 ff51 	bl	800b31c <_calloc_r>
 800947a:	69e3      	ldr	r3, [r4, #28]
 800947c:	60f0      	str	r0, [r6, #12]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e4      	bne.n	800944e <_Balloc+0x2e>
 8009484:	2000      	movs	r0, #0
 8009486:	bd70      	pop	{r4, r5, r6, pc}
 8009488:	6802      	ldr	r2, [r0, #0]
 800948a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800948e:	2300      	movs	r3, #0
 8009490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009494:	e7f7      	b.n	8009486 <_Balloc+0x66>
 8009496:	bf00      	nop
 8009498:	0800c47a 	.word	0x0800c47a
 800949c:	0800c4fa 	.word	0x0800c4fa

080094a0 <_Bfree>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	69c6      	ldr	r6, [r0, #28]
 80094a4:	4605      	mov	r5, r0
 80094a6:	460c      	mov	r4, r1
 80094a8:	b976      	cbnz	r6, 80094c8 <_Bfree+0x28>
 80094aa:	2010      	movs	r0, #16
 80094ac:	f7ff ff02 	bl	80092b4 <malloc>
 80094b0:	4602      	mov	r2, r0
 80094b2:	61e8      	str	r0, [r5, #28]
 80094b4:	b920      	cbnz	r0, 80094c0 <_Bfree+0x20>
 80094b6:	4b09      	ldr	r3, [pc, #36]	@ (80094dc <_Bfree+0x3c>)
 80094b8:	218f      	movs	r1, #143	@ 0x8f
 80094ba:	4809      	ldr	r0, [pc, #36]	@ (80094e0 <_Bfree+0x40>)
 80094bc:	f001 ff10 	bl	800b2e0 <__assert_func>
 80094c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094c4:	6006      	str	r6, [r0, #0]
 80094c6:	60c6      	str	r6, [r0, #12]
 80094c8:	b13c      	cbz	r4, 80094da <_Bfree+0x3a>
 80094ca:	69eb      	ldr	r3, [r5, #28]
 80094cc:	6862      	ldr	r2, [r4, #4]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094d4:	6021      	str	r1, [r4, #0]
 80094d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094da:	bd70      	pop	{r4, r5, r6, pc}
 80094dc:	0800c47a 	.word	0x0800c47a
 80094e0:	0800c4fa 	.word	0x0800c4fa

080094e4 <__multadd>:
 80094e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e8:	f101 0c14 	add.w	ip, r1, #20
 80094ec:	4607      	mov	r7, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	461e      	mov	r6, r3
 80094f2:	690d      	ldr	r5, [r1, #16]
 80094f4:	2000      	movs	r0, #0
 80094f6:	f8dc 3000 	ldr.w	r3, [ip]
 80094fa:	3001      	adds	r0, #1
 80094fc:	b299      	uxth	r1, r3
 80094fe:	4285      	cmp	r5, r0
 8009500:	fb02 6101 	mla	r1, r2, r1, r6
 8009504:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009508:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800950c:	b289      	uxth	r1, r1
 800950e:	fb02 3306 	mla	r3, r2, r6, r3
 8009512:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009516:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800951a:	f84c 1b04 	str.w	r1, [ip], #4
 800951e:	dcea      	bgt.n	80094f6 <__multadd+0x12>
 8009520:	b30e      	cbz	r6, 8009566 <__multadd+0x82>
 8009522:	68a3      	ldr	r3, [r4, #8]
 8009524:	42ab      	cmp	r3, r5
 8009526:	dc19      	bgt.n	800955c <__multadd+0x78>
 8009528:	6861      	ldr	r1, [r4, #4]
 800952a:	4638      	mov	r0, r7
 800952c:	3101      	adds	r1, #1
 800952e:	f7ff ff77 	bl	8009420 <_Balloc>
 8009532:	4680      	mov	r8, r0
 8009534:	b928      	cbnz	r0, 8009542 <__multadd+0x5e>
 8009536:	4602      	mov	r2, r0
 8009538:	4b0c      	ldr	r3, [pc, #48]	@ (800956c <__multadd+0x88>)
 800953a:	21ba      	movs	r1, #186	@ 0xba
 800953c:	480c      	ldr	r0, [pc, #48]	@ (8009570 <__multadd+0x8c>)
 800953e:	f001 fecf 	bl	800b2e0 <__assert_func>
 8009542:	6922      	ldr	r2, [r4, #16]
 8009544:	f104 010c 	add.w	r1, r4, #12
 8009548:	300c      	adds	r0, #12
 800954a:	3202      	adds	r2, #2
 800954c:	0092      	lsls	r2, r2, #2
 800954e:	f001 feaf 	bl	800b2b0 <memcpy>
 8009552:	4621      	mov	r1, r4
 8009554:	4644      	mov	r4, r8
 8009556:	4638      	mov	r0, r7
 8009558:	f7ff ffa2 	bl	80094a0 <_Bfree>
 800955c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009560:	3501      	adds	r5, #1
 8009562:	615e      	str	r6, [r3, #20]
 8009564:	6125      	str	r5, [r4, #16]
 8009566:	4620      	mov	r0, r4
 8009568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800956c:	0800c4e9 	.word	0x0800c4e9
 8009570:	0800c4fa 	.word	0x0800c4fa

08009574 <__s2b>:
 8009574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009578:	4615      	mov	r5, r2
 800957a:	461f      	mov	r7, r3
 800957c:	2209      	movs	r2, #9
 800957e:	3308      	adds	r3, #8
 8009580:	460c      	mov	r4, r1
 8009582:	4606      	mov	r6, r0
 8009584:	2100      	movs	r1, #0
 8009586:	fb93 f3f2 	sdiv	r3, r3, r2
 800958a:	2201      	movs	r2, #1
 800958c:	429a      	cmp	r2, r3
 800958e:	db09      	blt.n	80095a4 <__s2b+0x30>
 8009590:	4630      	mov	r0, r6
 8009592:	f7ff ff45 	bl	8009420 <_Balloc>
 8009596:	b940      	cbnz	r0, 80095aa <__s2b+0x36>
 8009598:	4602      	mov	r2, r0
 800959a:	4b19      	ldr	r3, [pc, #100]	@ (8009600 <__s2b+0x8c>)
 800959c:	21d3      	movs	r1, #211	@ 0xd3
 800959e:	4819      	ldr	r0, [pc, #100]	@ (8009604 <__s2b+0x90>)
 80095a0:	f001 fe9e 	bl	800b2e0 <__assert_func>
 80095a4:	0052      	lsls	r2, r2, #1
 80095a6:	3101      	adds	r1, #1
 80095a8:	e7f0      	b.n	800958c <__s2b+0x18>
 80095aa:	9b08      	ldr	r3, [sp, #32]
 80095ac:	2d09      	cmp	r5, #9
 80095ae:	6143      	str	r3, [r0, #20]
 80095b0:	f04f 0301 	mov.w	r3, #1
 80095b4:	6103      	str	r3, [r0, #16]
 80095b6:	dd16      	ble.n	80095e6 <__s2b+0x72>
 80095b8:	f104 0909 	add.w	r9, r4, #9
 80095bc:	442c      	add	r4, r5
 80095be:	46c8      	mov	r8, r9
 80095c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095c4:	4601      	mov	r1, r0
 80095c6:	220a      	movs	r2, #10
 80095c8:	4630      	mov	r0, r6
 80095ca:	3b30      	subs	r3, #48	@ 0x30
 80095cc:	f7ff ff8a 	bl	80094e4 <__multadd>
 80095d0:	45a0      	cmp	r8, r4
 80095d2:	d1f5      	bne.n	80095c0 <__s2b+0x4c>
 80095d4:	f1a5 0408 	sub.w	r4, r5, #8
 80095d8:	444c      	add	r4, r9
 80095da:	1b2d      	subs	r5, r5, r4
 80095dc:	1963      	adds	r3, r4, r5
 80095de:	42bb      	cmp	r3, r7
 80095e0:	db04      	blt.n	80095ec <__s2b+0x78>
 80095e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095e6:	340a      	adds	r4, #10
 80095e8:	2509      	movs	r5, #9
 80095ea:	e7f6      	b.n	80095da <__s2b+0x66>
 80095ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095f0:	4601      	mov	r1, r0
 80095f2:	220a      	movs	r2, #10
 80095f4:	4630      	mov	r0, r6
 80095f6:	3b30      	subs	r3, #48	@ 0x30
 80095f8:	f7ff ff74 	bl	80094e4 <__multadd>
 80095fc:	e7ee      	b.n	80095dc <__s2b+0x68>
 80095fe:	bf00      	nop
 8009600:	0800c4e9 	.word	0x0800c4e9
 8009604:	0800c4fa 	.word	0x0800c4fa

08009608 <__hi0bits>:
 8009608:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800960c:	4603      	mov	r3, r0
 800960e:	bf36      	itet	cc
 8009610:	0403      	lslcc	r3, r0, #16
 8009612:	2000      	movcs	r0, #0
 8009614:	2010      	movcc	r0, #16
 8009616:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800961a:	bf3c      	itt	cc
 800961c:	021b      	lslcc	r3, r3, #8
 800961e:	3008      	addcc	r0, #8
 8009620:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009624:	bf3c      	itt	cc
 8009626:	011b      	lslcc	r3, r3, #4
 8009628:	3004      	addcc	r0, #4
 800962a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800962e:	bf3c      	itt	cc
 8009630:	009b      	lslcc	r3, r3, #2
 8009632:	3002      	addcc	r0, #2
 8009634:	2b00      	cmp	r3, #0
 8009636:	db05      	blt.n	8009644 <__hi0bits+0x3c>
 8009638:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800963c:	f100 0001 	add.w	r0, r0, #1
 8009640:	bf08      	it	eq
 8009642:	2020      	moveq	r0, #32
 8009644:	4770      	bx	lr

08009646 <__lo0bits>:
 8009646:	6803      	ldr	r3, [r0, #0]
 8009648:	4602      	mov	r2, r0
 800964a:	f013 0007 	ands.w	r0, r3, #7
 800964e:	d00b      	beq.n	8009668 <__lo0bits+0x22>
 8009650:	07d9      	lsls	r1, r3, #31
 8009652:	d421      	bmi.n	8009698 <__lo0bits+0x52>
 8009654:	0798      	lsls	r0, r3, #30
 8009656:	bf47      	ittee	mi
 8009658:	085b      	lsrmi	r3, r3, #1
 800965a:	2001      	movmi	r0, #1
 800965c:	089b      	lsrpl	r3, r3, #2
 800965e:	2002      	movpl	r0, #2
 8009660:	bf4c      	ite	mi
 8009662:	6013      	strmi	r3, [r2, #0]
 8009664:	6013      	strpl	r3, [r2, #0]
 8009666:	4770      	bx	lr
 8009668:	b299      	uxth	r1, r3
 800966a:	b909      	cbnz	r1, 8009670 <__lo0bits+0x2a>
 800966c:	0c1b      	lsrs	r3, r3, #16
 800966e:	2010      	movs	r0, #16
 8009670:	b2d9      	uxtb	r1, r3
 8009672:	b909      	cbnz	r1, 8009678 <__lo0bits+0x32>
 8009674:	3008      	adds	r0, #8
 8009676:	0a1b      	lsrs	r3, r3, #8
 8009678:	0719      	lsls	r1, r3, #28
 800967a:	bf04      	itt	eq
 800967c:	091b      	lsreq	r3, r3, #4
 800967e:	3004      	addeq	r0, #4
 8009680:	0799      	lsls	r1, r3, #30
 8009682:	bf04      	itt	eq
 8009684:	089b      	lsreq	r3, r3, #2
 8009686:	3002      	addeq	r0, #2
 8009688:	07d9      	lsls	r1, r3, #31
 800968a:	d403      	bmi.n	8009694 <__lo0bits+0x4e>
 800968c:	085b      	lsrs	r3, r3, #1
 800968e:	f100 0001 	add.w	r0, r0, #1
 8009692:	d003      	beq.n	800969c <__lo0bits+0x56>
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	4770      	bx	lr
 8009698:	2000      	movs	r0, #0
 800969a:	4770      	bx	lr
 800969c:	2020      	movs	r0, #32
 800969e:	4770      	bx	lr

080096a0 <__i2b>:
 80096a0:	b510      	push	{r4, lr}
 80096a2:	460c      	mov	r4, r1
 80096a4:	2101      	movs	r1, #1
 80096a6:	f7ff febb 	bl	8009420 <_Balloc>
 80096aa:	4602      	mov	r2, r0
 80096ac:	b928      	cbnz	r0, 80096ba <__i2b+0x1a>
 80096ae:	4b05      	ldr	r3, [pc, #20]	@ (80096c4 <__i2b+0x24>)
 80096b0:	f240 1145 	movw	r1, #325	@ 0x145
 80096b4:	4804      	ldr	r0, [pc, #16]	@ (80096c8 <__i2b+0x28>)
 80096b6:	f001 fe13 	bl	800b2e0 <__assert_func>
 80096ba:	2301      	movs	r3, #1
 80096bc:	6144      	str	r4, [r0, #20]
 80096be:	6103      	str	r3, [r0, #16]
 80096c0:	bd10      	pop	{r4, pc}
 80096c2:	bf00      	nop
 80096c4:	0800c4e9 	.word	0x0800c4e9
 80096c8:	0800c4fa 	.word	0x0800c4fa

080096cc <__multiply>:
 80096cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d0:	4614      	mov	r4, r2
 80096d2:	690a      	ldr	r2, [r1, #16]
 80096d4:	460f      	mov	r7, r1
 80096d6:	b085      	sub	sp, #20
 80096d8:	6923      	ldr	r3, [r4, #16]
 80096da:	429a      	cmp	r2, r3
 80096dc:	bfa2      	ittt	ge
 80096de:	4623      	movge	r3, r4
 80096e0:	460c      	movge	r4, r1
 80096e2:	461f      	movge	r7, r3
 80096e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80096e8:	68a3      	ldr	r3, [r4, #8]
 80096ea:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80096ee:	6861      	ldr	r1, [r4, #4]
 80096f0:	eb0a 0609 	add.w	r6, sl, r9
 80096f4:	42b3      	cmp	r3, r6
 80096f6:	bfb8      	it	lt
 80096f8:	3101      	addlt	r1, #1
 80096fa:	f7ff fe91 	bl	8009420 <_Balloc>
 80096fe:	b930      	cbnz	r0, 800970e <__multiply+0x42>
 8009700:	4602      	mov	r2, r0
 8009702:	4b45      	ldr	r3, [pc, #276]	@ (8009818 <__multiply+0x14c>)
 8009704:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009708:	4844      	ldr	r0, [pc, #272]	@ (800981c <__multiply+0x150>)
 800970a:	f001 fde9 	bl	800b2e0 <__assert_func>
 800970e:	f100 0514 	add.w	r5, r0, #20
 8009712:	2200      	movs	r2, #0
 8009714:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009718:	462b      	mov	r3, r5
 800971a:	4543      	cmp	r3, r8
 800971c:	d321      	bcc.n	8009762 <__multiply+0x96>
 800971e:	f107 0114 	add.w	r1, r7, #20
 8009722:	f104 0214 	add.w	r2, r4, #20
 8009726:	f104 0715 	add.w	r7, r4, #21
 800972a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800972e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009732:	9302      	str	r3, [sp, #8]
 8009734:	1b13      	subs	r3, r2, r4
 8009736:	3b15      	subs	r3, #21
 8009738:	f023 0303 	bic.w	r3, r3, #3
 800973c:	3304      	adds	r3, #4
 800973e:	42ba      	cmp	r2, r7
 8009740:	bf38      	it	cc
 8009742:	2304      	movcc	r3, #4
 8009744:	9301      	str	r3, [sp, #4]
 8009746:	9b02      	ldr	r3, [sp, #8]
 8009748:	9103      	str	r1, [sp, #12]
 800974a:	428b      	cmp	r3, r1
 800974c:	d80c      	bhi.n	8009768 <__multiply+0x9c>
 800974e:	2e00      	cmp	r6, #0
 8009750:	dd03      	ble.n	800975a <__multiply+0x8e>
 8009752:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009756:	2b00      	cmp	r3, #0
 8009758:	d05b      	beq.n	8009812 <__multiply+0x146>
 800975a:	6106      	str	r6, [r0, #16]
 800975c:	b005      	add	sp, #20
 800975e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009762:	f843 2b04 	str.w	r2, [r3], #4
 8009766:	e7d8      	b.n	800971a <__multiply+0x4e>
 8009768:	f8b1 a000 	ldrh.w	sl, [r1]
 800976c:	f1ba 0f00 	cmp.w	sl, #0
 8009770:	d024      	beq.n	80097bc <__multiply+0xf0>
 8009772:	f104 0e14 	add.w	lr, r4, #20
 8009776:	46a9      	mov	r9, r5
 8009778:	f04f 0c00 	mov.w	ip, #0
 800977c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009780:	f8d9 3000 	ldr.w	r3, [r9]
 8009784:	fa1f fb87 	uxth.w	fp, r7
 8009788:	4572      	cmp	r2, lr
 800978a:	b29b      	uxth	r3, r3
 800978c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009790:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009794:	f8d9 7000 	ldr.w	r7, [r9]
 8009798:	4463      	add	r3, ip
 800979a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800979e:	fb0a c70b 	mla	r7, sl, fp, ip
 80097a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80097ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097b0:	f849 3b04 	str.w	r3, [r9], #4
 80097b4:	d8e2      	bhi.n	800977c <__multiply+0xb0>
 80097b6:	9b01      	ldr	r3, [sp, #4]
 80097b8:	f845 c003 	str.w	ip, [r5, r3]
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	3104      	adds	r1, #4
 80097c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80097c4:	f1b9 0f00 	cmp.w	r9, #0
 80097c8:	d021      	beq.n	800980e <__multiply+0x142>
 80097ca:	682b      	ldr	r3, [r5, #0]
 80097cc:	f104 0c14 	add.w	ip, r4, #20
 80097d0:	46ae      	mov	lr, r5
 80097d2:	f04f 0a00 	mov.w	sl, #0
 80097d6:	f8bc b000 	ldrh.w	fp, [ip]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80097e0:	fb09 770b 	mla	r7, r9, fp, r7
 80097e4:	4457      	add	r7, sl
 80097e6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097ea:	f84e 3b04 	str.w	r3, [lr], #4
 80097ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097f6:	f8be 3000 	ldrh.w	r3, [lr]
 80097fa:	4562      	cmp	r2, ip
 80097fc:	fb09 330a 	mla	r3, r9, sl, r3
 8009800:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009808:	d8e5      	bhi.n	80097d6 <__multiply+0x10a>
 800980a:	9f01      	ldr	r7, [sp, #4]
 800980c:	51eb      	str	r3, [r5, r7]
 800980e:	3504      	adds	r5, #4
 8009810:	e799      	b.n	8009746 <__multiply+0x7a>
 8009812:	3e01      	subs	r6, #1
 8009814:	e79b      	b.n	800974e <__multiply+0x82>
 8009816:	bf00      	nop
 8009818:	0800c4e9 	.word	0x0800c4e9
 800981c:	0800c4fa 	.word	0x0800c4fa

08009820 <__pow5mult>:
 8009820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009824:	4615      	mov	r5, r2
 8009826:	f012 0203 	ands.w	r2, r2, #3
 800982a:	4607      	mov	r7, r0
 800982c:	460e      	mov	r6, r1
 800982e:	d007      	beq.n	8009840 <__pow5mult+0x20>
 8009830:	3a01      	subs	r2, #1
 8009832:	4c25      	ldr	r4, [pc, #148]	@ (80098c8 <__pow5mult+0xa8>)
 8009834:	2300      	movs	r3, #0
 8009836:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800983a:	f7ff fe53 	bl	80094e4 <__multadd>
 800983e:	4606      	mov	r6, r0
 8009840:	10ad      	asrs	r5, r5, #2
 8009842:	d03d      	beq.n	80098c0 <__pow5mult+0xa0>
 8009844:	69fc      	ldr	r4, [r7, #28]
 8009846:	b97c      	cbnz	r4, 8009868 <__pow5mult+0x48>
 8009848:	2010      	movs	r0, #16
 800984a:	f7ff fd33 	bl	80092b4 <malloc>
 800984e:	4602      	mov	r2, r0
 8009850:	61f8      	str	r0, [r7, #28]
 8009852:	b928      	cbnz	r0, 8009860 <__pow5mult+0x40>
 8009854:	4b1d      	ldr	r3, [pc, #116]	@ (80098cc <__pow5mult+0xac>)
 8009856:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800985a:	481d      	ldr	r0, [pc, #116]	@ (80098d0 <__pow5mult+0xb0>)
 800985c:	f001 fd40 	bl	800b2e0 <__assert_func>
 8009860:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009864:	6004      	str	r4, [r0, #0]
 8009866:	60c4      	str	r4, [r0, #12]
 8009868:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800986c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009870:	b94c      	cbnz	r4, 8009886 <__pow5mult+0x66>
 8009872:	f240 2171 	movw	r1, #625	@ 0x271
 8009876:	4638      	mov	r0, r7
 8009878:	f7ff ff12 	bl	80096a0 <__i2b>
 800987c:	2300      	movs	r3, #0
 800987e:	4604      	mov	r4, r0
 8009880:	f8c8 0008 	str.w	r0, [r8, #8]
 8009884:	6003      	str	r3, [r0, #0]
 8009886:	f04f 0900 	mov.w	r9, #0
 800988a:	07eb      	lsls	r3, r5, #31
 800988c:	d50a      	bpl.n	80098a4 <__pow5mult+0x84>
 800988e:	4631      	mov	r1, r6
 8009890:	4622      	mov	r2, r4
 8009892:	4638      	mov	r0, r7
 8009894:	f7ff ff1a 	bl	80096cc <__multiply>
 8009898:	4680      	mov	r8, r0
 800989a:	4631      	mov	r1, r6
 800989c:	4638      	mov	r0, r7
 800989e:	4646      	mov	r6, r8
 80098a0:	f7ff fdfe 	bl	80094a0 <_Bfree>
 80098a4:	106d      	asrs	r5, r5, #1
 80098a6:	d00b      	beq.n	80098c0 <__pow5mult+0xa0>
 80098a8:	6820      	ldr	r0, [r4, #0]
 80098aa:	b938      	cbnz	r0, 80098bc <__pow5mult+0x9c>
 80098ac:	4622      	mov	r2, r4
 80098ae:	4621      	mov	r1, r4
 80098b0:	4638      	mov	r0, r7
 80098b2:	f7ff ff0b 	bl	80096cc <__multiply>
 80098b6:	6020      	str	r0, [r4, #0]
 80098b8:	f8c0 9000 	str.w	r9, [r0]
 80098bc:	4604      	mov	r4, r0
 80098be:	e7e4      	b.n	800988a <__pow5mult+0x6a>
 80098c0:	4630      	mov	r0, r6
 80098c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098c6:	bf00      	nop
 80098c8:	0800c554 	.word	0x0800c554
 80098cc:	0800c47a 	.word	0x0800c47a
 80098d0:	0800c4fa 	.word	0x0800c4fa

080098d4 <__lshift>:
 80098d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d8:	460c      	mov	r4, r1
 80098da:	4607      	mov	r7, r0
 80098dc:	4691      	mov	r9, r2
 80098de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098e2:	6923      	ldr	r3, [r4, #16]
 80098e4:	6849      	ldr	r1, [r1, #4]
 80098e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098ea:	68a3      	ldr	r3, [r4, #8]
 80098ec:	f108 0601 	add.w	r6, r8, #1
 80098f0:	42b3      	cmp	r3, r6
 80098f2:	db0b      	blt.n	800990c <__lshift+0x38>
 80098f4:	4638      	mov	r0, r7
 80098f6:	f7ff fd93 	bl	8009420 <_Balloc>
 80098fa:	4605      	mov	r5, r0
 80098fc:	b948      	cbnz	r0, 8009912 <__lshift+0x3e>
 80098fe:	4602      	mov	r2, r0
 8009900:	4b28      	ldr	r3, [pc, #160]	@ (80099a4 <__lshift+0xd0>)
 8009902:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009906:	4828      	ldr	r0, [pc, #160]	@ (80099a8 <__lshift+0xd4>)
 8009908:	f001 fcea 	bl	800b2e0 <__assert_func>
 800990c:	3101      	adds	r1, #1
 800990e:	005b      	lsls	r3, r3, #1
 8009910:	e7ee      	b.n	80098f0 <__lshift+0x1c>
 8009912:	2300      	movs	r3, #0
 8009914:	f100 0114 	add.w	r1, r0, #20
 8009918:	f100 0210 	add.w	r2, r0, #16
 800991c:	4618      	mov	r0, r3
 800991e:	4553      	cmp	r3, sl
 8009920:	db33      	blt.n	800998a <__lshift+0xb6>
 8009922:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009926:	f104 0314 	add.w	r3, r4, #20
 800992a:	6920      	ldr	r0, [r4, #16]
 800992c:	f019 091f 	ands.w	r9, r9, #31
 8009930:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009934:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009938:	d02b      	beq.n	8009992 <__lshift+0xbe>
 800993a:	f1c9 0e20 	rsb	lr, r9, #32
 800993e:	468a      	mov	sl, r1
 8009940:	2200      	movs	r2, #0
 8009942:	6818      	ldr	r0, [r3, #0]
 8009944:	fa00 f009 	lsl.w	r0, r0, r9
 8009948:	4310      	orrs	r0, r2
 800994a:	f84a 0b04 	str.w	r0, [sl], #4
 800994e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009952:	459c      	cmp	ip, r3
 8009954:	fa22 f20e 	lsr.w	r2, r2, lr
 8009958:	d8f3      	bhi.n	8009942 <__lshift+0x6e>
 800995a:	ebac 0304 	sub.w	r3, ip, r4
 800995e:	f104 0015 	add.w	r0, r4, #21
 8009962:	3b15      	subs	r3, #21
 8009964:	f023 0303 	bic.w	r3, r3, #3
 8009968:	3304      	adds	r3, #4
 800996a:	4584      	cmp	ip, r0
 800996c:	bf38      	it	cc
 800996e:	2304      	movcc	r3, #4
 8009970:	50ca      	str	r2, [r1, r3]
 8009972:	b10a      	cbz	r2, 8009978 <__lshift+0xa4>
 8009974:	f108 0602 	add.w	r6, r8, #2
 8009978:	3e01      	subs	r6, #1
 800997a:	4638      	mov	r0, r7
 800997c:	4621      	mov	r1, r4
 800997e:	612e      	str	r6, [r5, #16]
 8009980:	f7ff fd8e 	bl	80094a0 <_Bfree>
 8009984:	4628      	mov	r0, r5
 8009986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998a:	3301      	adds	r3, #1
 800998c:	f842 0f04 	str.w	r0, [r2, #4]!
 8009990:	e7c5      	b.n	800991e <__lshift+0x4a>
 8009992:	3904      	subs	r1, #4
 8009994:	f853 2b04 	ldr.w	r2, [r3], #4
 8009998:	459c      	cmp	ip, r3
 800999a:	f841 2f04 	str.w	r2, [r1, #4]!
 800999e:	d8f9      	bhi.n	8009994 <__lshift+0xc0>
 80099a0:	e7ea      	b.n	8009978 <__lshift+0xa4>
 80099a2:	bf00      	nop
 80099a4:	0800c4e9 	.word	0x0800c4e9
 80099a8:	0800c4fa 	.word	0x0800c4fa

080099ac <__mcmp>:
 80099ac:	4603      	mov	r3, r0
 80099ae:	690a      	ldr	r2, [r1, #16]
 80099b0:	6900      	ldr	r0, [r0, #16]
 80099b2:	1a80      	subs	r0, r0, r2
 80099b4:	b530      	push	{r4, r5, lr}
 80099b6:	d10e      	bne.n	80099d6 <__mcmp+0x2a>
 80099b8:	3314      	adds	r3, #20
 80099ba:	3114      	adds	r1, #20
 80099bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099cc:	4295      	cmp	r5, r2
 80099ce:	d003      	beq.n	80099d8 <__mcmp+0x2c>
 80099d0:	d205      	bcs.n	80099de <__mcmp+0x32>
 80099d2:	f04f 30ff 	mov.w	r0, #4294967295
 80099d6:	bd30      	pop	{r4, r5, pc}
 80099d8:	42a3      	cmp	r3, r4
 80099da:	d3f3      	bcc.n	80099c4 <__mcmp+0x18>
 80099dc:	e7fb      	b.n	80099d6 <__mcmp+0x2a>
 80099de:	2001      	movs	r0, #1
 80099e0:	e7f9      	b.n	80099d6 <__mcmp+0x2a>
	...

080099e4 <__mdiff>:
 80099e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	4689      	mov	r9, r1
 80099ea:	4606      	mov	r6, r0
 80099ec:	4611      	mov	r1, r2
 80099ee:	4614      	mov	r4, r2
 80099f0:	4648      	mov	r0, r9
 80099f2:	f7ff ffdb 	bl	80099ac <__mcmp>
 80099f6:	1e05      	subs	r5, r0, #0
 80099f8:	d112      	bne.n	8009a20 <__mdiff+0x3c>
 80099fa:	4629      	mov	r1, r5
 80099fc:	4630      	mov	r0, r6
 80099fe:	f7ff fd0f 	bl	8009420 <_Balloc>
 8009a02:	4602      	mov	r2, r0
 8009a04:	b928      	cbnz	r0, 8009a12 <__mdiff+0x2e>
 8009a06:	4b41      	ldr	r3, [pc, #260]	@ (8009b0c <__mdiff+0x128>)
 8009a08:	f240 2137 	movw	r1, #567	@ 0x237
 8009a0c:	4840      	ldr	r0, [pc, #256]	@ (8009b10 <__mdiff+0x12c>)
 8009a0e:	f001 fc67 	bl	800b2e0 <__assert_func>
 8009a12:	2301      	movs	r3, #1
 8009a14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a18:	4610      	mov	r0, r2
 8009a1a:	b003      	add	sp, #12
 8009a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a20:	bfbc      	itt	lt
 8009a22:	464b      	movlt	r3, r9
 8009a24:	46a1      	movlt	r9, r4
 8009a26:	4630      	mov	r0, r6
 8009a28:	bfb8      	it	lt
 8009a2a:	2501      	movlt	r5, #1
 8009a2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a30:	bfb4      	ite	lt
 8009a32:	461c      	movlt	r4, r3
 8009a34:	2500      	movge	r5, #0
 8009a36:	f7ff fcf3 	bl	8009420 <_Balloc>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	b918      	cbnz	r0, 8009a46 <__mdiff+0x62>
 8009a3e:	4b33      	ldr	r3, [pc, #204]	@ (8009b0c <__mdiff+0x128>)
 8009a40:	f240 2145 	movw	r1, #581	@ 0x245
 8009a44:	e7e2      	b.n	8009a0c <__mdiff+0x28>
 8009a46:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a4a:	f104 0e14 	add.w	lr, r4, #20
 8009a4e:	6926      	ldr	r6, [r4, #16]
 8009a50:	f100 0b14 	add.w	fp, r0, #20
 8009a54:	60c5      	str	r5, [r0, #12]
 8009a56:	f109 0514 	add.w	r5, r9, #20
 8009a5a:	f109 0310 	add.w	r3, r9, #16
 8009a5e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a62:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a66:	46d9      	mov	r9, fp
 8009a68:	f04f 0c00 	mov.w	ip, #0
 8009a6c:	9301      	str	r3, [sp, #4]
 8009a6e:	9b01      	ldr	r3, [sp, #4]
 8009a70:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a74:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a78:	4576      	cmp	r6, lr
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	fa1f f38a 	uxth.w	r3, sl
 8009a80:	4619      	mov	r1, r3
 8009a82:	b283      	uxth	r3, r0
 8009a84:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8009a88:	eba1 0303 	sub.w	r3, r1, r3
 8009a8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a90:	4463      	add	r3, ip
 8009a92:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009aa0:	f849 3b04 	str.w	r3, [r9], #4
 8009aa4:	d8e3      	bhi.n	8009a6e <__mdiff+0x8a>
 8009aa6:	1b33      	subs	r3, r6, r4
 8009aa8:	3415      	adds	r4, #21
 8009aaa:	3b15      	subs	r3, #21
 8009aac:	f023 0303 	bic.w	r3, r3, #3
 8009ab0:	3304      	adds	r3, #4
 8009ab2:	42a6      	cmp	r6, r4
 8009ab4:	bf38      	it	cc
 8009ab6:	2304      	movcc	r3, #4
 8009ab8:	441d      	add	r5, r3
 8009aba:	445b      	add	r3, fp
 8009abc:	462c      	mov	r4, r5
 8009abe:	461e      	mov	r6, r3
 8009ac0:	4544      	cmp	r4, r8
 8009ac2:	d30e      	bcc.n	8009ae2 <__mdiff+0xfe>
 8009ac4:	f108 0103 	add.w	r1, r8, #3
 8009ac8:	1b49      	subs	r1, r1, r5
 8009aca:	3d03      	subs	r5, #3
 8009acc:	f021 0103 	bic.w	r1, r1, #3
 8009ad0:	45a8      	cmp	r8, r5
 8009ad2:	bf38      	it	cc
 8009ad4:	2100      	movcc	r1, #0
 8009ad6:	440b      	add	r3, r1
 8009ad8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009adc:	b199      	cbz	r1, 8009b06 <__mdiff+0x122>
 8009ade:	6117      	str	r7, [r2, #16]
 8009ae0:	e79a      	b.n	8009a18 <__mdiff+0x34>
 8009ae2:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ae6:	46e6      	mov	lr, ip
 8009ae8:	fa1f fc81 	uxth.w	ip, r1
 8009aec:	0c08      	lsrs	r0, r1, #16
 8009aee:	4471      	add	r1, lr
 8009af0:	44f4      	add	ip, lr
 8009af2:	b289      	uxth	r1, r1
 8009af4:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009af8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009afc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b00:	f846 1b04 	str.w	r1, [r6], #4
 8009b04:	e7dc      	b.n	8009ac0 <__mdiff+0xdc>
 8009b06:	3f01      	subs	r7, #1
 8009b08:	e7e6      	b.n	8009ad8 <__mdiff+0xf4>
 8009b0a:	bf00      	nop
 8009b0c:	0800c4e9 	.word	0x0800c4e9
 8009b10:	0800c4fa 	.word	0x0800c4fa

08009b14 <__ulp>:
 8009b14:	b082      	sub	sp, #8
 8009b16:	4b11      	ldr	r3, [pc, #68]	@ (8009b5c <__ulp+0x48>)
 8009b18:	ed8d 0b00 	vstr	d0, [sp]
 8009b1c:	9a01      	ldr	r2, [sp, #4]
 8009b1e:	4013      	ands	r3, r2
 8009b20:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	dc08      	bgt.n	8009b3a <__ulp+0x26>
 8009b28:	425b      	negs	r3, r3
 8009b2a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009b2e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b32:	da04      	bge.n	8009b3e <__ulp+0x2a>
 8009b34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009b38:	4113      	asrs	r3, r2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	e008      	b.n	8009b50 <__ulp+0x3c>
 8009b3e:	f1a2 0314 	sub.w	r3, r2, #20
 8009b42:	2b1e      	cmp	r3, #30
 8009b44:	bfd6      	itet	le
 8009b46:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009b4a:	2201      	movgt	r2, #1
 8009b4c:	40da      	lsrle	r2, r3
 8009b4e:	2300      	movs	r3, #0
 8009b50:	4619      	mov	r1, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	ec41 0b10 	vmov	d0, r0, r1
 8009b58:	b002      	add	sp, #8
 8009b5a:	4770      	bx	lr
 8009b5c:	7ff00000 	.word	0x7ff00000

08009b60 <__b2d>:
 8009b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b64:	6906      	ldr	r6, [r0, #16]
 8009b66:	f100 0814 	add.w	r8, r0, #20
 8009b6a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009b6e:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b72:	1f37      	subs	r7, r6, #4
 8009b74:	4610      	mov	r0, r2
 8009b76:	f7ff fd47 	bl	8009608 <__hi0bits>
 8009b7a:	f1c0 0320 	rsb	r3, r0, #32
 8009b7e:	280a      	cmp	r0, #10
 8009b80:	600b      	str	r3, [r1, #0]
 8009b82:	491d      	ldr	r1, [pc, #116]	@ (8009bf8 <__b2d+0x98>)
 8009b84:	dc16      	bgt.n	8009bb4 <__b2d+0x54>
 8009b86:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b8a:	45b8      	cmp	r8, r7
 8009b8c:	f100 0015 	add.w	r0, r0, #21
 8009b90:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b94:	fa02 f000 	lsl.w	r0, r2, r0
 8009b98:	ea43 0501 	orr.w	r5, r3, r1
 8009b9c:	bf34      	ite	cc
 8009b9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009ba2:	2300      	movcs	r3, #0
 8009ba4:	fa23 f30c 	lsr.w	r3, r3, ip
 8009ba8:	4303      	orrs	r3, r0
 8009baa:	461c      	mov	r4, r3
 8009bac:	ec45 4b10 	vmov	d0, r4, r5
 8009bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bb4:	45b8      	cmp	r8, r7
 8009bb6:	bf3a      	itte	cc
 8009bb8:	f1a6 0708 	subcc.w	r7, r6, #8
 8009bbc:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009bc0:	2300      	movcs	r3, #0
 8009bc2:	380b      	subs	r0, #11
 8009bc4:	d014      	beq.n	8009bf0 <__b2d+0x90>
 8009bc6:	f1c0 0120 	rsb	r1, r0, #32
 8009bca:	4082      	lsls	r2, r0
 8009bcc:	4547      	cmp	r7, r8
 8009bce:	fa23 f401 	lsr.w	r4, r3, r1
 8009bd2:	fa03 f300 	lsl.w	r3, r3, r0
 8009bd6:	ea42 0204 	orr.w	r2, r2, r4
 8009bda:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009bde:	bf8c      	ite	hi
 8009be0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009be4:	2200      	movls	r2, #0
 8009be6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009bea:	40ca      	lsrs	r2, r1
 8009bec:	4313      	orrs	r3, r2
 8009bee:	e7dc      	b.n	8009baa <__b2d+0x4a>
 8009bf0:	ea42 0501 	orr.w	r5, r2, r1
 8009bf4:	e7d9      	b.n	8009baa <__b2d+0x4a>
 8009bf6:	bf00      	nop
 8009bf8:	3ff00000 	.word	0x3ff00000

08009bfc <__d2b>:
 8009bfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009c00:	460f      	mov	r7, r1
 8009c02:	2101      	movs	r1, #1
 8009c04:	4616      	mov	r6, r2
 8009c06:	ec59 8b10 	vmov	r8, r9, d0
 8009c0a:	f7ff fc09 	bl	8009420 <_Balloc>
 8009c0e:	4604      	mov	r4, r0
 8009c10:	b930      	cbnz	r0, 8009c20 <__d2b+0x24>
 8009c12:	4602      	mov	r2, r0
 8009c14:	4b23      	ldr	r3, [pc, #140]	@ (8009ca4 <__d2b+0xa8>)
 8009c16:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c1a:	4823      	ldr	r0, [pc, #140]	@ (8009ca8 <__d2b+0xac>)
 8009c1c:	f001 fb60 	bl	800b2e0 <__assert_func>
 8009c20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c28:	b10d      	cbz	r5, 8009c2e <__d2b+0x32>
 8009c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	f1b8 0300 	subs.w	r3, r8, #0
 8009c34:	d023      	beq.n	8009c7e <__d2b+0x82>
 8009c36:	4668      	mov	r0, sp
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	f7ff fd04 	bl	8009646 <__lo0bits>
 8009c3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c42:	b1d0      	cbz	r0, 8009c7a <__d2b+0x7e>
 8009c44:	f1c0 0320 	rsb	r3, r0, #32
 8009c48:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4c:	40c2      	lsrs	r2, r0
 8009c4e:	430b      	orrs	r3, r1
 8009c50:	9201      	str	r2, [sp, #4]
 8009c52:	6163      	str	r3, [r4, #20]
 8009c54:	9b01      	ldr	r3, [sp, #4]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	61a3      	str	r3, [r4, #24]
 8009c5a:	bf0c      	ite	eq
 8009c5c:	2201      	moveq	r2, #1
 8009c5e:	2202      	movne	r2, #2
 8009c60:	6122      	str	r2, [r4, #16]
 8009c62:	b1a5      	cbz	r5, 8009c8e <__d2b+0x92>
 8009c64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c68:	4405      	add	r5, r0
 8009c6a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c6e:	603d      	str	r5, [r7, #0]
 8009c70:	6030      	str	r0, [r6, #0]
 8009c72:	4620      	mov	r0, r4
 8009c74:	b003      	add	sp, #12
 8009c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c7a:	6161      	str	r1, [r4, #20]
 8009c7c:	e7ea      	b.n	8009c54 <__d2b+0x58>
 8009c7e:	a801      	add	r0, sp, #4
 8009c80:	f7ff fce1 	bl	8009646 <__lo0bits>
 8009c84:	9b01      	ldr	r3, [sp, #4]
 8009c86:	3020      	adds	r0, #32
 8009c88:	2201      	movs	r2, #1
 8009c8a:	6163      	str	r3, [r4, #20]
 8009c8c:	e7e8      	b.n	8009c60 <__d2b+0x64>
 8009c8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c96:	6038      	str	r0, [r7, #0]
 8009c98:	6918      	ldr	r0, [r3, #16]
 8009c9a:	f7ff fcb5 	bl	8009608 <__hi0bits>
 8009c9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ca2:	e7e5      	b.n	8009c70 <__d2b+0x74>
 8009ca4:	0800c4e9 	.word	0x0800c4e9
 8009ca8:	0800c4fa 	.word	0x0800c4fa

08009cac <__ratio>:
 8009cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb0:	b085      	sub	sp, #20
 8009cb2:	e9cd 1000 	strd	r1, r0, [sp]
 8009cb6:	a902      	add	r1, sp, #8
 8009cb8:	f7ff ff52 	bl	8009b60 <__b2d>
 8009cbc:	a903      	add	r1, sp, #12
 8009cbe:	9800      	ldr	r0, [sp, #0]
 8009cc0:	ec55 4b10 	vmov	r4, r5, d0
 8009cc4:	f7ff ff4c 	bl	8009b60 <__b2d>
 8009cc8:	9b01      	ldr	r3, [sp, #4]
 8009cca:	462f      	mov	r7, r5
 8009ccc:	4620      	mov	r0, r4
 8009cce:	6919      	ldr	r1, [r3, #16]
 8009cd0:	9b00      	ldr	r3, [sp, #0]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	1ac9      	subs	r1, r1, r3
 8009cd6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009cda:	ec5b ab10 	vmov	sl, fp, d0
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	46d9      	mov	r9, fp
 8009ce2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	bfcd      	iteet	gt
 8009cea:	462a      	movgt	r2, r5
 8009cec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cf0:	465a      	movle	r2, fp
 8009cf2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cf6:	bfd8      	it	le
 8009cf8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009cfc:	4652      	mov	r2, sl
 8009cfe:	4639      	mov	r1, r7
 8009d00:	464b      	mov	r3, r9
 8009d02:	f7f6 fdb7 	bl	8000874 <__aeabi_ddiv>
 8009d06:	ec41 0b10 	vmov	d0, r0, r1
 8009d0a:	b005      	add	sp, #20
 8009d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d10 <__copybits>:
 8009d10:	3901      	subs	r1, #1
 8009d12:	f102 0314 	add.w	r3, r2, #20
 8009d16:	1149      	asrs	r1, r1, #5
 8009d18:	b570      	push	{r4, r5, r6, lr}
 8009d1a:	3101      	adds	r1, #1
 8009d1c:	6914      	ldr	r4, [r2, #16]
 8009d1e:	1f05      	subs	r5, r0, #4
 8009d20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	d30c      	bcc.n	8009d46 <__copybits+0x36>
 8009d2c:	1aa3      	subs	r3, r4, r2
 8009d2e:	3211      	adds	r2, #17
 8009d30:	3b11      	subs	r3, #17
 8009d32:	f023 0303 	bic.w	r3, r3, #3
 8009d36:	42a2      	cmp	r2, r4
 8009d38:	bf88      	it	hi
 8009d3a:	2300      	movhi	r3, #0
 8009d3c:	4418      	add	r0, r3
 8009d3e:	2300      	movs	r3, #0
 8009d40:	4288      	cmp	r0, r1
 8009d42:	d305      	bcc.n	8009d50 <__copybits+0x40>
 8009d44:	bd70      	pop	{r4, r5, r6, pc}
 8009d46:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d4e:	e7eb      	b.n	8009d28 <__copybits+0x18>
 8009d50:	f840 3b04 	str.w	r3, [r0], #4
 8009d54:	e7f4      	b.n	8009d40 <__copybits+0x30>

08009d56 <__any_on>:
 8009d56:	f100 0214 	add.w	r2, r0, #20
 8009d5a:	114b      	asrs	r3, r1, #5
 8009d5c:	6900      	ldr	r0, [r0, #16]
 8009d5e:	4298      	cmp	r0, r3
 8009d60:	b510      	push	{r4, lr}
 8009d62:	db11      	blt.n	8009d88 <__any_on+0x32>
 8009d64:	dd0a      	ble.n	8009d7c <__any_on+0x26>
 8009d66:	f011 011f 	ands.w	r1, r1, #31
 8009d6a:	d007      	beq.n	8009d7c <__any_on+0x26>
 8009d6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d70:	fa24 f001 	lsr.w	r0, r4, r1
 8009d74:	fa00 f101 	lsl.w	r1, r0, r1
 8009d78:	428c      	cmp	r4, r1
 8009d7a:	d10b      	bne.n	8009d94 <__any_on+0x3e>
 8009d7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d803      	bhi.n	8009d8c <__any_on+0x36>
 8009d84:	2000      	movs	r0, #0
 8009d86:	bd10      	pop	{r4, pc}
 8009d88:	4603      	mov	r3, r0
 8009d8a:	e7f7      	b.n	8009d7c <__any_on+0x26>
 8009d8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d90:	2900      	cmp	r1, #0
 8009d92:	d0f5      	beq.n	8009d80 <__any_on+0x2a>
 8009d94:	2001      	movs	r0, #1
 8009d96:	e7f6      	b.n	8009d86 <__any_on+0x30>

08009d98 <sulp>:
 8009d98:	b570      	push	{r4, r5, r6, lr}
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	4616      	mov	r6, r2
 8009da0:	ec45 4b10 	vmov	d0, r4, r5
 8009da4:	f7ff feb6 	bl	8009b14 <__ulp>
 8009da8:	ec51 0b10 	vmov	r0, r1, d0
 8009dac:	b17e      	cbz	r6, 8009dce <sulp+0x36>
 8009dae:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009db2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	dd09      	ble.n	8009dce <sulp+0x36>
 8009dba:	051b      	lsls	r3, r3, #20
 8009dbc:	2400      	movs	r4, #0
 8009dbe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009dc2:	4622      	mov	r2, r4
 8009dc4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009dc8:	462b      	mov	r3, r5
 8009dca:	f7f6 fc29 	bl	8000620 <__aeabi_dmul>
 8009dce:	ec41 0b10 	vmov	d0, r0, r1
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	0000      	movs	r0, r0
	...

08009dd8 <_strtod_l>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	b09f      	sub	sp, #124	@ 0x7c
 8009dde:	460c      	mov	r4, r1
 8009de0:	f04f 0a00 	mov.w	sl, #0
 8009de4:	f04f 0b00 	mov.w	fp, #0
 8009de8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009dea:	2200      	movs	r2, #0
 8009dec:	9005      	str	r0, [sp, #20]
 8009dee:	921a      	str	r2, [sp, #104]	@ 0x68
 8009df0:	460a      	mov	r2, r1
 8009df2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009df4:	7811      	ldrb	r1, [r2, #0]
 8009df6:	292b      	cmp	r1, #43	@ 0x2b
 8009df8:	d04a      	beq.n	8009e90 <_strtod_l+0xb8>
 8009dfa:	d838      	bhi.n	8009e6e <_strtod_l+0x96>
 8009dfc:	290d      	cmp	r1, #13
 8009dfe:	d832      	bhi.n	8009e66 <_strtod_l+0x8e>
 8009e00:	2908      	cmp	r1, #8
 8009e02:	d832      	bhi.n	8009e6a <_strtod_l+0x92>
 8009e04:	2900      	cmp	r1, #0
 8009e06:	d03b      	beq.n	8009e80 <_strtod_l+0xa8>
 8009e08:	2200      	movs	r2, #0
 8009e0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e0c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009e0e:	782a      	ldrb	r2, [r5, #0]
 8009e10:	2a30      	cmp	r2, #48	@ 0x30
 8009e12:	f040 80b3 	bne.w	8009f7c <_strtod_l+0x1a4>
 8009e16:	786a      	ldrb	r2, [r5, #1]
 8009e18:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e1c:	2a58      	cmp	r2, #88	@ 0x58
 8009e1e:	d16e      	bne.n	8009efe <_strtod_l+0x126>
 8009e20:	9302      	str	r3, [sp, #8]
 8009e22:	a919      	add	r1, sp, #100	@ 0x64
 8009e24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e26:	4a90      	ldr	r2, [pc, #576]	@ (800a068 <_strtod_l+0x290>)
 8009e28:	9301      	str	r3, [sp, #4]
 8009e2a:	ab1a      	add	r3, sp, #104	@ 0x68
 8009e2c:	9805      	ldr	r0, [sp, #20]
 8009e2e:	9300      	str	r3, [sp, #0]
 8009e30:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009e32:	f001 faed 	bl	800b410 <__gethex>
 8009e36:	f010 060f 	ands.w	r6, r0, #15
 8009e3a:	4604      	mov	r4, r0
 8009e3c:	d005      	beq.n	8009e4a <_strtod_l+0x72>
 8009e3e:	2e06      	cmp	r6, #6
 8009e40:	d128      	bne.n	8009e94 <_strtod_l+0xbc>
 8009e42:	3501      	adds	r5, #1
 8009e44:	2300      	movs	r3, #0
 8009e46:	9519      	str	r5, [sp, #100]	@ 0x64
 8009e48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f040 858e 	bne.w	800a96e <_strtod_l+0xb96>
 8009e52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e54:	b1cb      	cbz	r3, 8009e8a <_strtod_l+0xb2>
 8009e56:	4652      	mov	r2, sl
 8009e58:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009e5c:	ec43 2b10 	vmov	d0, r2, r3
 8009e60:	b01f      	add	sp, #124	@ 0x7c
 8009e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e66:	2920      	cmp	r1, #32
 8009e68:	d1ce      	bne.n	8009e08 <_strtod_l+0x30>
 8009e6a:	3201      	adds	r2, #1
 8009e6c:	e7c1      	b.n	8009df2 <_strtod_l+0x1a>
 8009e6e:	292d      	cmp	r1, #45	@ 0x2d
 8009e70:	d1ca      	bne.n	8009e08 <_strtod_l+0x30>
 8009e72:	2101      	movs	r1, #1
 8009e74:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e76:	1c51      	adds	r1, r2, #1
 8009e78:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e7a:	7852      	ldrb	r2, [r2, #1]
 8009e7c:	2a00      	cmp	r2, #0
 8009e7e:	d1c5      	bne.n	8009e0c <_strtod_l+0x34>
 8009e80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e82:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f040 8570 	bne.w	800a96a <_strtod_l+0xb92>
 8009e8a:	4652      	mov	r2, sl
 8009e8c:	465b      	mov	r3, fp
 8009e8e:	e7e5      	b.n	8009e5c <_strtod_l+0x84>
 8009e90:	2100      	movs	r1, #0
 8009e92:	e7ef      	b.n	8009e74 <_strtod_l+0x9c>
 8009e94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e96:	b13a      	cbz	r2, 8009ea8 <_strtod_l+0xd0>
 8009e98:	2135      	movs	r1, #53	@ 0x35
 8009e9a:	a81c      	add	r0, sp, #112	@ 0x70
 8009e9c:	f7ff ff38 	bl	8009d10 <__copybits>
 8009ea0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ea2:	9805      	ldr	r0, [sp, #20]
 8009ea4:	f7ff fafc 	bl	80094a0 <_Bfree>
 8009ea8:	3e01      	subs	r6, #1
 8009eaa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009eac:	2e04      	cmp	r6, #4
 8009eae:	d806      	bhi.n	8009ebe <_strtod_l+0xe6>
 8009eb0:	e8df f006 	tbb	[pc, r6]
 8009eb4:	201d0314 	.word	0x201d0314
 8009eb8:	14          	.byte	0x14
 8009eb9:	00          	.byte	0x00
 8009eba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009ebe:	05e1      	lsls	r1, r4, #23
 8009ec0:	bf48      	it	mi
 8009ec2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ec6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009eca:	0d1b      	lsrs	r3, r3, #20
 8009ecc:	051b      	lsls	r3, r3, #20
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1bb      	bne.n	8009e4a <_strtod_l+0x72>
 8009ed2:	f7fe fb11 	bl	80084f8 <__errno>
 8009ed6:	2322      	movs	r3, #34	@ 0x22
 8009ed8:	6003      	str	r3, [r0, #0]
 8009eda:	e7b6      	b.n	8009e4a <_strtod_l+0x72>
 8009edc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009ee0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009ee4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ee8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009eec:	e7e7      	b.n	8009ebe <_strtod_l+0xe6>
 8009eee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a070 <_strtod_l+0x298>
 8009ef2:	e7e4      	b.n	8009ebe <_strtod_l+0xe6>
 8009ef4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009ef8:	f04f 3aff 	mov.w	sl, #4294967295
 8009efc:	e7df      	b.n	8009ebe <_strtod_l+0xe6>
 8009efe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f04:	785b      	ldrb	r3, [r3, #1]
 8009f06:	2b30      	cmp	r3, #48	@ 0x30
 8009f08:	d0f9      	beq.n	8009efe <_strtod_l+0x126>
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d09d      	beq.n	8009e4a <_strtod_l+0x72>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f12:	220a      	movs	r2, #10
 8009f14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f16:	930c      	str	r3, [sp, #48]	@ 0x30
 8009f18:	2300      	movs	r3, #0
 8009f1a:	461f      	mov	r7, r3
 8009f1c:	9308      	str	r3, [sp, #32]
 8009f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f20:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009f22:	7805      	ldrb	r5, [r0, #0]
 8009f24:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f28:	b2d9      	uxtb	r1, r3
 8009f2a:	2909      	cmp	r1, #9
 8009f2c:	d928      	bls.n	8009f80 <_strtod_l+0x1a8>
 8009f2e:	2201      	movs	r2, #1
 8009f30:	494e      	ldr	r1, [pc, #312]	@ (800a06c <_strtod_l+0x294>)
 8009f32:	f001 f978 	bl	800b226 <strncmp>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d033      	beq.n	8009fa2 <_strtod_l+0x1ca>
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	462a      	mov	r2, r5
 8009f3e:	463d      	mov	r5, r7
 8009f40:	4681      	mov	r9, r0
 8009f42:	4603      	mov	r3, r0
 8009f44:	2a65      	cmp	r2, #101	@ 0x65
 8009f46:	d001      	beq.n	8009f4c <_strtod_l+0x174>
 8009f48:	2a45      	cmp	r2, #69	@ 0x45
 8009f4a:	d114      	bne.n	8009f76 <_strtod_l+0x19e>
 8009f4c:	b91d      	cbnz	r5, 8009f56 <_strtod_l+0x17e>
 8009f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f50:	4302      	orrs	r2, r0
 8009f52:	d095      	beq.n	8009e80 <_strtod_l+0xa8>
 8009f54:	2500      	movs	r5, #0
 8009f56:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009f58:	1c62      	adds	r2, r4, #1
 8009f5a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f5c:	7862      	ldrb	r2, [r4, #1]
 8009f5e:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f60:	d078      	beq.n	800a054 <_strtod_l+0x27c>
 8009f62:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f64:	d07c      	beq.n	800a060 <_strtod_l+0x288>
 8009f66:	f04f 0c00 	mov.w	ip, #0
 8009f6a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f6e:	2909      	cmp	r1, #9
 8009f70:	f240 8084 	bls.w	800a07c <_strtod_l+0x2a4>
 8009f74:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f76:	f04f 0800 	mov.w	r8, #0
 8009f7a:	e0a4      	b.n	800a0c6 <_strtod_l+0x2ee>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	e7c7      	b.n	8009f10 <_strtod_l+0x138>
 8009f80:	2f08      	cmp	r7, #8
 8009f82:	f100 0001 	add.w	r0, r0, #1
 8009f86:	f107 0701 	add.w	r7, r7, #1
 8009f8a:	bfd5      	itete	le
 8009f8c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009f8e:	9908      	ldrgt	r1, [sp, #32]
 8009f90:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f94:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f98:	bfd4      	ite	le
 8009f9a:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009f9c:	9308      	strgt	r3, [sp, #32]
 8009f9e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009fa0:	e7be      	b.n	8009f20 <_strtod_l+0x148>
 8009fa2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fa4:	1c5a      	adds	r2, r3, #1
 8009fa6:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fa8:	785a      	ldrb	r2, [r3, #1]
 8009faa:	b37f      	cbz	r7, 800a00c <_strtod_l+0x234>
 8009fac:	4681      	mov	r9, r0
 8009fae:	463d      	mov	r5, r7
 8009fb0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009fb4:	2b09      	cmp	r3, #9
 8009fb6:	d912      	bls.n	8009fde <_strtod_l+0x206>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e7c3      	b.n	8009f44 <_strtod_l+0x16c>
 8009fbc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fbe:	3001      	adds	r0, #1
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fc4:	785a      	ldrb	r2, [r3, #1]
 8009fc6:	2a30      	cmp	r2, #48	@ 0x30
 8009fc8:	d0f8      	beq.n	8009fbc <_strtod_l+0x1e4>
 8009fca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009fce:	2b08      	cmp	r3, #8
 8009fd0:	f200 84d2 	bhi.w	800a978 <_strtod_l+0xba0>
 8009fd4:	4681      	mov	r9, r0
 8009fd6:	2000      	movs	r0, #0
 8009fd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fda:	4605      	mov	r5, r0
 8009fdc:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fde:	3a30      	subs	r2, #48	@ 0x30
 8009fe0:	f100 0301 	add.w	r3, r0, #1
 8009fe4:	d02a      	beq.n	800a03c <_strtod_l+0x264>
 8009fe6:	4499      	add	r9, r3
 8009fe8:	eb00 0c05 	add.w	ip, r0, r5
 8009fec:	462b      	mov	r3, r5
 8009fee:	210a      	movs	r1, #10
 8009ff0:	4563      	cmp	r3, ip
 8009ff2:	d10d      	bne.n	800a010 <_strtod_l+0x238>
 8009ff4:	1c69      	adds	r1, r5, #1
 8009ff6:	4401      	add	r1, r0
 8009ff8:	4428      	add	r0, r5
 8009ffa:	2808      	cmp	r0, #8
 8009ffc:	dc16      	bgt.n	800a02c <_strtod_l+0x254>
 8009ffe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a000:	230a      	movs	r3, #10
 800a002:	fb03 2300 	mla	r3, r3, r0, r2
 800a006:	930a      	str	r3, [sp, #40]	@ 0x28
 800a008:	2300      	movs	r3, #0
 800a00a:	e018      	b.n	800a03e <_strtod_l+0x266>
 800a00c:	4638      	mov	r0, r7
 800a00e:	e7da      	b.n	8009fc6 <_strtod_l+0x1ee>
 800a010:	2b08      	cmp	r3, #8
 800a012:	f103 0301 	add.w	r3, r3, #1
 800a016:	dc03      	bgt.n	800a020 <_strtod_l+0x248>
 800a018:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a01a:	434e      	muls	r6, r1
 800a01c:	960a      	str	r6, [sp, #40]	@ 0x28
 800a01e:	e7e7      	b.n	8009ff0 <_strtod_l+0x218>
 800a020:	2b10      	cmp	r3, #16
 800a022:	bfde      	ittt	le
 800a024:	9e08      	ldrle	r6, [sp, #32]
 800a026:	434e      	mulle	r6, r1
 800a028:	9608      	strle	r6, [sp, #32]
 800a02a:	e7e1      	b.n	8009ff0 <_strtod_l+0x218>
 800a02c:	280f      	cmp	r0, #15
 800a02e:	dceb      	bgt.n	800a008 <_strtod_l+0x230>
 800a030:	9808      	ldr	r0, [sp, #32]
 800a032:	230a      	movs	r3, #10
 800a034:	fb03 2300 	mla	r3, r3, r0, r2
 800a038:	9308      	str	r3, [sp, #32]
 800a03a:	e7e5      	b.n	800a008 <_strtod_l+0x230>
 800a03c:	4629      	mov	r1, r5
 800a03e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a040:	460d      	mov	r5, r1
 800a042:	1c50      	adds	r0, r2, #1
 800a044:	9019      	str	r0, [sp, #100]	@ 0x64
 800a046:	4618      	mov	r0, r3
 800a048:	7852      	ldrb	r2, [r2, #1]
 800a04a:	e7b1      	b.n	8009fb0 <_strtod_l+0x1d8>
 800a04c:	f04f 0900 	mov.w	r9, #0
 800a050:	2301      	movs	r3, #1
 800a052:	e77c      	b.n	8009f4e <_strtod_l+0x176>
 800a054:	f04f 0c00 	mov.w	ip, #0
 800a058:	1ca2      	adds	r2, r4, #2
 800a05a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a05c:	78a2      	ldrb	r2, [r4, #2]
 800a05e:	e784      	b.n	8009f6a <_strtod_l+0x192>
 800a060:	f04f 0c01 	mov.w	ip, #1
 800a064:	e7f8      	b.n	800a058 <_strtod_l+0x280>
 800a066:	bf00      	nop
 800a068:	0800c668 	.word	0x0800c668
 800a06c:	0800c650 	.word	0x0800c650
 800a070:	7ff00000 	.word	0x7ff00000
 800a074:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a076:	1c51      	adds	r1, r2, #1
 800a078:	9119      	str	r1, [sp, #100]	@ 0x64
 800a07a:	7852      	ldrb	r2, [r2, #1]
 800a07c:	2a30      	cmp	r2, #48	@ 0x30
 800a07e:	d0f9      	beq.n	800a074 <_strtod_l+0x29c>
 800a080:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a084:	2908      	cmp	r1, #8
 800a086:	f63f af76 	bhi.w	8009f76 <_strtod_l+0x19e>
 800a08a:	3a30      	subs	r2, #48	@ 0x30
 800a08c:	f04f 080a 	mov.w	r8, #10
 800a090:	920e      	str	r2, [sp, #56]	@ 0x38
 800a092:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a094:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a096:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a098:	1c56      	adds	r6, r2, #1
 800a09a:	9619      	str	r6, [sp, #100]	@ 0x64
 800a09c:	7852      	ldrb	r2, [r2, #1]
 800a09e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a0a2:	f1be 0f09 	cmp.w	lr, #9
 800a0a6:	d939      	bls.n	800a11c <_strtod_l+0x344>
 800a0a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a0aa:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a0ae:	1a76      	subs	r6, r6, r1
 800a0b0:	2e08      	cmp	r6, #8
 800a0b2:	dc03      	bgt.n	800a0bc <_strtod_l+0x2e4>
 800a0b4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a0b6:	4588      	cmp	r8, r1
 800a0b8:	bfa8      	it	ge
 800a0ba:	4688      	movge	r8, r1
 800a0bc:	f1bc 0f00 	cmp.w	ip, #0
 800a0c0:	d001      	beq.n	800a0c6 <_strtod_l+0x2ee>
 800a0c2:	f1c8 0800 	rsb	r8, r8, #0
 800a0c6:	2d00      	cmp	r5, #0
 800a0c8:	d14e      	bne.n	800a168 <_strtod_l+0x390>
 800a0ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0cc:	4308      	orrs	r0, r1
 800a0ce:	f47f aebc 	bne.w	8009e4a <_strtod_l+0x72>
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f47f aed4 	bne.w	8009e80 <_strtod_l+0xa8>
 800a0d8:	2a69      	cmp	r2, #105	@ 0x69
 800a0da:	d028      	beq.n	800a12e <_strtod_l+0x356>
 800a0dc:	dc25      	bgt.n	800a12a <_strtod_l+0x352>
 800a0de:	2a49      	cmp	r2, #73	@ 0x49
 800a0e0:	d025      	beq.n	800a12e <_strtod_l+0x356>
 800a0e2:	2a4e      	cmp	r2, #78	@ 0x4e
 800a0e4:	f47f aecc 	bne.w	8009e80 <_strtod_l+0xa8>
 800a0e8:	499b      	ldr	r1, [pc, #620]	@ (800a358 <_strtod_l+0x580>)
 800a0ea:	a819      	add	r0, sp, #100	@ 0x64
 800a0ec:	f001 fbb0 	bl	800b850 <__match>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	f43f aec5 	beq.w	8009e80 <_strtod_l+0xa8>
 800a0f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b28      	cmp	r3, #40	@ 0x28
 800a0fc:	d12e      	bne.n	800a15c <_strtod_l+0x384>
 800a0fe:	aa1c      	add	r2, sp, #112	@ 0x70
 800a100:	4996      	ldr	r1, [pc, #600]	@ (800a35c <_strtod_l+0x584>)
 800a102:	a819      	add	r0, sp, #100	@ 0x64
 800a104:	f001 fbb8 	bl	800b878 <__hexnan>
 800a108:	2805      	cmp	r0, #5
 800a10a:	d127      	bne.n	800a15c <_strtod_l+0x384>
 800a10c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a10e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a112:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a116:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a11a:	e696      	b.n	8009e4a <_strtod_l+0x72>
 800a11c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a11e:	fb08 2101 	mla	r1, r8, r1, r2
 800a122:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a126:	920e      	str	r2, [sp, #56]	@ 0x38
 800a128:	e7b5      	b.n	800a096 <_strtod_l+0x2be>
 800a12a:	2a6e      	cmp	r2, #110	@ 0x6e
 800a12c:	e7da      	b.n	800a0e4 <_strtod_l+0x30c>
 800a12e:	498c      	ldr	r1, [pc, #560]	@ (800a360 <_strtod_l+0x588>)
 800a130:	a819      	add	r0, sp, #100	@ 0x64
 800a132:	f001 fb8d 	bl	800b850 <__match>
 800a136:	2800      	cmp	r0, #0
 800a138:	f43f aea2 	beq.w	8009e80 <_strtod_l+0xa8>
 800a13c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a13e:	a819      	add	r0, sp, #100	@ 0x64
 800a140:	4988      	ldr	r1, [pc, #544]	@ (800a364 <_strtod_l+0x58c>)
 800a142:	3b01      	subs	r3, #1
 800a144:	9319      	str	r3, [sp, #100]	@ 0x64
 800a146:	f001 fb83 	bl	800b850 <__match>
 800a14a:	b910      	cbnz	r0, 800a152 <_strtod_l+0x37a>
 800a14c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a14e:	3301      	adds	r3, #1
 800a150:	9319      	str	r3, [sp, #100]	@ 0x64
 800a152:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a374 <_strtod_l+0x59c>
 800a156:	f04f 0a00 	mov.w	sl, #0
 800a15a:	e676      	b.n	8009e4a <_strtod_l+0x72>
 800a15c:	4882      	ldr	r0, [pc, #520]	@ (800a368 <_strtod_l+0x590>)
 800a15e:	f001 f8b7 	bl	800b2d0 <nan>
 800a162:	ec5b ab10 	vmov	sl, fp, d0
 800a166:	e670      	b.n	8009e4a <_strtod_l+0x72>
 800a168:	eba8 0309 	sub.w	r3, r8, r9
 800a16c:	2f00      	cmp	r7, #0
 800a16e:	bf08      	it	eq
 800a170:	462f      	moveq	r7, r5
 800a172:	2d10      	cmp	r5, #16
 800a174:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a176:	462c      	mov	r4, r5
 800a178:	9309      	str	r3, [sp, #36]	@ 0x24
 800a17a:	bfa8      	it	ge
 800a17c:	2410      	movge	r4, #16
 800a17e:	f7f6 f9d5 	bl	800052c <__aeabi_ui2d>
 800a182:	2d09      	cmp	r5, #9
 800a184:	4682      	mov	sl, r0
 800a186:	468b      	mov	fp, r1
 800a188:	dc13      	bgt.n	800a1b2 <_strtod_l+0x3da>
 800a18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f43f ae5c 	beq.w	8009e4a <_strtod_l+0x72>
 800a192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a194:	dd78      	ble.n	800a288 <_strtod_l+0x4b0>
 800a196:	2b16      	cmp	r3, #22
 800a198:	dc5f      	bgt.n	800a25a <_strtod_l+0x482>
 800a19a:	4974      	ldr	r1, [pc, #464]	@ (800a36c <_strtod_l+0x594>)
 800a19c:	4652      	mov	r2, sl
 800a19e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1a2:	465b      	mov	r3, fp
 800a1a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1a8:	f7f6 fa3a 	bl	8000620 <__aeabi_dmul>
 800a1ac:	4682      	mov	sl, r0
 800a1ae:	468b      	mov	fp, r1
 800a1b0:	e64b      	b.n	8009e4a <_strtod_l+0x72>
 800a1b2:	4b6e      	ldr	r3, [pc, #440]	@ (800a36c <_strtod_l+0x594>)
 800a1b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1b8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a1bc:	f7f6 fa30 	bl	8000620 <__aeabi_dmul>
 800a1c0:	4682      	mov	sl, r0
 800a1c2:	468b      	mov	fp, r1
 800a1c4:	9808      	ldr	r0, [sp, #32]
 800a1c6:	f7f6 f9b1 	bl	800052c <__aeabi_ui2d>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4650      	mov	r0, sl
 800a1d0:	4659      	mov	r1, fp
 800a1d2:	f7f6 f86f 	bl	80002b4 <__adddf3>
 800a1d6:	2d0f      	cmp	r5, #15
 800a1d8:	4682      	mov	sl, r0
 800a1da:	468b      	mov	fp, r1
 800a1dc:	ddd5      	ble.n	800a18a <_strtod_l+0x3b2>
 800a1de:	1b2c      	subs	r4, r5, r4
 800a1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1e2:	441c      	add	r4, r3
 800a1e4:	2c00      	cmp	r4, #0
 800a1e6:	f340 8096 	ble.w	800a316 <_strtod_l+0x53e>
 800a1ea:	f014 030f 	ands.w	r3, r4, #15
 800a1ee:	d00a      	beq.n	800a206 <_strtod_l+0x42e>
 800a1f0:	495e      	ldr	r1, [pc, #376]	@ (800a36c <_strtod_l+0x594>)
 800a1f2:	4652      	mov	r2, sl
 800a1f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1f8:	465b      	mov	r3, fp
 800a1fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1fe:	f7f6 fa0f 	bl	8000620 <__aeabi_dmul>
 800a202:	4682      	mov	sl, r0
 800a204:	468b      	mov	fp, r1
 800a206:	f034 040f 	bics.w	r4, r4, #15
 800a20a:	d073      	beq.n	800a2f4 <_strtod_l+0x51c>
 800a20c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a210:	dd48      	ble.n	800a2a4 <_strtod_l+0x4cc>
 800a212:	2400      	movs	r4, #0
 800a214:	46a0      	mov	r8, r4
 800a216:	46a1      	mov	r9, r4
 800a218:	940a      	str	r4, [sp, #40]	@ 0x28
 800a21a:	2322      	movs	r3, #34	@ 0x22
 800a21c:	9a05      	ldr	r2, [sp, #20]
 800a21e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a374 <_strtod_l+0x59c>
 800a222:	f04f 0a00 	mov.w	sl, #0
 800a226:	6013      	str	r3, [r2, #0]
 800a228:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f43f ae0d 	beq.w	8009e4a <_strtod_l+0x72>
 800a230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a232:	9805      	ldr	r0, [sp, #20]
 800a234:	f7ff f934 	bl	80094a0 <_Bfree>
 800a238:	4649      	mov	r1, r9
 800a23a:	9805      	ldr	r0, [sp, #20]
 800a23c:	f7ff f930 	bl	80094a0 <_Bfree>
 800a240:	4641      	mov	r1, r8
 800a242:	9805      	ldr	r0, [sp, #20]
 800a244:	f7ff f92c 	bl	80094a0 <_Bfree>
 800a248:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a24a:	9805      	ldr	r0, [sp, #20]
 800a24c:	f7ff f928 	bl	80094a0 <_Bfree>
 800a250:	4621      	mov	r1, r4
 800a252:	9805      	ldr	r0, [sp, #20]
 800a254:	f7ff f924 	bl	80094a0 <_Bfree>
 800a258:	e5f7      	b.n	8009e4a <_strtod_l+0x72>
 800a25a:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a25e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a260:	4293      	cmp	r3, r2
 800a262:	dbbc      	blt.n	800a1de <_strtod_l+0x406>
 800a264:	f1c5 050f 	rsb	r5, r5, #15
 800a268:	4c40      	ldr	r4, [pc, #256]	@ (800a36c <_strtod_l+0x594>)
 800a26a:	4652      	mov	r2, sl
 800a26c:	465b      	mov	r3, fp
 800a26e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a272:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a276:	f7f6 f9d3 	bl	8000620 <__aeabi_dmul>
 800a27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a27c:	1b5d      	subs	r5, r3, r5
 800a27e:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a282:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a286:	e78f      	b.n	800a1a8 <_strtod_l+0x3d0>
 800a288:	3316      	adds	r3, #22
 800a28a:	dba8      	blt.n	800a1de <_strtod_l+0x406>
 800a28c:	eba9 0808 	sub.w	r8, r9, r8
 800a290:	4b36      	ldr	r3, [pc, #216]	@ (800a36c <_strtod_l+0x594>)
 800a292:	4650      	mov	r0, sl
 800a294:	4659      	mov	r1, fp
 800a296:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a29a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a29e:	f7f6 fae9 	bl	8000874 <__aeabi_ddiv>
 800a2a2:	e783      	b.n	800a1ac <_strtod_l+0x3d4>
 800a2a4:	4b32      	ldr	r3, [pc, #200]	@ (800a370 <_strtod_l+0x598>)
 800a2a6:	1124      	asrs	r4, r4, #4
 800a2a8:	4650      	mov	r0, sl
 800a2aa:	4659      	mov	r1, fp
 800a2ac:	9308      	str	r3, [sp, #32]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	461e      	mov	r6, r3
 800a2b2:	2c01      	cmp	r4, #1
 800a2b4:	dc21      	bgt.n	800a2fa <_strtod_l+0x522>
 800a2b6:	b10b      	cbz	r3, 800a2bc <_strtod_l+0x4e4>
 800a2b8:	4682      	mov	sl, r0
 800a2ba:	468b      	mov	fp, r1
 800a2bc:	492c      	ldr	r1, [pc, #176]	@ (800a370 <_strtod_l+0x598>)
 800a2be:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a2c2:	4652      	mov	r2, sl
 800a2c4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a2c8:	465b      	mov	r3, fp
 800a2ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2ce:	f7f6 f9a7 	bl	8000620 <__aeabi_dmul>
 800a2d2:	4b28      	ldr	r3, [pc, #160]	@ (800a374 <_strtod_l+0x59c>)
 800a2d4:	460a      	mov	r2, r1
 800a2d6:	4682      	mov	sl, r0
 800a2d8:	400b      	ands	r3, r1
 800a2da:	4927      	ldr	r1, [pc, #156]	@ (800a378 <_strtod_l+0x5a0>)
 800a2dc:	428b      	cmp	r3, r1
 800a2de:	d898      	bhi.n	800a212 <_strtod_l+0x43a>
 800a2e0:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a2e4:	428b      	cmp	r3, r1
 800a2e6:	bf86      	itte	hi
 800a2e8:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a37c <_strtod_l+0x5a4>
 800a2ec:	f04f 3aff 	movhi.w	sl, #4294967295
 800a2f0:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	9308      	str	r3, [sp, #32]
 800a2f8:	e07a      	b.n	800a3f0 <_strtod_l+0x618>
 800a2fa:	07e2      	lsls	r2, r4, #31
 800a2fc:	d505      	bpl.n	800a30a <_strtod_l+0x532>
 800a2fe:	9b08      	ldr	r3, [sp, #32]
 800a300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a304:	f7f6 f98c 	bl	8000620 <__aeabi_dmul>
 800a308:	2301      	movs	r3, #1
 800a30a:	9a08      	ldr	r2, [sp, #32]
 800a30c:	3601      	adds	r6, #1
 800a30e:	1064      	asrs	r4, r4, #1
 800a310:	3208      	adds	r2, #8
 800a312:	9208      	str	r2, [sp, #32]
 800a314:	e7cd      	b.n	800a2b2 <_strtod_l+0x4da>
 800a316:	d0ed      	beq.n	800a2f4 <_strtod_l+0x51c>
 800a318:	4264      	negs	r4, r4
 800a31a:	f014 020f 	ands.w	r2, r4, #15
 800a31e:	d00a      	beq.n	800a336 <_strtod_l+0x55e>
 800a320:	4b12      	ldr	r3, [pc, #72]	@ (800a36c <_strtod_l+0x594>)
 800a322:	4650      	mov	r0, sl
 800a324:	4659      	mov	r1, fp
 800a326:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f7f6 faa1 	bl	8000874 <__aeabi_ddiv>
 800a332:	4682      	mov	sl, r0
 800a334:	468b      	mov	fp, r1
 800a336:	1124      	asrs	r4, r4, #4
 800a338:	d0dc      	beq.n	800a2f4 <_strtod_l+0x51c>
 800a33a:	2c1f      	cmp	r4, #31
 800a33c:	dd20      	ble.n	800a380 <_strtod_l+0x5a8>
 800a33e:	2400      	movs	r4, #0
 800a340:	46a0      	mov	r8, r4
 800a342:	46a1      	mov	r9, r4
 800a344:	940a      	str	r4, [sp, #40]	@ 0x28
 800a346:	2322      	movs	r3, #34	@ 0x22
 800a348:	9a05      	ldr	r2, [sp, #20]
 800a34a:	f04f 0a00 	mov.w	sl, #0
 800a34e:	f04f 0b00 	mov.w	fp, #0
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	e768      	b.n	800a228 <_strtod_l+0x450>
 800a356:	bf00      	nop
 800a358:	0800c441 	.word	0x0800c441
 800a35c:	0800c654 	.word	0x0800c654
 800a360:	0800c439 	.word	0x0800c439
 800a364:	0800c470 	.word	0x0800c470
 800a368:	0800c7fd 	.word	0x0800c7fd
 800a36c:	0800c588 	.word	0x0800c588
 800a370:	0800c560 	.word	0x0800c560
 800a374:	7ff00000 	.word	0x7ff00000
 800a378:	7ca00000 	.word	0x7ca00000
 800a37c:	7fefffff 	.word	0x7fefffff
 800a380:	f014 0310 	ands.w	r3, r4, #16
 800a384:	4650      	mov	r0, sl
 800a386:	4659      	mov	r1, fp
 800a388:	4ea9      	ldr	r6, [pc, #676]	@ (800a630 <_strtod_l+0x858>)
 800a38a:	bf18      	it	ne
 800a38c:	236a      	movne	r3, #106	@ 0x6a
 800a38e:	9308      	str	r3, [sp, #32]
 800a390:	2300      	movs	r3, #0
 800a392:	07e2      	lsls	r2, r4, #31
 800a394:	d504      	bpl.n	800a3a0 <_strtod_l+0x5c8>
 800a396:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a39a:	f7f6 f941 	bl	8000620 <__aeabi_dmul>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	1064      	asrs	r4, r4, #1
 800a3a2:	f106 0608 	add.w	r6, r6, #8
 800a3a6:	d1f4      	bne.n	800a392 <_strtod_l+0x5ba>
 800a3a8:	b10b      	cbz	r3, 800a3ae <_strtod_l+0x5d6>
 800a3aa:	4682      	mov	sl, r0
 800a3ac:	468b      	mov	fp, r1
 800a3ae:	9b08      	ldr	r3, [sp, #32]
 800a3b0:	b1b3      	cbz	r3, 800a3e0 <_strtod_l+0x608>
 800a3b2:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a3b6:	4659      	mov	r1, fp
 800a3b8:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	dd0f      	ble.n	800a3e0 <_strtod_l+0x608>
 800a3c0:	2b1f      	cmp	r3, #31
 800a3c2:	dd55      	ble.n	800a470 <_strtod_l+0x698>
 800a3c4:	2b34      	cmp	r3, #52	@ 0x34
 800a3c6:	f04f 0a00 	mov.w	sl, #0
 800a3ca:	bfdb      	ittet	le
 800a3cc:	f04f 33ff 	movle.w	r3, #4294967295
 800a3d0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a3d4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a3d8:	4093      	lslle	r3, r2
 800a3da:	bfd8      	it	le
 800a3dc:	ea03 0b01 	andle.w	fp, r3, r1
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	4650      	mov	r0, sl
 800a3e6:	4659      	mov	r1, fp
 800a3e8:	f7f6 fb82 	bl	8000af0 <__aeabi_dcmpeq>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	d1a6      	bne.n	800a33e <_strtod_l+0x566>
 800a3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3f2:	463a      	mov	r2, r7
 800a3f4:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	462b      	mov	r3, r5
 800a3fa:	9805      	ldr	r0, [sp, #20]
 800a3fc:	f7ff f8ba 	bl	8009574 <__s2b>
 800a400:	900a      	str	r0, [sp, #40]	@ 0x28
 800a402:	2800      	cmp	r0, #0
 800a404:	f43f af05 	beq.w	800a212 <_strtod_l+0x43a>
 800a408:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a40a:	eba9 0308 	sub.w	r3, r9, r8
 800a40e:	2400      	movs	r4, #0
 800a410:	2a00      	cmp	r2, #0
 800a412:	46a0      	mov	r8, r4
 800a414:	bfa8      	it	ge
 800a416:	2300      	movge	r3, #0
 800a418:	9312      	str	r3, [sp, #72]	@ 0x48
 800a41a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a41e:	9316      	str	r3, [sp, #88]	@ 0x58
 800a420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a422:	9805      	ldr	r0, [sp, #20]
 800a424:	6859      	ldr	r1, [r3, #4]
 800a426:	f7fe fffb 	bl	8009420 <_Balloc>
 800a42a:	4681      	mov	r9, r0
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f43f aef4 	beq.w	800a21a <_strtod_l+0x442>
 800a432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a434:	300c      	adds	r0, #12
 800a436:	691a      	ldr	r2, [r3, #16]
 800a438:	f103 010c 	add.w	r1, r3, #12
 800a43c:	3202      	adds	r2, #2
 800a43e:	0092      	lsls	r2, r2, #2
 800a440:	f000 ff36 	bl	800b2b0 <memcpy>
 800a444:	aa1c      	add	r2, sp, #112	@ 0x70
 800a446:	a91b      	add	r1, sp, #108	@ 0x6c
 800a448:	9805      	ldr	r0, [sp, #20]
 800a44a:	ec4b ab10 	vmov	d0, sl, fp
 800a44e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a452:	f7ff fbd3 	bl	8009bfc <__d2b>
 800a456:	901a      	str	r0, [sp, #104]	@ 0x68
 800a458:	2800      	cmp	r0, #0
 800a45a:	f43f aede 	beq.w	800a21a <_strtod_l+0x442>
 800a45e:	2101      	movs	r1, #1
 800a460:	9805      	ldr	r0, [sp, #20]
 800a462:	f7ff f91d 	bl	80096a0 <__i2b>
 800a466:	4680      	mov	r8, r0
 800a468:	b948      	cbnz	r0, 800a47e <_strtod_l+0x6a6>
 800a46a:	f04f 0800 	mov.w	r8, #0
 800a46e:	e6d4      	b.n	800a21a <_strtod_l+0x442>
 800a470:	f04f 32ff 	mov.w	r2, #4294967295
 800a474:	fa02 f303 	lsl.w	r3, r2, r3
 800a478:	ea03 0a0a 	and.w	sl, r3, sl
 800a47c:	e7b0      	b.n	800a3e0 <_strtod_l+0x608>
 800a47e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a480:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a482:	2d00      	cmp	r5, #0
 800a484:	bfa9      	itett	ge
 800a486:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a488:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a48a:	18ef      	addge	r7, r5, r3
 800a48c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a48e:	bfb8      	it	lt
 800a490:	1b5e      	sublt	r6, r3, r5
 800a492:	9b08      	ldr	r3, [sp, #32]
 800a494:	bfb8      	it	lt
 800a496:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a498:	1aed      	subs	r5, r5, r3
 800a49a:	4b66      	ldr	r3, [pc, #408]	@ (800a634 <_strtod_l+0x85c>)
 800a49c:	4415      	add	r5, r2
 800a49e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a4a2:	3d01      	subs	r5, #1
 800a4a4:	429d      	cmp	r5, r3
 800a4a6:	da4f      	bge.n	800a548 <_strtod_l+0x770>
 800a4a8:	1b5b      	subs	r3, r3, r5
 800a4aa:	2101      	movs	r1, #1
 800a4ac:	2b1f      	cmp	r3, #31
 800a4ae:	eba2 0203 	sub.w	r2, r2, r3
 800a4b2:	dc3d      	bgt.n	800a530 <_strtod_l+0x758>
 800a4b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	9310      	str	r3, [sp, #64]	@ 0x40
 800a4be:	18bd      	adds	r5, r7, r2
 800a4c0:	9b08      	ldr	r3, [sp, #32]
 800a4c2:	4416      	add	r6, r2
 800a4c4:	42af      	cmp	r7, r5
 800a4c6:	441e      	add	r6, r3
 800a4c8:	463b      	mov	r3, r7
 800a4ca:	bfa8      	it	ge
 800a4cc:	462b      	movge	r3, r5
 800a4ce:	42b3      	cmp	r3, r6
 800a4d0:	bfa8      	it	ge
 800a4d2:	4633      	movge	r3, r6
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	bfc2      	ittt	gt
 800a4d8:	1aed      	subgt	r5, r5, r3
 800a4da:	1af6      	subgt	r6, r6, r3
 800a4dc:	1aff      	subgt	r7, r7, r3
 800a4de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	dd16      	ble.n	800a512 <_strtod_l+0x73a>
 800a4e4:	4641      	mov	r1, r8
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	9805      	ldr	r0, [sp, #20]
 800a4ea:	f7ff f999 	bl	8009820 <__pow5mult>
 800a4ee:	4680      	mov	r8, r0
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	d0ba      	beq.n	800a46a <_strtod_l+0x692>
 800a4f4:	4601      	mov	r1, r0
 800a4f6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4f8:	9805      	ldr	r0, [sp, #20]
 800a4fa:	f7ff f8e7 	bl	80096cc <__multiply>
 800a4fe:	900e      	str	r0, [sp, #56]	@ 0x38
 800a500:	2800      	cmp	r0, #0
 800a502:	f43f ae8a 	beq.w	800a21a <_strtod_l+0x442>
 800a506:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a508:	9805      	ldr	r0, [sp, #20]
 800a50a:	f7fe ffc9 	bl	80094a0 <_Bfree>
 800a50e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a510:	931a      	str	r3, [sp, #104]	@ 0x68
 800a512:	2d00      	cmp	r5, #0
 800a514:	dc1d      	bgt.n	800a552 <_strtod_l+0x77a>
 800a516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a518:	2b00      	cmp	r3, #0
 800a51a:	dd23      	ble.n	800a564 <_strtod_l+0x78c>
 800a51c:	4649      	mov	r1, r9
 800a51e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a520:	9805      	ldr	r0, [sp, #20]
 800a522:	f7ff f97d 	bl	8009820 <__pow5mult>
 800a526:	4681      	mov	r9, r0
 800a528:	b9e0      	cbnz	r0, 800a564 <_strtod_l+0x78c>
 800a52a:	f04f 0900 	mov.w	r9, #0
 800a52e:	e674      	b.n	800a21a <_strtod_l+0x442>
 800a530:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a534:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a536:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a53a:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a53e:	35e2      	adds	r5, #226	@ 0xe2
 800a540:	fa01 f305 	lsl.w	r3, r1, r5
 800a544:	9310      	str	r3, [sp, #64]	@ 0x40
 800a546:	e7ba      	b.n	800a4be <_strtod_l+0x6e6>
 800a548:	2300      	movs	r3, #0
 800a54a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a54c:	2301      	movs	r3, #1
 800a54e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a550:	e7b5      	b.n	800a4be <_strtod_l+0x6e6>
 800a552:	462a      	mov	r2, r5
 800a554:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a556:	9805      	ldr	r0, [sp, #20]
 800a558:	f7ff f9bc 	bl	80098d4 <__lshift>
 800a55c:	901a      	str	r0, [sp, #104]	@ 0x68
 800a55e:	2800      	cmp	r0, #0
 800a560:	d1d9      	bne.n	800a516 <_strtod_l+0x73e>
 800a562:	e65a      	b.n	800a21a <_strtod_l+0x442>
 800a564:	2e00      	cmp	r6, #0
 800a566:	dd07      	ble.n	800a578 <_strtod_l+0x7a0>
 800a568:	4649      	mov	r1, r9
 800a56a:	4632      	mov	r2, r6
 800a56c:	9805      	ldr	r0, [sp, #20]
 800a56e:	f7ff f9b1 	bl	80098d4 <__lshift>
 800a572:	4681      	mov	r9, r0
 800a574:	2800      	cmp	r0, #0
 800a576:	d0d8      	beq.n	800a52a <_strtod_l+0x752>
 800a578:	2f00      	cmp	r7, #0
 800a57a:	dd08      	ble.n	800a58e <_strtod_l+0x7b6>
 800a57c:	4641      	mov	r1, r8
 800a57e:	463a      	mov	r2, r7
 800a580:	9805      	ldr	r0, [sp, #20]
 800a582:	f7ff f9a7 	bl	80098d4 <__lshift>
 800a586:	4680      	mov	r8, r0
 800a588:	2800      	cmp	r0, #0
 800a58a:	f43f ae46 	beq.w	800a21a <_strtod_l+0x442>
 800a58e:	464a      	mov	r2, r9
 800a590:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a592:	9805      	ldr	r0, [sp, #20]
 800a594:	f7ff fa26 	bl	80099e4 <__mdiff>
 800a598:	4604      	mov	r4, r0
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f43f ae3d 	beq.w	800a21a <_strtod_l+0x442>
 800a5a0:	68c3      	ldr	r3, [r0, #12]
 800a5a2:	4641      	mov	r1, r8
 800a5a4:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60c3      	str	r3, [r0, #12]
 800a5aa:	f7ff f9ff 	bl	80099ac <__mcmp>
 800a5ae:	2800      	cmp	r0, #0
 800a5b0:	da46      	bge.n	800a640 <_strtod_l+0x868>
 800a5b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5b4:	ea53 030a 	orrs.w	r3, r3, sl
 800a5b8:	d16c      	bne.n	800a694 <_strtod_l+0x8bc>
 800a5ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d168      	bne.n	800a694 <_strtod_l+0x8bc>
 800a5c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5c6:	0d1b      	lsrs	r3, r3, #20
 800a5c8:	051b      	lsls	r3, r3, #20
 800a5ca:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5ce:	d961      	bls.n	800a694 <_strtod_l+0x8bc>
 800a5d0:	6963      	ldr	r3, [r4, #20]
 800a5d2:	b913      	cbnz	r3, 800a5da <_strtod_l+0x802>
 800a5d4:	6923      	ldr	r3, [r4, #16]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	dd5c      	ble.n	800a694 <_strtod_l+0x8bc>
 800a5da:	4621      	mov	r1, r4
 800a5dc:	2201      	movs	r2, #1
 800a5de:	9805      	ldr	r0, [sp, #20]
 800a5e0:	f7ff f978 	bl	80098d4 <__lshift>
 800a5e4:	4641      	mov	r1, r8
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	f7ff f9e0 	bl	80099ac <__mcmp>
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	dd51      	ble.n	800a694 <_strtod_l+0x8bc>
 800a5f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5f4:	9a08      	ldr	r2, [sp, #32]
 800a5f6:	0d1b      	lsrs	r3, r3, #20
 800a5f8:	051b      	lsls	r3, r3, #20
 800a5fa:	2a00      	cmp	r2, #0
 800a5fc:	d06b      	beq.n	800a6d6 <_strtod_l+0x8fe>
 800a5fe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a602:	d868      	bhi.n	800a6d6 <_strtod_l+0x8fe>
 800a604:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a608:	f67f ae9d 	bls.w	800a346 <_strtod_l+0x56e>
 800a60c:	4b0a      	ldr	r3, [pc, #40]	@ (800a638 <_strtod_l+0x860>)
 800a60e:	4650      	mov	r0, sl
 800a610:	4659      	mov	r1, fp
 800a612:	2200      	movs	r2, #0
 800a614:	f7f6 f804 	bl	8000620 <__aeabi_dmul>
 800a618:	4b08      	ldr	r3, [pc, #32]	@ (800a63c <_strtod_l+0x864>)
 800a61a:	4682      	mov	sl, r0
 800a61c:	468b      	mov	fp, r1
 800a61e:	400b      	ands	r3, r1
 800a620:	2b00      	cmp	r3, #0
 800a622:	f47f ae05 	bne.w	800a230 <_strtod_l+0x458>
 800a626:	2322      	movs	r3, #34	@ 0x22
 800a628:	9a05      	ldr	r2, [sp, #20]
 800a62a:	6013      	str	r3, [r2, #0]
 800a62c:	e600      	b.n	800a230 <_strtod_l+0x458>
 800a62e:	bf00      	nop
 800a630:	0800c680 	.word	0x0800c680
 800a634:	fffffc02 	.word	0xfffffc02
 800a638:	39500000 	.word	0x39500000
 800a63c:	7ff00000 	.word	0x7ff00000
 800a640:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a644:	d165      	bne.n	800a712 <_strtod_l+0x93a>
 800a646:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a648:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a64c:	b35a      	cbz	r2, 800a6a6 <_strtod_l+0x8ce>
 800a64e:	4a9e      	ldr	r2, [pc, #632]	@ (800a8c8 <_strtod_l+0xaf0>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d12b      	bne.n	800a6ac <_strtod_l+0x8d4>
 800a654:	9b08      	ldr	r3, [sp, #32]
 800a656:	4651      	mov	r1, sl
 800a658:	b303      	cbz	r3, 800a69c <_strtod_l+0x8c4>
 800a65a:	465a      	mov	r2, fp
 800a65c:	4b9b      	ldr	r3, [pc, #620]	@ (800a8cc <_strtod_l+0xaf4>)
 800a65e:	4013      	ands	r3, r2
 800a660:	f04f 32ff 	mov.w	r2, #4294967295
 800a664:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a668:	d81b      	bhi.n	800a6a2 <_strtod_l+0x8ca>
 800a66a:	0d1b      	lsrs	r3, r3, #20
 800a66c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a670:	fa02 f303 	lsl.w	r3, r2, r3
 800a674:	4299      	cmp	r1, r3
 800a676:	d119      	bne.n	800a6ac <_strtod_l+0x8d4>
 800a678:	4b95      	ldr	r3, [pc, #596]	@ (800a8d0 <_strtod_l+0xaf8>)
 800a67a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d102      	bne.n	800a686 <_strtod_l+0x8ae>
 800a680:	3101      	adds	r1, #1
 800a682:	f43f adca 	beq.w	800a21a <_strtod_l+0x442>
 800a686:	4b91      	ldr	r3, [pc, #580]	@ (800a8cc <_strtod_l+0xaf4>)
 800a688:	f04f 0a00 	mov.w	sl, #0
 800a68c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a68e:	401a      	ands	r2, r3
 800a690:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a694:	9b08      	ldr	r3, [sp, #32]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d1b8      	bne.n	800a60c <_strtod_l+0x834>
 800a69a:	e5c9      	b.n	800a230 <_strtod_l+0x458>
 800a69c:	f04f 33ff 	mov.w	r3, #4294967295
 800a6a0:	e7e8      	b.n	800a674 <_strtod_l+0x89c>
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	e7e6      	b.n	800a674 <_strtod_l+0x89c>
 800a6a6:	ea53 030a 	orrs.w	r3, r3, sl
 800a6aa:	d0a1      	beq.n	800a5f0 <_strtod_l+0x818>
 800a6ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a6ae:	b1db      	cbz	r3, 800a6e8 <_strtod_l+0x910>
 800a6b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6b2:	4213      	tst	r3, r2
 800a6b4:	d0ee      	beq.n	800a694 <_strtod_l+0x8bc>
 800a6b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	9a08      	ldr	r2, [sp, #32]
 800a6bc:	4659      	mov	r1, fp
 800a6be:	b1bb      	cbz	r3, 800a6f0 <_strtod_l+0x918>
 800a6c0:	f7ff fb6a 	bl	8009d98 <sulp>
 800a6c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6c8:	ec53 2b10 	vmov	r2, r3, d0
 800a6cc:	f7f5 fdf2 	bl	80002b4 <__adddf3>
 800a6d0:	4682      	mov	sl, r0
 800a6d2:	468b      	mov	fp, r1
 800a6d4:	e7de      	b.n	800a694 <_strtod_l+0x8bc>
 800a6d6:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a6da:	f04f 3aff 	mov.w	sl, #4294967295
 800a6de:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6e2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6e6:	e7d5      	b.n	800a694 <_strtod_l+0x8bc>
 800a6e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6ea:	ea13 0f0a 	tst.w	r3, sl
 800a6ee:	e7e1      	b.n	800a6b4 <_strtod_l+0x8dc>
 800a6f0:	f7ff fb52 	bl	8009d98 <sulp>
 800a6f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6f8:	ec53 2b10 	vmov	r2, r3, d0
 800a6fc:	f7f5 fdd8 	bl	80002b0 <__aeabi_dsub>
 800a700:	2200      	movs	r2, #0
 800a702:	2300      	movs	r3, #0
 800a704:	4682      	mov	sl, r0
 800a706:	468b      	mov	fp, r1
 800a708:	f7f6 f9f2 	bl	8000af0 <__aeabi_dcmpeq>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d0c1      	beq.n	800a694 <_strtod_l+0x8bc>
 800a710:	e619      	b.n	800a346 <_strtod_l+0x56e>
 800a712:	4641      	mov	r1, r8
 800a714:	4620      	mov	r0, r4
 800a716:	f7ff fac9 	bl	8009cac <__ratio>
 800a71a:	2200      	movs	r2, #0
 800a71c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a720:	ec57 6b10 	vmov	r6, r7, d0
 800a724:	4630      	mov	r0, r6
 800a726:	4639      	mov	r1, r7
 800a728:	f7f6 f9f6 	bl	8000b18 <__aeabi_dcmple>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d06f      	beq.n	800a810 <_strtod_l+0xa38>
 800a730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a732:	2b00      	cmp	r3, #0
 800a734:	d17a      	bne.n	800a82c <_strtod_l+0xa54>
 800a736:	f1ba 0f00 	cmp.w	sl, #0
 800a73a:	d158      	bne.n	800a7ee <_strtod_l+0xa16>
 800a73c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a73e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a742:	2b00      	cmp	r3, #0
 800a744:	d15a      	bne.n	800a7fc <_strtod_l+0xa24>
 800a746:	2200      	movs	r2, #0
 800a748:	4b62      	ldr	r3, [pc, #392]	@ (800a8d4 <_strtod_l+0xafc>)
 800a74a:	4630      	mov	r0, r6
 800a74c:	4639      	mov	r1, r7
 800a74e:	f7f6 f9d9 	bl	8000b04 <__aeabi_dcmplt>
 800a752:	2800      	cmp	r0, #0
 800a754:	d159      	bne.n	800a80a <_strtod_l+0xa32>
 800a756:	4630      	mov	r0, r6
 800a758:	4639      	mov	r1, r7
 800a75a:	2200      	movs	r2, #0
 800a75c:	4b5e      	ldr	r3, [pc, #376]	@ (800a8d8 <_strtod_l+0xb00>)
 800a75e:	f7f5 ff5f 	bl	8000620 <__aeabi_dmul>
 800a762:	4606      	mov	r6, r0
 800a764:	460f      	mov	r7, r1
 800a766:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a76a:	9606      	str	r6, [sp, #24]
 800a76c:	9307      	str	r3, [sp, #28]
 800a76e:	4d57      	ldr	r5, [pc, #348]	@ (800a8cc <_strtod_l+0xaf4>)
 800a770:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a774:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a778:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a77a:	401d      	ands	r5, r3
 800a77c:	4b57      	ldr	r3, [pc, #348]	@ (800a8dc <_strtod_l+0xb04>)
 800a77e:	429d      	cmp	r5, r3
 800a780:	f040 80b0 	bne.w	800a8e4 <_strtod_l+0xb0c>
 800a784:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a786:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a78a:	ec4b ab10 	vmov	d0, sl, fp
 800a78e:	f7ff f9c1 	bl	8009b14 <__ulp>
 800a792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a796:	ec51 0b10 	vmov	r0, r1, d0
 800a79a:	f7f5 ff41 	bl	8000620 <__aeabi_dmul>
 800a79e:	4652      	mov	r2, sl
 800a7a0:	465b      	mov	r3, fp
 800a7a2:	f7f5 fd87 	bl	80002b4 <__adddf3>
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	4948      	ldr	r1, [pc, #288]	@ (800a8cc <_strtod_l+0xaf4>)
 800a7aa:	4682      	mov	sl, r0
 800a7ac:	4a4c      	ldr	r2, [pc, #304]	@ (800a8e0 <_strtod_l+0xb08>)
 800a7ae:	4019      	ands	r1, r3
 800a7b0:	4291      	cmp	r1, r2
 800a7b2:	d942      	bls.n	800a83a <_strtod_l+0xa62>
 800a7b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a7b6:	4b46      	ldr	r3, [pc, #280]	@ (800a8d0 <_strtod_l+0xaf8>)
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d103      	bne.n	800a7c4 <_strtod_l+0x9ec>
 800a7bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7be:	3301      	adds	r3, #1
 800a7c0:	f43f ad2b 	beq.w	800a21a <_strtod_l+0x442>
 800a7c4:	f8df b108 	ldr.w	fp, [pc, #264]	@ 800a8d0 <_strtod_l+0xaf8>
 800a7c8:	f04f 3aff 	mov.w	sl, #4294967295
 800a7cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7ce:	9805      	ldr	r0, [sp, #20]
 800a7d0:	f7fe fe66 	bl	80094a0 <_Bfree>
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	9805      	ldr	r0, [sp, #20]
 800a7d8:	f7fe fe62 	bl	80094a0 <_Bfree>
 800a7dc:	4641      	mov	r1, r8
 800a7de:	9805      	ldr	r0, [sp, #20]
 800a7e0:	f7fe fe5e 	bl	80094a0 <_Bfree>
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	9805      	ldr	r0, [sp, #20]
 800a7e8:	f7fe fe5a 	bl	80094a0 <_Bfree>
 800a7ec:	e618      	b.n	800a420 <_strtod_l+0x648>
 800a7ee:	f1ba 0f01 	cmp.w	sl, #1
 800a7f2:	d103      	bne.n	800a7fc <_strtod_l+0xa24>
 800a7f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	f43f ada5 	beq.w	800a346 <_strtod_l+0x56e>
 800a7fc:	2600      	movs	r6, #0
 800a7fe:	4f35      	ldr	r7, [pc, #212]	@ (800a8d4 <_strtod_l+0xafc>)
 800a800:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 800a8a8 <_strtod_l+0xad0>
 800a804:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a808:	e7b1      	b.n	800a76e <_strtod_l+0x996>
 800a80a:	2600      	movs	r6, #0
 800a80c:	4f32      	ldr	r7, [pc, #200]	@ (800a8d8 <_strtod_l+0xb00>)
 800a80e:	e7aa      	b.n	800a766 <_strtod_l+0x98e>
 800a810:	4b31      	ldr	r3, [pc, #196]	@ (800a8d8 <_strtod_l+0xb00>)
 800a812:	4630      	mov	r0, r6
 800a814:	4639      	mov	r1, r7
 800a816:	2200      	movs	r2, #0
 800a818:	f7f5 ff02 	bl	8000620 <__aeabi_dmul>
 800a81c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a81e:	4606      	mov	r6, r0
 800a820:	460f      	mov	r7, r1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d09f      	beq.n	800a766 <_strtod_l+0x98e>
 800a826:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a82a:	e7a0      	b.n	800a76e <_strtod_l+0x996>
 800a82c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800a8b0 <_strtod_l+0xad8>
 800a830:	ec57 6b17 	vmov	r6, r7, d7
 800a834:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a838:	e799      	b.n	800a76e <_strtod_l+0x996>
 800a83a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a83e:	9b08      	ldr	r3, [sp, #32]
 800a840:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1c1      	bne.n	800a7cc <_strtod_l+0x9f4>
 800a848:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a84c:	0d1b      	lsrs	r3, r3, #20
 800a84e:	051b      	lsls	r3, r3, #20
 800a850:	429d      	cmp	r5, r3
 800a852:	d1bb      	bne.n	800a7cc <_strtod_l+0x9f4>
 800a854:	4630      	mov	r0, r6
 800a856:	4639      	mov	r1, r7
 800a858:	f7f6 fa42 	bl	8000ce0 <__aeabi_d2lz>
 800a85c:	f7f5 feb2 	bl	80005c4 <__aeabi_l2d>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4630      	mov	r0, r6
 800a866:	4639      	mov	r1, r7
 800a868:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a86c:	f7f5 fd20 	bl	80002b0 <__aeabi_dsub>
 800a870:	460b      	mov	r3, r1
 800a872:	4602      	mov	r2, r0
 800a874:	ea46 060a 	orr.w	r6, r6, sl
 800a878:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a87c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a87e:	431e      	orrs	r6, r3
 800a880:	d06d      	beq.n	800a95e <_strtod_l+0xb86>
 800a882:	a30d      	add	r3, pc, #52	@ (adr r3, 800a8b8 <_strtod_l+0xae0>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f7f6 f93c 	bl	8000b04 <__aeabi_dcmplt>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	f47f accf 	bne.w	800a230 <_strtod_l+0x458>
 800a892:	a30b      	add	r3, pc, #44	@ (adr r3, 800a8c0 <_strtod_l+0xae8>)
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a89c:	f7f6 f950 	bl	8000b40 <__aeabi_dcmpgt>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d093      	beq.n	800a7cc <_strtod_l+0x9f4>
 800a8a4:	e4c4      	b.n	800a230 <_strtod_l+0x458>
 800a8a6:	bf00      	nop
 800a8a8:	00000000 	.word	0x00000000
 800a8ac:	bff00000 	.word	0xbff00000
 800a8b0:	00000000 	.word	0x00000000
 800a8b4:	3ff00000 	.word	0x3ff00000
 800a8b8:	94a03595 	.word	0x94a03595
 800a8bc:	3fdfffff 	.word	0x3fdfffff
 800a8c0:	35afe535 	.word	0x35afe535
 800a8c4:	3fe00000 	.word	0x3fe00000
 800a8c8:	000fffff 	.word	0x000fffff
 800a8cc:	7ff00000 	.word	0x7ff00000
 800a8d0:	7fefffff 	.word	0x7fefffff
 800a8d4:	3ff00000 	.word	0x3ff00000
 800a8d8:	3fe00000 	.word	0x3fe00000
 800a8dc:	7fe00000 	.word	0x7fe00000
 800a8e0:	7c9fffff 	.word	0x7c9fffff
 800a8e4:	9b08      	ldr	r3, [sp, #32]
 800a8e6:	b323      	cbz	r3, 800a932 <_strtod_l+0xb5a>
 800a8e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a8ec:	d821      	bhi.n	800a932 <_strtod_l+0xb5a>
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	4639      	mov	r1, r7
 800a8f2:	a327      	add	r3, pc, #156	@ (adr r3, 800a990 <_strtod_l+0xbb8>)
 800a8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f8:	f7f6 f90e 	bl	8000b18 <__aeabi_dcmple>
 800a8fc:	b1a0      	cbz	r0, 800a928 <_strtod_l+0xb50>
 800a8fe:	4639      	mov	r1, r7
 800a900:	4630      	mov	r0, r6
 800a902:	f7f6 f965 	bl	8000bd0 <__aeabi_d2uiz>
 800a906:	2801      	cmp	r0, #1
 800a908:	bf38      	it	cc
 800a90a:	2001      	movcc	r0, #1
 800a90c:	f7f5 fe0e 	bl	800052c <__aeabi_ui2d>
 800a910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a912:	4606      	mov	r6, r0
 800a914:	460f      	mov	r7, r1
 800a916:	b9fb      	cbnz	r3, 800a958 <_strtod_l+0xb80>
 800a918:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a91c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a91e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a920:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a924:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a928:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a92a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a92e:	1b5b      	subs	r3, r3, r5
 800a930:	9311      	str	r3, [sp, #68]	@ 0x44
 800a932:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a936:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a93a:	f7ff f8eb 	bl	8009b14 <__ulp>
 800a93e:	4650      	mov	r0, sl
 800a940:	4659      	mov	r1, fp
 800a942:	ec53 2b10 	vmov	r2, r3, d0
 800a946:	f7f5 fe6b 	bl	8000620 <__aeabi_dmul>
 800a94a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a94e:	f7f5 fcb1 	bl	80002b4 <__adddf3>
 800a952:	4682      	mov	sl, r0
 800a954:	468b      	mov	fp, r1
 800a956:	e772      	b.n	800a83e <_strtod_l+0xa66>
 800a958:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a95c:	e7e0      	b.n	800a920 <_strtod_l+0xb48>
 800a95e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a998 <_strtod_l+0xbc0>)
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	f7f6 f8ce 	bl	8000b04 <__aeabi_dcmplt>
 800a968:	e79a      	b.n	800a8a0 <_strtod_l+0xac8>
 800a96a:	2300      	movs	r3, #0
 800a96c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a96e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a970:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	f7ff ba6d 	b.w	8009e52 <_strtod_l+0x7a>
 800a978:	2a65      	cmp	r2, #101	@ 0x65
 800a97a:	f43f ab67 	beq.w	800a04c <_strtod_l+0x274>
 800a97e:	2a45      	cmp	r2, #69	@ 0x45
 800a980:	f43f ab64 	beq.w	800a04c <_strtod_l+0x274>
 800a984:	2301      	movs	r3, #1
 800a986:	f7ff bba0 	b.w	800a0ca <_strtod_l+0x2f2>
 800a98a:	bf00      	nop
 800a98c:	f3af 8000 	nop.w
 800a990:	ffc00000 	.word	0xffc00000
 800a994:	41dfffff 	.word	0x41dfffff
 800a998:	94a03595 	.word	0x94a03595
 800a99c:	3fcfffff 	.word	0x3fcfffff

0800a9a0 <_strtod_r>:
 800a9a0:	4b01      	ldr	r3, [pc, #4]	@ (800a9a8 <_strtod_r+0x8>)
 800a9a2:	f7ff ba19 	b.w	8009dd8 <_strtod_l>
 800a9a6:	bf00      	nop
 800a9a8:	2000006c 	.word	0x2000006c

0800a9ac <_strtol_l.constprop.0>:
 800a9ac:	2b24      	cmp	r3, #36	@ 0x24
 800a9ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9b2:	4686      	mov	lr, r0
 800a9b4:	4690      	mov	r8, r2
 800a9b6:	d801      	bhi.n	800a9bc <_strtol_l.constprop.0+0x10>
 800a9b8:	2b01      	cmp	r3, #1
 800a9ba:	d106      	bne.n	800a9ca <_strtol_l.constprop.0+0x1e>
 800a9bc:	f7fd fd9c 	bl	80084f8 <__errno>
 800a9c0:	2316      	movs	r3, #22
 800a9c2:	6003      	str	r3, [r0, #0]
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ca:	460d      	mov	r5, r1
 800a9cc:	4833      	ldr	r0, [pc, #204]	@ (800aa9c <_strtol_l.constprop.0+0xf0>)
 800a9ce:	462a      	mov	r2, r5
 800a9d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9d4:	5d06      	ldrb	r6, [r0, r4]
 800a9d6:	f016 0608 	ands.w	r6, r6, #8
 800a9da:	d1f8      	bne.n	800a9ce <_strtol_l.constprop.0+0x22>
 800a9dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800a9de:	d12d      	bne.n	800aa3c <_strtol_l.constprop.0+0x90>
 800a9e0:	782c      	ldrb	r4, [r5, #0]
 800a9e2:	2601      	movs	r6, #1
 800a9e4:	1c95      	adds	r5, r2, #2
 800a9e6:	f033 0210 	bics.w	r2, r3, #16
 800a9ea:	d109      	bne.n	800aa00 <_strtol_l.constprop.0+0x54>
 800a9ec:	2c30      	cmp	r4, #48	@ 0x30
 800a9ee:	d12a      	bne.n	800aa46 <_strtol_l.constprop.0+0x9a>
 800a9f0:	782a      	ldrb	r2, [r5, #0]
 800a9f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9f6:	2a58      	cmp	r2, #88	@ 0x58
 800a9f8:	d125      	bne.n	800aa46 <_strtol_l.constprop.0+0x9a>
 800a9fa:	786c      	ldrb	r4, [r5, #1]
 800a9fc:	2310      	movs	r3, #16
 800a9fe:	3502      	adds	r5, #2
 800aa00:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aa04:	2200      	movs	r2, #0
 800aa06:	f10c 3cff 	add.w	ip, ip, #4294967295
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	fbbc f9f3 	udiv	r9, ip, r3
 800aa10:	fb03 ca19 	mls	sl, r3, r9, ip
 800aa14:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aa18:	2f09      	cmp	r7, #9
 800aa1a:	d81b      	bhi.n	800aa54 <_strtol_l.constprop.0+0xa8>
 800aa1c:	463c      	mov	r4, r7
 800aa1e:	42a3      	cmp	r3, r4
 800aa20:	dd27      	ble.n	800aa72 <_strtol_l.constprop.0+0xc6>
 800aa22:	1c57      	adds	r7, r2, #1
 800aa24:	d007      	beq.n	800aa36 <_strtol_l.constprop.0+0x8a>
 800aa26:	4581      	cmp	r9, r0
 800aa28:	d320      	bcc.n	800aa6c <_strtol_l.constprop.0+0xc0>
 800aa2a:	d101      	bne.n	800aa30 <_strtol_l.constprop.0+0x84>
 800aa2c:	45a2      	cmp	sl, r4
 800aa2e:	db1d      	blt.n	800aa6c <_strtol_l.constprop.0+0xc0>
 800aa30:	fb00 4003 	mla	r0, r0, r3, r4
 800aa34:	2201      	movs	r2, #1
 800aa36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa3a:	e7eb      	b.n	800aa14 <_strtol_l.constprop.0+0x68>
 800aa3c:	2c2b      	cmp	r4, #43	@ 0x2b
 800aa3e:	bf04      	itt	eq
 800aa40:	782c      	ldrbeq	r4, [r5, #0]
 800aa42:	1c95      	addeq	r5, r2, #2
 800aa44:	e7cf      	b.n	800a9e6 <_strtol_l.constprop.0+0x3a>
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1da      	bne.n	800aa00 <_strtol_l.constprop.0+0x54>
 800aa4a:	2c30      	cmp	r4, #48	@ 0x30
 800aa4c:	bf0c      	ite	eq
 800aa4e:	2308      	moveq	r3, #8
 800aa50:	230a      	movne	r3, #10
 800aa52:	e7d5      	b.n	800aa00 <_strtol_l.constprop.0+0x54>
 800aa54:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aa58:	2f19      	cmp	r7, #25
 800aa5a:	d801      	bhi.n	800aa60 <_strtol_l.constprop.0+0xb4>
 800aa5c:	3c37      	subs	r4, #55	@ 0x37
 800aa5e:	e7de      	b.n	800aa1e <_strtol_l.constprop.0+0x72>
 800aa60:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aa64:	2f19      	cmp	r7, #25
 800aa66:	d804      	bhi.n	800aa72 <_strtol_l.constprop.0+0xc6>
 800aa68:	3c57      	subs	r4, #87	@ 0x57
 800aa6a:	e7d8      	b.n	800aa1e <_strtol_l.constprop.0+0x72>
 800aa6c:	f04f 32ff 	mov.w	r2, #4294967295
 800aa70:	e7e1      	b.n	800aa36 <_strtol_l.constprop.0+0x8a>
 800aa72:	1c53      	adds	r3, r2, #1
 800aa74:	d108      	bne.n	800aa88 <_strtol_l.constprop.0+0xdc>
 800aa76:	2322      	movs	r3, #34	@ 0x22
 800aa78:	4660      	mov	r0, ip
 800aa7a:	f8ce 3000 	str.w	r3, [lr]
 800aa7e:	f1b8 0f00 	cmp.w	r8, #0
 800aa82:	d0a0      	beq.n	800a9c6 <_strtol_l.constprop.0+0x1a>
 800aa84:	1e69      	subs	r1, r5, #1
 800aa86:	e006      	b.n	800aa96 <_strtol_l.constprop.0+0xea>
 800aa88:	b106      	cbz	r6, 800aa8c <_strtol_l.constprop.0+0xe0>
 800aa8a:	4240      	negs	r0, r0
 800aa8c:	f1b8 0f00 	cmp.w	r8, #0
 800aa90:	d099      	beq.n	800a9c6 <_strtol_l.constprop.0+0x1a>
 800aa92:	2a00      	cmp	r2, #0
 800aa94:	d1f6      	bne.n	800aa84 <_strtol_l.constprop.0+0xd8>
 800aa96:	f8c8 1000 	str.w	r1, [r8]
 800aa9a:	e794      	b.n	800a9c6 <_strtol_l.constprop.0+0x1a>
 800aa9c:	0800c6a9 	.word	0x0800c6a9

0800aaa0 <_strtol_r>:
 800aaa0:	f7ff bf84 	b.w	800a9ac <_strtol_l.constprop.0>

0800aaa4 <__ssputs_r>:
 800aaa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaa8:	461f      	mov	r7, r3
 800aaaa:	688e      	ldr	r6, [r1, #8]
 800aaac:	4682      	mov	sl, r0
 800aaae:	460c      	mov	r4, r1
 800aab0:	42be      	cmp	r6, r7
 800aab2:	4690      	mov	r8, r2
 800aab4:	680b      	ldr	r3, [r1, #0]
 800aab6:	d82d      	bhi.n	800ab14 <__ssputs_r+0x70>
 800aab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aabc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aac0:	d026      	beq.n	800ab10 <__ssputs_r+0x6c>
 800aac2:	6965      	ldr	r5, [r4, #20]
 800aac4:	6909      	ldr	r1, [r1, #16]
 800aac6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaca:	eba3 0901 	sub.w	r9, r3, r1
 800aace:	1c7b      	adds	r3, r7, #1
 800aad0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aad4:	444b      	add	r3, r9
 800aad6:	106d      	asrs	r5, r5, #1
 800aad8:	429d      	cmp	r5, r3
 800aada:	bf38      	it	cc
 800aadc:	461d      	movcc	r5, r3
 800aade:	0553      	lsls	r3, r2, #21
 800aae0:	d527      	bpl.n	800ab32 <__ssputs_r+0x8e>
 800aae2:	4629      	mov	r1, r5
 800aae4:	f7fe fc10 	bl	8009308 <_malloc_r>
 800aae8:	4606      	mov	r6, r0
 800aaea:	b360      	cbz	r0, 800ab46 <__ssputs_r+0xa2>
 800aaec:	464a      	mov	r2, r9
 800aaee:	6921      	ldr	r1, [r4, #16]
 800aaf0:	f000 fbde 	bl	800b2b0 <memcpy>
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aafa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aafe:	81a3      	strh	r3, [r4, #12]
 800ab00:	6126      	str	r6, [r4, #16]
 800ab02:	444e      	add	r6, r9
 800ab04:	6165      	str	r5, [r4, #20]
 800ab06:	eba5 0509 	sub.w	r5, r5, r9
 800ab0a:	6026      	str	r6, [r4, #0]
 800ab0c:	463e      	mov	r6, r7
 800ab0e:	60a5      	str	r5, [r4, #8]
 800ab10:	42be      	cmp	r6, r7
 800ab12:	d900      	bls.n	800ab16 <__ssputs_r+0x72>
 800ab14:	463e      	mov	r6, r7
 800ab16:	4632      	mov	r2, r6
 800ab18:	4641      	mov	r1, r8
 800ab1a:	6820      	ldr	r0, [r4, #0]
 800ab1c:	f000 fb69 	bl	800b1f2 <memmove>
 800ab20:	68a3      	ldr	r3, [r4, #8]
 800ab22:	2000      	movs	r0, #0
 800ab24:	1b9b      	subs	r3, r3, r6
 800ab26:	60a3      	str	r3, [r4, #8]
 800ab28:	6823      	ldr	r3, [r4, #0]
 800ab2a:	4433      	add	r3, r6
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab32:	462a      	mov	r2, r5
 800ab34:	f000 ff4d 	bl	800b9d2 <_realloc_r>
 800ab38:	4606      	mov	r6, r0
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d1e0      	bne.n	800ab00 <__ssputs_r+0x5c>
 800ab3e:	6921      	ldr	r1, [r4, #16]
 800ab40:	4650      	mov	r0, sl
 800ab42:	f7fe fb6d 	bl	8009220 <_free_r>
 800ab46:	230c      	movs	r3, #12
 800ab48:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4c:	f8ca 3000 	str.w	r3, [sl]
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab56:	81a3      	strh	r3, [r4, #12]
 800ab58:	e7e9      	b.n	800ab2e <__ssputs_r+0x8a>
	...

0800ab5c <_svfiprintf_r>:
 800ab5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab60:	4698      	mov	r8, r3
 800ab62:	898b      	ldrh	r3, [r1, #12]
 800ab64:	b09d      	sub	sp, #116	@ 0x74
 800ab66:	4607      	mov	r7, r0
 800ab68:	061b      	lsls	r3, r3, #24
 800ab6a:	460d      	mov	r5, r1
 800ab6c:	4614      	mov	r4, r2
 800ab6e:	d510      	bpl.n	800ab92 <_svfiprintf_r+0x36>
 800ab70:	690b      	ldr	r3, [r1, #16]
 800ab72:	b973      	cbnz	r3, 800ab92 <_svfiprintf_r+0x36>
 800ab74:	2140      	movs	r1, #64	@ 0x40
 800ab76:	f7fe fbc7 	bl	8009308 <_malloc_r>
 800ab7a:	6028      	str	r0, [r5, #0]
 800ab7c:	6128      	str	r0, [r5, #16]
 800ab7e:	b930      	cbnz	r0, 800ab8e <_svfiprintf_r+0x32>
 800ab80:	230c      	movs	r3, #12
 800ab82:	603b      	str	r3, [r7, #0]
 800ab84:	f04f 30ff 	mov.w	r0, #4294967295
 800ab88:	b01d      	add	sp, #116	@ 0x74
 800ab8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8e:	2340      	movs	r3, #64	@ 0x40
 800ab90:	616b      	str	r3, [r5, #20]
 800ab92:	2300      	movs	r3, #0
 800ab94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab98:	f04f 0901 	mov.w	r9, #1
 800ab9c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ad40 <_svfiprintf_r+0x1e4>
 800aba0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aba2:	2320      	movs	r3, #32
 800aba4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aba8:	2330      	movs	r3, #48	@ 0x30
 800abaa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abae:	4623      	mov	r3, r4
 800abb0:	469a      	mov	sl, r3
 800abb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb6:	b10a      	cbz	r2, 800abbc <_svfiprintf_r+0x60>
 800abb8:	2a25      	cmp	r2, #37	@ 0x25
 800abba:	d1f9      	bne.n	800abb0 <_svfiprintf_r+0x54>
 800abbc:	ebba 0b04 	subs.w	fp, sl, r4
 800abc0:	d00b      	beq.n	800abda <_svfiprintf_r+0x7e>
 800abc2:	465b      	mov	r3, fp
 800abc4:	4622      	mov	r2, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	4638      	mov	r0, r7
 800abca:	f7ff ff6b 	bl	800aaa4 <__ssputs_r>
 800abce:	3001      	adds	r0, #1
 800abd0:	f000 80a7 	beq.w	800ad22 <_svfiprintf_r+0x1c6>
 800abd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abd6:	445a      	add	r2, fp
 800abd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800abda:	f89a 3000 	ldrb.w	r3, [sl]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 809f 	beq.w	800ad22 <_svfiprintf_r+0x1c6>
 800abe4:	2300      	movs	r3, #0
 800abe6:	f04f 32ff 	mov.w	r2, #4294967295
 800abea:	f10a 0a01 	add.w	sl, sl, #1
 800abee:	9304      	str	r3, [sp, #16]
 800abf0:	9307      	str	r3, [sp, #28]
 800abf2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abf6:	931a      	str	r3, [sp, #104]	@ 0x68
 800abf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abfc:	4654      	mov	r4, sl
 800abfe:	2205      	movs	r2, #5
 800ac00:	484f      	ldr	r0, [pc, #316]	@ (800ad40 <_svfiprintf_r+0x1e4>)
 800ac02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac06:	f7fd fca4 	bl	8008552 <memchr>
 800ac0a:	9a04      	ldr	r2, [sp, #16]
 800ac0c:	b9d8      	cbnz	r0, 800ac46 <_svfiprintf_r+0xea>
 800ac0e:	06d0      	lsls	r0, r2, #27
 800ac10:	bf44      	itt	mi
 800ac12:	2320      	movmi	r3, #32
 800ac14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac18:	0711      	lsls	r1, r2, #28
 800ac1a:	bf44      	itt	mi
 800ac1c:	232b      	movmi	r3, #43	@ 0x2b
 800ac1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac22:	f89a 3000 	ldrb.w	r3, [sl]
 800ac26:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac28:	d015      	beq.n	800ac56 <_svfiprintf_r+0xfa>
 800ac2a:	9a07      	ldr	r2, [sp, #28]
 800ac2c:	4654      	mov	r4, sl
 800ac2e:	2000      	movs	r0, #0
 800ac30:	f04f 0c0a 	mov.w	ip, #10
 800ac34:	4621      	mov	r1, r4
 800ac36:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac3a:	3b30      	subs	r3, #48	@ 0x30
 800ac3c:	2b09      	cmp	r3, #9
 800ac3e:	d94b      	bls.n	800acd8 <_svfiprintf_r+0x17c>
 800ac40:	b1b0      	cbz	r0, 800ac70 <_svfiprintf_r+0x114>
 800ac42:	9207      	str	r2, [sp, #28]
 800ac44:	e014      	b.n	800ac70 <_svfiprintf_r+0x114>
 800ac46:	eba0 0308 	sub.w	r3, r0, r8
 800ac4a:	46a2      	mov	sl, r4
 800ac4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac50:	4313      	orrs	r3, r2
 800ac52:	9304      	str	r3, [sp, #16]
 800ac54:	e7d2      	b.n	800abfc <_svfiprintf_r+0xa0>
 800ac56:	9b03      	ldr	r3, [sp, #12]
 800ac58:	1d19      	adds	r1, r3, #4
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	9103      	str	r1, [sp, #12]
 800ac60:	bfbb      	ittet	lt
 800ac62:	425b      	neglt	r3, r3
 800ac64:	f042 0202 	orrlt.w	r2, r2, #2
 800ac68:	9307      	strge	r3, [sp, #28]
 800ac6a:	9307      	strlt	r3, [sp, #28]
 800ac6c:	bfb8      	it	lt
 800ac6e:	9204      	strlt	r2, [sp, #16]
 800ac70:	7823      	ldrb	r3, [r4, #0]
 800ac72:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac74:	d10a      	bne.n	800ac8c <_svfiprintf_r+0x130>
 800ac76:	7863      	ldrb	r3, [r4, #1]
 800ac78:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac7a:	d132      	bne.n	800ace2 <_svfiprintf_r+0x186>
 800ac7c:	9b03      	ldr	r3, [sp, #12]
 800ac7e:	3402      	adds	r4, #2
 800ac80:	1d1a      	adds	r2, r3, #4
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac88:	9203      	str	r2, [sp, #12]
 800ac8a:	9305      	str	r3, [sp, #20]
 800ac8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad50 <_svfiprintf_r+0x1f4>
 800ac90:	2203      	movs	r2, #3
 800ac92:	7821      	ldrb	r1, [r4, #0]
 800ac94:	4650      	mov	r0, sl
 800ac96:	f7fd fc5c 	bl	8008552 <memchr>
 800ac9a:	b138      	cbz	r0, 800acac <_svfiprintf_r+0x150>
 800ac9c:	eba0 000a 	sub.w	r0, r0, sl
 800aca0:	2240      	movs	r2, #64	@ 0x40
 800aca2:	9b04      	ldr	r3, [sp, #16]
 800aca4:	3401      	adds	r4, #1
 800aca6:	4082      	lsls	r2, r0
 800aca8:	4313      	orrs	r3, r2
 800acaa:	9304      	str	r3, [sp, #16]
 800acac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb0:	2206      	movs	r2, #6
 800acb2:	4824      	ldr	r0, [pc, #144]	@ (800ad44 <_svfiprintf_r+0x1e8>)
 800acb4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acb8:	f7fd fc4b 	bl	8008552 <memchr>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d036      	beq.n	800ad2e <_svfiprintf_r+0x1d2>
 800acc0:	4b21      	ldr	r3, [pc, #132]	@ (800ad48 <_svfiprintf_r+0x1ec>)
 800acc2:	bb1b      	cbnz	r3, 800ad0c <_svfiprintf_r+0x1b0>
 800acc4:	9b03      	ldr	r3, [sp, #12]
 800acc6:	3307      	adds	r3, #7
 800acc8:	f023 0307 	bic.w	r3, r3, #7
 800accc:	3308      	adds	r3, #8
 800acce:	9303      	str	r3, [sp, #12]
 800acd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acd2:	4433      	add	r3, r6
 800acd4:	9309      	str	r3, [sp, #36]	@ 0x24
 800acd6:	e76a      	b.n	800abae <_svfiprintf_r+0x52>
 800acd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acdc:	460c      	mov	r4, r1
 800acde:	2001      	movs	r0, #1
 800ace0:	e7a8      	b.n	800ac34 <_svfiprintf_r+0xd8>
 800ace2:	2300      	movs	r3, #0
 800ace4:	3401      	adds	r4, #1
 800ace6:	f04f 0c0a 	mov.w	ip, #10
 800acea:	4619      	mov	r1, r3
 800acec:	9305      	str	r3, [sp, #20]
 800acee:	4620      	mov	r0, r4
 800acf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf4:	3a30      	subs	r2, #48	@ 0x30
 800acf6:	2a09      	cmp	r2, #9
 800acf8:	d903      	bls.n	800ad02 <_svfiprintf_r+0x1a6>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0c6      	beq.n	800ac8c <_svfiprintf_r+0x130>
 800acfe:	9105      	str	r1, [sp, #20]
 800ad00:	e7c4      	b.n	800ac8c <_svfiprintf_r+0x130>
 800ad02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad06:	4604      	mov	r4, r0
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e7f0      	b.n	800acee <_svfiprintf_r+0x192>
 800ad0c:	ab03      	add	r3, sp, #12
 800ad0e:	462a      	mov	r2, r5
 800ad10:	a904      	add	r1, sp, #16
 800ad12:	4638      	mov	r0, r7
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	4b0d      	ldr	r3, [pc, #52]	@ (800ad4c <_svfiprintf_r+0x1f0>)
 800ad18:	f7fc fba4 	bl	8007464 <_printf_float>
 800ad1c:	1c42      	adds	r2, r0, #1
 800ad1e:	4606      	mov	r6, r0
 800ad20:	d1d6      	bne.n	800acd0 <_svfiprintf_r+0x174>
 800ad22:	89ab      	ldrh	r3, [r5, #12]
 800ad24:	065b      	lsls	r3, r3, #25
 800ad26:	f53f af2d 	bmi.w	800ab84 <_svfiprintf_r+0x28>
 800ad2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad2c:	e72c      	b.n	800ab88 <_svfiprintf_r+0x2c>
 800ad2e:	ab03      	add	r3, sp, #12
 800ad30:	462a      	mov	r2, r5
 800ad32:	a904      	add	r1, sp, #16
 800ad34:	4638      	mov	r0, r7
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	4b04      	ldr	r3, [pc, #16]	@ (800ad4c <_svfiprintf_r+0x1f0>)
 800ad3a:	f7fc fe2f 	bl	800799c <_printf_i>
 800ad3e:	e7ed      	b.n	800ad1c <_svfiprintf_r+0x1c0>
 800ad40:	0800c7a9 	.word	0x0800c7a9
 800ad44:	0800c7b3 	.word	0x0800c7b3
 800ad48:	08007465 	.word	0x08007465
 800ad4c:	0800aaa5 	.word	0x0800aaa5
 800ad50:	0800c7af 	.word	0x0800c7af

0800ad54 <__sfputc_r>:
 800ad54:	6893      	ldr	r3, [r2, #8]
 800ad56:	3b01      	subs	r3, #1
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	6093      	str	r3, [r2, #8]
 800ad5c:	b410      	push	{r4}
 800ad5e:	da08      	bge.n	800ad72 <__sfputc_r+0x1e>
 800ad60:	6994      	ldr	r4, [r2, #24]
 800ad62:	42a3      	cmp	r3, r4
 800ad64:	db01      	blt.n	800ad6a <__sfputc_r+0x16>
 800ad66:	290a      	cmp	r1, #10
 800ad68:	d103      	bne.n	800ad72 <__sfputc_r+0x1e>
 800ad6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad6e:	f7fd badc 	b.w	800832a <__swbuf_r>
 800ad72:	6813      	ldr	r3, [r2, #0]
 800ad74:	1c58      	adds	r0, r3, #1
 800ad76:	6010      	str	r0, [r2, #0]
 800ad78:	4608      	mov	r0, r1
 800ad7a:	7019      	strb	r1, [r3, #0]
 800ad7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad80:	4770      	bx	lr

0800ad82 <__sfputs_r>:
 800ad82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad84:	4606      	mov	r6, r0
 800ad86:	460f      	mov	r7, r1
 800ad88:	4614      	mov	r4, r2
 800ad8a:	18d5      	adds	r5, r2, r3
 800ad8c:	42ac      	cmp	r4, r5
 800ad8e:	d101      	bne.n	800ad94 <__sfputs_r+0x12>
 800ad90:	2000      	movs	r0, #0
 800ad92:	e007      	b.n	800ada4 <__sfputs_r+0x22>
 800ad94:	463a      	mov	r2, r7
 800ad96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	f7ff ffda 	bl	800ad54 <__sfputc_r>
 800ada0:	1c43      	adds	r3, r0, #1
 800ada2:	d1f3      	bne.n	800ad8c <__sfputs_r+0xa>
 800ada4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ada8 <_vfiprintf_r>:
 800ada8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adac:	460d      	mov	r5, r1
 800adae:	b09d      	sub	sp, #116	@ 0x74
 800adb0:	4614      	mov	r4, r2
 800adb2:	4698      	mov	r8, r3
 800adb4:	4606      	mov	r6, r0
 800adb6:	b118      	cbz	r0, 800adc0 <_vfiprintf_r+0x18>
 800adb8:	6a03      	ldr	r3, [r0, #32]
 800adba:	b90b      	cbnz	r3, 800adc0 <_vfiprintf_r+0x18>
 800adbc:	f7fd f9ac 	bl	8008118 <__sinit>
 800adc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adc2:	07d9      	lsls	r1, r3, #31
 800adc4:	d405      	bmi.n	800add2 <_vfiprintf_r+0x2a>
 800adc6:	89ab      	ldrh	r3, [r5, #12]
 800adc8:	059a      	lsls	r2, r3, #22
 800adca:	d402      	bmi.n	800add2 <_vfiprintf_r+0x2a>
 800adcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adce:	f7fd fbbe 	bl	800854e <__retarget_lock_acquire_recursive>
 800add2:	89ab      	ldrh	r3, [r5, #12]
 800add4:	071b      	lsls	r3, r3, #28
 800add6:	d501      	bpl.n	800addc <_vfiprintf_r+0x34>
 800add8:	692b      	ldr	r3, [r5, #16]
 800adda:	b99b      	cbnz	r3, 800ae04 <_vfiprintf_r+0x5c>
 800addc:	4629      	mov	r1, r5
 800adde:	4630      	mov	r0, r6
 800ade0:	f7fd fae2 	bl	80083a8 <__swsetup_r>
 800ade4:	b170      	cbz	r0, 800ae04 <_vfiprintf_r+0x5c>
 800ade6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ade8:	07dc      	lsls	r4, r3, #31
 800adea:	d504      	bpl.n	800adf6 <_vfiprintf_r+0x4e>
 800adec:	f04f 30ff 	mov.w	r0, #4294967295
 800adf0:	b01d      	add	sp, #116	@ 0x74
 800adf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf6:	89ab      	ldrh	r3, [r5, #12]
 800adf8:	0598      	lsls	r0, r3, #22
 800adfa:	d4f7      	bmi.n	800adec <_vfiprintf_r+0x44>
 800adfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adfe:	f7fd fba7 	bl	8008550 <__retarget_lock_release_recursive>
 800ae02:	e7f3      	b.n	800adec <_vfiprintf_r+0x44>
 800ae04:	2300      	movs	r3, #0
 800ae06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae0a:	f04f 0901 	mov.w	r9, #1
 800ae0e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800afc4 <_vfiprintf_r+0x21c>
 800ae12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae14:	2320      	movs	r3, #32
 800ae16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae1a:	2330      	movs	r3, #48	@ 0x30
 800ae1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae20:	4623      	mov	r3, r4
 800ae22:	469a      	mov	sl, r3
 800ae24:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae28:	b10a      	cbz	r2, 800ae2e <_vfiprintf_r+0x86>
 800ae2a:	2a25      	cmp	r2, #37	@ 0x25
 800ae2c:	d1f9      	bne.n	800ae22 <_vfiprintf_r+0x7a>
 800ae2e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae32:	d00b      	beq.n	800ae4c <_vfiprintf_r+0xa4>
 800ae34:	465b      	mov	r3, fp
 800ae36:	4622      	mov	r2, r4
 800ae38:	4629      	mov	r1, r5
 800ae3a:	4630      	mov	r0, r6
 800ae3c:	f7ff ffa1 	bl	800ad82 <__sfputs_r>
 800ae40:	3001      	adds	r0, #1
 800ae42:	f000 80a7 	beq.w	800af94 <_vfiprintf_r+0x1ec>
 800ae46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae48:	445a      	add	r2, fp
 800ae4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 809f 	beq.w	800af94 <_vfiprintf_r+0x1ec>
 800ae56:	2300      	movs	r3, #0
 800ae58:	f04f 32ff 	mov.w	r2, #4294967295
 800ae5c:	f10a 0a01 	add.w	sl, sl, #1
 800ae60:	9304      	str	r3, [sp, #16]
 800ae62:	9307      	str	r3, [sp, #28]
 800ae64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae68:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae6e:	4654      	mov	r4, sl
 800ae70:	2205      	movs	r2, #5
 800ae72:	4854      	ldr	r0, [pc, #336]	@ (800afc4 <_vfiprintf_r+0x21c>)
 800ae74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae78:	f7fd fb6b 	bl	8008552 <memchr>
 800ae7c:	9a04      	ldr	r2, [sp, #16]
 800ae7e:	b9d8      	cbnz	r0, 800aeb8 <_vfiprintf_r+0x110>
 800ae80:	06d1      	lsls	r1, r2, #27
 800ae82:	bf44      	itt	mi
 800ae84:	2320      	movmi	r3, #32
 800ae86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae8a:	0713      	lsls	r3, r2, #28
 800ae8c:	bf44      	itt	mi
 800ae8e:	232b      	movmi	r3, #43	@ 0x2b
 800ae90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae94:	f89a 3000 	ldrb.w	r3, [sl]
 800ae98:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae9a:	d015      	beq.n	800aec8 <_vfiprintf_r+0x120>
 800ae9c:	9a07      	ldr	r2, [sp, #28]
 800ae9e:	4654      	mov	r4, sl
 800aea0:	2000      	movs	r0, #0
 800aea2:	f04f 0c0a 	mov.w	ip, #10
 800aea6:	4621      	mov	r1, r4
 800aea8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeac:	3b30      	subs	r3, #48	@ 0x30
 800aeae:	2b09      	cmp	r3, #9
 800aeb0:	d94b      	bls.n	800af4a <_vfiprintf_r+0x1a2>
 800aeb2:	b1b0      	cbz	r0, 800aee2 <_vfiprintf_r+0x13a>
 800aeb4:	9207      	str	r2, [sp, #28]
 800aeb6:	e014      	b.n	800aee2 <_vfiprintf_r+0x13a>
 800aeb8:	eba0 0308 	sub.w	r3, r0, r8
 800aebc:	46a2      	mov	sl, r4
 800aebe:	fa09 f303 	lsl.w	r3, r9, r3
 800aec2:	4313      	orrs	r3, r2
 800aec4:	9304      	str	r3, [sp, #16]
 800aec6:	e7d2      	b.n	800ae6e <_vfiprintf_r+0xc6>
 800aec8:	9b03      	ldr	r3, [sp, #12]
 800aeca:	1d19      	adds	r1, r3, #4
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	9103      	str	r1, [sp, #12]
 800aed2:	bfbb      	ittet	lt
 800aed4:	425b      	neglt	r3, r3
 800aed6:	f042 0202 	orrlt.w	r2, r2, #2
 800aeda:	9307      	strge	r3, [sp, #28]
 800aedc:	9307      	strlt	r3, [sp, #28]
 800aede:	bfb8      	it	lt
 800aee0:	9204      	strlt	r2, [sp, #16]
 800aee2:	7823      	ldrb	r3, [r4, #0]
 800aee4:	2b2e      	cmp	r3, #46	@ 0x2e
 800aee6:	d10a      	bne.n	800aefe <_vfiprintf_r+0x156>
 800aee8:	7863      	ldrb	r3, [r4, #1]
 800aeea:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeec:	d132      	bne.n	800af54 <_vfiprintf_r+0x1ac>
 800aeee:	9b03      	ldr	r3, [sp, #12]
 800aef0:	3402      	adds	r4, #2
 800aef2:	1d1a      	adds	r2, r3, #4
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aefa:	9203      	str	r2, [sp, #12]
 800aefc:	9305      	str	r3, [sp, #20]
 800aefe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800afd4 <_vfiprintf_r+0x22c>
 800af02:	2203      	movs	r2, #3
 800af04:	7821      	ldrb	r1, [r4, #0]
 800af06:	4650      	mov	r0, sl
 800af08:	f7fd fb23 	bl	8008552 <memchr>
 800af0c:	b138      	cbz	r0, 800af1e <_vfiprintf_r+0x176>
 800af0e:	eba0 000a 	sub.w	r0, r0, sl
 800af12:	2240      	movs	r2, #64	@ 0x40
 800af14:	9b04      	ldr	r3, [sp, #16]
 800af16:	3401      	adds	r4, #1
 800af18:	4082      	lsls	r2, r0
 800af1a:	4313      	orrs	r3, r2
 800af1c:	9304      	str	r3, [sp, #16]
 800af1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af22:	2206      	movs	r2, #6
 800af24:	4828      	ldr	r0, [pc, #160]	@ (800afc8 <_vfiprintf_r+0x220>)
 800af26:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af2a:	f7fd fb12 	bl	8008552 <memchr>
 800af2e:	2800      	cmp	r0, #0
 800af30:	d03f      	beq.n	800afb2 <_vfiprintf_r+0x20a>
 800af32:	4b26      	ldr	r3, [pc, #152]	@ (800afcc <_vfiprintf_r+0x224>)
 800af34:	bb1b      	cbnz	r3, 800af7e <_vfiprintf_r+0x1d6>
 800af36:	9b03      	ldr	r3, [sp, #12]
 800af38:	3307      	adds	r3, #7
 800af3a:	f023 0307 	bic.w	r3, r3, #7
 800af3e:	3308      	adds	r3, #8
 800af40:	9303      	str	r3, [sp, #12]
 800af42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af44:	443b      	add	r3, r7
 800af46:	9309      	str	r3, [sp, #36]	@ 0x24
 800af48:	e76a      	b.n	800ae20 <_vfiprintf_r+0x78>
 800af4a:	fb0c 3202 	mla	r2, ip, r2, r3
 800af4e:	460c      	mov	r4, r1
 800af50:	2001      	movs	r0, #1
 800af52:	e7a8      	b.n	800aea6 <_vfiprintf_r+0xfe>
 800af54:	2300      	movs	r3, #0
 800af56:	3401      	adds	r4, #1
 800af58:	f04f 0c0a 	mov.w	ip, #10
 800af5c:	4619      	mov	r1, r3
 800af5e:	9305      	str	r3, [sp, #20]
 800af60:	4620      	mov	r0, r4
 800af62:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af66:	3a30      	subs	r2, #48	@ 0x30
 800af68:	2a09      	cmp	r2, #9
 800af6a:	d903      	bls.n	800af74 <_vfiprintf_r+0x1cc>
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d0c6      	beq.n	800aefe <_vfiprintf_r+0x156>
 800af70:	9105      	str	r1, [sp, #20]
 800af72:	e7c4      	b.n	800aefe <_vfiprintf_r+0x156>
 800af74:	fb0c 2101 	mla	r1, ip, r1, r2
 800af78:	4604      	mov	r4, r0
 800af7a:	2301      	movs	r3, #1
 800af7c:	e7f0      	b.n	800af60 <_vfiprintf_r+0x1b8>
 800af7e:	ab03      	add	r3, sp, #12
 800af80:	462a      	mov	r2, r5
 800af82:	a904      	add	r1, sp, #16
 800af84:	4630      	mov	r0, r6
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	4b11      	ldr	r3, [pc, #68]	@ (800afd0 <_vfiprintf_r+0x228>)
 800af8a:	f7fc fa6b 	bl	8007464 <_printf_float>
 800af8e:	4607      	mov	r7, r0
 800af90:	1c78      	adds	r0, r7, #1
 800af92:	d1d6      	bne.n	800af42 <_vfiprintf_r+0x19a>
 800af94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af96:	07d9      	lsls	r1, r3, #31
 800af98:	d405      	bmi.n	800afa6 <_vfiprintf_r+0x1fe>
 800af9a:	89ab      	ldrh	r3, [r5, #12]
 800af9c:	059a      	lsls	r2, r3, #22
 800af9e:	d402      	bmi.n	800afa6 <_vfiprintf_r+0x1fe>
 800afa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afa2:	f7fd fad5 	bl	8008550 <__retarget_lock_release_recursive>
 800afa6:	89ab      	ldrh	r3, [r5, #12]
 800afa8:	065b      	lsls	r3, r3, #25
 800afaa:	f53f af1f 	bmi.w	800adec <_vfiprintf_r+0x44>
 800afae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afb0:	e71e      	b.n	800adf0 <_vfiprintf_r+0x48>
 800afb2:	ab03      	add	r3, sp, #12
 800afb4:	462a      	mov	r2, r5
 800afb6:	a904      	add	r1, sp, #16
 800afb8:	4630      	mov	r0, r6
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4b04      	ldr	r3, [pc, #16]	@ (800afd0 <_vfiprintf_r+0x228>)
 800afbe:	f7fc fced 	bl	800799c <_printf_i>
 800afc2:	e7e4      	b.n	800af8e <_vfiprintf_r+0x1e6>
 800afc4:	0800c7a9 	.word	0x0800c7a9
 800afc8:	0800c7b3 	.word	0x0800c7b3
 800afcc:	08007465 	.word	0x08007465
 800afd0:	0800ad83 	.word	0x0800ad83
 800afd4:	0800c7af 	.word	0x0800c7af

0800afd8 <__sflush_r>:
 800afd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe0:	0716      	lsls	r6, r2, #28
 800afe2:	4605      	mov	r5, r0
 800afe4:	460c      	mov	r4, r1
 800afe6:	d454      	bmi.n	800b092 <__sflush_r+0xba>
 800afe8:	684b      	ldr	r3, [r1, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	dc02      	bgt.n	800aff4 <__sflush_r+0x1c>
 800afee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	dd48      	ble.n	800b086 <__sflush_r+0xae>
 800aff4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aff6:	2e00      	cmp	r6, #0
 800aff8:	d045      	beq.n	800b086 <__sflush_r+0xae>
 800affa:	2300      	movs	r3, #0
 800affc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b000:	682f      	ldr	r7, [r5, #0]
 800b002:	6a21      	ldr	r1, [r4, #32]
 800b004:	602b      	str	r3, [r5, #0]
 800b006:	d030      	beq.n	800b06a <__sflush_r+0x92>
 800b008:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b00a:	89a3      	ldrh	r3, [r4, #12]
 800b00c:	0759      	lsls	r1, r3, #29
 800b00e:	d505      	bpl.n	800b01c <__sflush_r+0x44>
 800b010:	6863      	ldr	r3, [r4, #4]
 800b012:	1ad2      	subs	r2, r2, r3
 800b014:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b016:	b10b      	cbz	r3, 800b01c <__sflush_r+0x44>
 800b018:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b01a:	1ad2      	subs	r2, r2, r3
 800b01c:	2300      	movs	r3, #0
 800b01e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b020:	6a21      	ldr	r1, [r4, #32]
 800b022:	4628      	mov	r0, r5
 800b024:	47b0      	blx	r6
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	d106      	bne.n	800b03a <__sflush_r+0x62>
 800b02c:	6829      	ldr	r1, [r5, #0]
 800b02e:	291d      	cmp	r1, #29
 800b030:	d82b      	bhi.n	800b08a <__sflush_r+0xb2>
 800b032:	4a2a      	ldr	r2, [pc, #168]	@ (800b0dc <__sflush_r+0x104>)
 800b034:	410a      	asrs	r2, r1
 800b036:	07d6      	lsls	r6, r2, #31
 800b038:	d427      	bmi.n	800b08a <__sflush_r+0xb2>
 800b03a:	2200      	movs	r2, #0
 800b03c:	04d9      	lsls	r1, r3, #19
 800b03e:	6062      	str	r2, [r4, #4]
 800b040:	6922      	ldr	r2, [r4, #16]
 800b042:	6022      	str	r2, [r4, #0]
 800b044:	d504      	bpl.n	800b050 <__sflush_r+0x78>
 800b046:	1c42      	adds	r2, r0, #1
 800b048:	d101      	bne.n	800b04e <__sflush_r+0x76>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	b903      	cbnz	r3, 800b050 <__sflush_r+0x78>
 800b04e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b052:	602f      	str	r7, [r5, #0]
 800b054:	b1b9      	cbz	r1, 800b086 <__sflush_r+0xae>
 800b056:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b05a:	4299      	cmp	r1, r3
 800b05c:	d002      	beq.n	800b064 <__sflush_r+0x8c>
 800b05e:	4628      	mov	r0, r5
 800b060:	f7fe f8de 	bl	8009220 <_free_r>
 800b064:	2300      	movs	r3, #0
 800b066:	6363      	str	r3, [r4, #52]	@ 0x34
 800b068:	e00d      	b.n	800b086 <__sflush_r+0xae>
 800b06a:	2301      	movs	r3, #1
 800b06c:	4628      	mov	r0, r5
 800b06e:	47b0      	blx	r6
 800b070:	4602      	mov	r2, r0
 800b072:	1c50      	adds	r0, r2, #1
 800b074:	d1c9      	bne.n	800b00a <__sflush_r+0x32>
 800b076:	682b      	ldr	r3, [r5, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0c6      	beq.n	800b00a <__sflush_r+0x32>
 800b07c:	2b1d      	cmp	r3, #29
 800b07e:	d001      	beq.n	800b084 <__sflush_r+0xac>
 800b080:	2b16      	cmp	r3, #22
 800b082:	d11d      	bne.n	800b0c0 <__sflush_r+0xe8>
 800b084:	602f      	str	r7, [r5, #0]
 800b086:	2000      	movs	r0, #0
 800b088:	e021      	b.n	800b0ce <__sflush_r+0xf6>
 800b08a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b08e:	b21b      	sxth	r3, r3
 800b090:	e01a      	b.n	800b0c8 <__sflush_r+0xf0>
 800b092:	690f      	ldr	r7, [r1, #16]
 800b094:	2f00      	cmp	r7, #0
 800b096:	d0f6      	beq.n	800b086 <__sflush_r+0xae>
 800b098:	0793      	lsls	r3, r2, #30
 800b09a:	680e      	ldr	r6, [r1, #0]
 800b09c:	600f      	str	r7, [r1, #0]
 800b09e:	bf0c      	ite	eq
 800b0a0:	694b      	ldreq	r3, [r1, #20]
 800b0a2:	2300      	movne	r3, #0
 800b0a4:	eba6 0807 	sub.w	r8, r6, r7
 800b0a8:	608b      	str	r3, [r1, #8]
 800b0aa:	f1b8 0f00 	cmp.w	r8, #0
 800b0ae:	ddea      	ble.n	800b086 <__sflush_r+0xae>
 800b0b0:	4643      	mov	r3, r8
 800b0b2:	463a      	mov	r2, r7
 800b0b4:	6a21      	ldr	r1, [r4, #32]
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0ba:	47b0      	blx	r6
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	dc08      	bgt.n	800b0d2 <__sflush_r+0xfa>
 800b0c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0cc:	81a3      	strh	r3, [r4, #12]
 800b0ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0d2:	4407      	add	r7, r0
 800b0d4:	eba8 0800 	sub.w	r8, r8, r0
 800b0d8:	e7e7      	b.n	800b0aa <__sflush_r+0xd2>
 800b0da:	bf00      	nop
 800b0dc:	dfbffffe 	.word	0xdfbffffe

0800b0e0 <_fflush_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	690b      	ldr	r3, [r1, #16]
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	b913      	cbnz	r3, 800b0f0 <_fflush_r+0x10>
 800b0ea:	2500      	movs	r5, #0
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	b118      	cbz	r0, 800b0fa <_fflush_r+0x1a>
 800b0f2:	6a03      	ldr	r3, [r0, #32]
 800b0f4:	b90b      	cbnz	r3, 800b0fa <_fflush_r+0x1a>
 800b0f6:	f7fd f80f 	bl	8008118 <__sinit>
 800b0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d0f3      	beq.n	800b0ea <_fflush_r+0xa>
 800b102:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b104:	07d0      	lsls	r0, r2, #31
 800b106:	d404      	bmi.n	800b112 <_fflush_r+0x32>
 800b108:	0599      	lsls	r1, r3, #22
 800b10a:	d402      	bmi.n	800b112 <_fflush_r+0x32>
 800b10c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b10e:	f7fd fa1e 	bl	800854e <__retarget_lock_acquire_recursive>
 800b112:	4628      	mov	r0, r5
 800b114:	4621      	mov	r1, r4
 800b116:	f7ff ff5f 	bl	800afd8 <__sflush_r>
 800b11a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b11c:	4605      	mov	r5, r0
 800b11e:	07da      	lsls	r2, r3, #31
 800b120:	d4e4      	bmi.n	800b0ec <_fflush_r+0xc>
 800b122:	89a3      	ldrh	r3, [r4, #12]
 800b124:	059b      	lsls	r3, r3, #22
 800b126:	d4e1      	bmi.n	800b0ec <_fflush_r+0xc>
 800b128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b12a:	f7fd fa11 	bl	8008550 <__retarget_lock_release_recursive>
 800b12e:	e7dd      	b.n	800b0ec <_fflush_r+0xc>

0800b130 <__swhatbuf_r>:
 800b130:	b570      	push	{r4, r5, r6, lr}
 800b132:	460c      	mov	r4, r1
 800b134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b138:	b096      	sub	sp, #88	@ 0x58
 800b13a:	4615      	mov	r5, r2
 800b13c:	2900      	cmp	r1, #0
 800b13e:	461e      	mov	r6, r3
 800b140:	da0c      	bge.n	800b15c <__swhatbuf_r+0x2c>
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	2100      	movs	r1, #0
 800b146:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b14a:	bf14      	ite	ne
 800b14c:	2340      	movne	r3, #64	@ 0x40
 800b14e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b152:	2000      	movs	r0, #0
 800b154:	6031      	str	r1, [r6, #0]
 800b156:	602b      	str	r3, [r5, #0]
 800b158:	b016      	add	sp, #88	@ 0x58
 800b15a:	bd70      	pop	{r4, r5, r6, pc}
 800b15c:	466a      	mov	r2, sp
 800b15e:	f000 f875 	bl	800b24c <_fstat_r>
 800b162:	2800      	cmp	r0, #0
 800b164:	dbed      	blt.n	800b142 <__swhatbuf_r+0x12>
 800b166:	9901      	ldr	r1, [sp, #4]
 800b168:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b16c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b170:	4259      	negs	r1, r3
 800b172:	4159      	adcs	r1, r3
 800b174:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b178:	e7eb      	b.n	800b152 <__swhatbuf_r+0x22>

0800b17a <__smakebuf_r>:
 800b17a:	898b      	ldrh	r3, [r1, #12]
 800b17c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b17e:	079d      	lsls	r5, r3, #30
 800b180:	4606      	mov	r6, r0
 800b182:	460c      	mov	r4, r1
 800b184:	d507      	bpl.n	800b196 <__smakebuf_r+0x1c>
 800b186:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b18a:	6023      	str	r3, [r4, #0]
 800b18c:	6123      	str	r3, [r4, #16]
 800b18e:	2301      	movs	r3, #1
 800b190:	6163      	str	r3, [r4, #20]
 800b192:	b003      	add	sp, #12
 800b194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b196:	ab01      	add	r3, sp, #4
 800b198:	466a      	mov	r2, sp
 800b19a:	f7ff ffc9 	bl	800b130 <__swhatbuf_r>
 800b19e:	9f00      	ldr	r7, [sp, #0]
 800b1a0:	4605      	mov	r5, r0
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	4639      	mov	r1, r7
 800b1a6:	f7fe f8af 	bl	8009308 <_malloc_r>
 800b1aa:	b948      	cbnz	r0, 800b1c0 <__smakebuf_r+0x46>
 800b1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1b0:	059a      	lsls	r2, r3, #22
 800b1b2:	d4ee      	bmi.n	800b192 <__smakebuf_r+0x18>
 800b1b4:	f023 0303 	bic.w	r3, r3, #3
 800b1b8:	f043 0302 	orr.w	r3, r3, #2
 800b1bc:	81a3      	strh	r3, [r4, #12]
 800b1be:	e7e2      	b.n	800b186 <__smakebuf_r+0xc>
 800b1c0:	89a3      	ldrh	r3, [r4, #12]
 800b1c2:	6020      	str	r0, [r4, #0]
 800b1c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1c8:	81a3      	strh	r3, [r4, #12]
 800b1ca:	9b01      	ldr	r3, [sp, #4]
 800b1cc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1d0:	b15b      	cbz	r3, 800b1ea <__smakebuf_r+0x70>
 800b1d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	f000 f84a 	bl	800b270 <_isatty_r>
 800b1dc:	b128      	cbz	r0, 800b1ea <__smakebuf_r+0x70>
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	f023 0303 	bic.w	r3, r3, #3
 800b1e4:	f043 0301 	orr.w	r3, r3, #1
 800b1e8:	81a3      	strh	r3, [r4, #12]
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	431d      	orrs	r5, r3
 800b1ee:	81a5      	strh	r5, [r4, #12]
 800b1f0:	e7cf      	b.n	800b192 <__smakebuf_r+0x18>

0800b1f2 <memmove>:
 800b1f2:	4288      	cmp	r0, r1
 800b1f4:	b510      	push	{r4, lr}
 800b1f6:	eb01 0402 	add.w	r4, r1, r2
 800b1fa:	d902      	bls.n	800b202 <memmove+0x10>
 800b1fc:	4284      	cmp	r4, r0
 800b1fe:	4623      	mov	r3, r4
 800b200:	d807      	bhi.n	800b212 <memmove+0x20>
 800b202:	1e43      	subs	r3, r0, #1
 800b204:	42a1      	cmp	r1, r4
 800b206:	d008      	beq.n	800b21a <memmove+0x28>
 800b208:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b20c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b210:	e7f8      	b.n	800b204 <memmove+0x12>
 800b212:	4402      	add	r2, r0
 800b214:	4601      	mov	r1, r0
 800b216:	428a      	cmp	r2, r1
 800b218:	d100      	bne.n	800b21c <memmove+0x2a>
 800b21a:	bd10      	pop	{r4, pc}
 800b21c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b220:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b224:	e7f7      	b.n	800b216 <memmove+0x24>

0800b226 <strncmp>:
 800b226:	b510      	push	{r4, lr}
 800b228:	b16a      	cbz	r2, 800b246 <strncmp+0x20>
 800b22a:	3901      	subs	r1, #1
 800b22c:	1884      	adds	r4, r0, r2
 800b22e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b232:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b236:	429a      	cmp	r2, r3
 800b238:	d103      	bne.n	800b242 <strncmp+0x1c>
 800b23a:	42a0      	cmp	r0, r4
 800b23c:	d001      	beq.n	800b242 <strncmp+0x1c>
 800b23e:	2a00      	cmp	r2, #0
 800b240:	d1f5      	bne.n	800b22e <strncmp+0x8>
 800b242:	1ad0      	subs	r0, r2, r3
 800b244:	bd10      	pop	{r4, pc}
 800b246:	4610      	mov	r0, r2
 800b248:	e7fc      	b.n	800b244 <strncmp+0x1e>
	...

0800b24c <_fstat_r>:
 800b24c:	b538      	push	{r3, r4, r5, lr}
 800b24e:	2300      	movs	r3, #0
 800b250:	4d06      	ldr	r5, [pc, #24]	@ (800b26c <_fstat_r+0x20>)
 800b252:	4604      	mov	r4, r0
 800b254:	4608      	mov	r0, r1
 800b256:	4611      	mov	r1, r2
 800b258:	602b      	str	r3, [r5, #0]
 800b25a:	f7f6 fe58 	bl	8001f0e <_fstat>
 800b25e:	1c43      	adds	r3, r0, #1
 800b260:	d102      	bne.n	800b268 <_fstat_r+0x1c>
 800b262:	682b      	ldr	r3, [r5, #0]
 800b264:	b103      	cbz	r3, 800b268 <_fstat_r+0x1c>
 800b266:	6023      	str	r3, [r4, #0]
 800b268:	bd38      	pop	{r3, r4, r5, pc}
 800b26a:	bf00      	nop
 800b26c:	20000608 	.word	0x20000608

0800b270 <_isatty_r>:
 800b270:	b538      	push	{r3, r4, r5, lr}
 800b272:	2300      	movs	r3, #0
 800b274:	4d05      	ldr	r5, [pc, #20]	@ (800b28c <_isatty_r+0x1c>)
 800b276:	4604      	mov	r4, r0
 800b278:	4608      	mov	r0, r1
 800b27a:	602b      	str	r3, [r5, #0]
 800b27c:	f7f6 fe57 	bl	8001f2e <_isatty>
 800b280:	1c43      	adds	r3, r0, #1
 800b282:	d102      	bne.n	800b28a <_isatty_r+0x1a>
 800b284:	682b      	ldr	r3, [r5, #0]
 800b286:	b103      	cbz	r3, 800b28a <_isatty_r+0x1a>
 800b288:	6023      	str	r3, [r4, #0]
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
 800b28c:	20000608 	.word	0x20000608

0800b290 <_sbrk_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	2300      	movs	r3, #0
 800b294:	4d05      	ldr	r5, [pc, #20]	@ (800b2ac <_sbrk_r+0x1c>)
 800b296:	4604      	mov	r4, r0
 800b298:	4608      	mov	r0, r1
 800b29a:	602b      	str	r3, [r5, #0]
 800b29c:	f7f6 fe60 	bl	8001f60 <_sbrk>
 800b2a0:	1c43      	adds	r3, r0, #1
 800b2a2:	d102      	bne.n	800b2aa <_sbrk_r+0x1a>
 800b2a4:	682b      	ldr	r3, [r5, #0]
 800b2a6:	b103      	cbz	r3, 800b2aa <_sbrk_r+0x1a>
 800b2a8:	6023      	str	r3, [r4, #0]
 800b2aa:	bd38      	pop	{r3, r4, r5, pc}
 800b2ac:	20000608 	.word	0x20000608

0800b2b0 <memcpy>:
 800b2b0:	440a      	add	r2, r1
 800b2b2:	1e43      	subs	r3, r0, #1
 800b2b4:	4291      	cmp	r1, r2
 800b2b6:	d100      	bne.n	800b2ba <memcpy+0xa>
 800b2b8:	4770      	bx	lr
 800b2ba:	b510      	push	{r4, lr}
 800b2bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2c0:	4291      	cmp	r1, r2
 800b2c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2c6:	d1f9      	bne.n	800b2bc <memcpy+0xc>
 800b2c8:	bd10      	pop	{r4, pc}
 800b2ca:	0000      	movs	r0, r0
 800b2cc:	0000      	movs	r0, r0
	...

0800b2d0 <nan>:
 800b2d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b2d8 <nan+0x8>
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	00000000 	.word	0x00000000
 800b2dc:	7ff80000 	.word	0x7ff80000

0800b2e0 <__assert_func>:
 800b2e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2e2:	4614      	mov	r4, r2
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	4b09      	ldr	r3, [pc, #36]	@ (800b30c <__assert_func+0x2c>)
 800b2e8:	4605      	mov	r5, r0
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	68d8      	ldr	r0, [r3, #12]
 800b2ee:	b954      	cbnz	r4, 800b306 <__assert_func+0x26>
 800b2f0:	4b07      	ldr	r3, [pc, #28]	@ (800b310 <__assert_func+0x30>)
 800b2f2:	461c      	mov	r4, r3
 800b2f4:	9100      	str	r1, [sp, #0]
 800b2f6:	4907      	ldr	r1, [pc, #28]	@ (800b314 <__assert_func+0x34>)
 800b2f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2fc:	462b      	mov	r3, r5
 800b2fe:	f000 fba3 	bl	800ba48 <fiprintf>
 800b302:	f000 fbb3 	bl	800ba6c <abort>
 800b306:	4b04      	ldr	r3, [pc, #16]	@ (800b318 <__assert_func+0x38>)
 800b308:	e7f4      	b.n	800b2f4 <__assert_func+0x14>
 800b30a:	bf00      	nop
 800b30c:	2000001c 	.word	0x2000001c
 800b310:	0800c7fd 	.word	0x0800c7fd
 800b314:	0800c7cf 	.word	0x0800c7cf
 800b318:	0800c7c2 	.word	0x0800c7c2

0800b31c <_calloc_r>:
 800b31c:	b570      	push	{r4, r5, r6, lr}
 800b31e:	fba1 5402 	umull	r5, r4, r1, r2
 800b322:	b93c      	cbnz	r4, 800b334 <_calloc_r+0x18>
 800b324:	4629      	mov	r1, r5
 800b326:	f7fd ffef 	bl	8009308 <_malloc_r>
 800b32a:	4606      	mov	r6, r0
 800b32c:	b928      	cbnz	r0, 800b33a <_calloc_r+0x1e>
 800b32e:	2600      	movs	r6, #0
 800b330:	4630      	mov	r0, r6
 800b332:	bd70      	pop	{r4, r5, r6, pc}
 800b334:	220c      	movs	r2, #12
 800b336:	6002      	str	r2, [r0, #0]
 800b338:	e7f9      	b.n	800b32e <_calloc_r+0x12>
 800b33a:	462a      	mov	r2, r5
 800b33c:	4621      	mov	r1, r4
 800b33e:	f7fd f889 	bl	8008454 <memset>
 800b342:	e7f5      	b.n	800b330 <_calloc_r+0x14>

0800b344 <rshift>:
 800b344:	6903      	ldr	r3, [r0, #16]
 800b346:	114a      	asrs	r2, r1, #5
 800b348:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b34c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b350:	f100 0414 	add.w	r4, r0, #20
 800b354:	dd45      	ble.n	800b3e2 <rshift+0x9e>
 800b356:	f011 011f 	ands.w	r1, r1, #31
 800b35a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b35e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b362:	d10c      	bne.n	800b37e <rshift+0x3a>
 800b364:	f100 0710 	add.w	r7, r0, #16
 800b368:	4629      	mov	r1, r5
 800b36a:	42b1      	cmp	r1, r6
 800b36c:	d334      	bcc.n	800b3d8 <rshift+0x94>
 800b36e:	1a9b      	subs	r3, r3, r2
 800b370:	1eea      	subs	r2, r5, #3
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4296      	cmp	r6, r2
 800b376:	bf38      	it	cc
 800b378:	2300      	movcc	r3, #0
 800b37a:	4423      	add	r3, r4
 800b37c:	e015      	b.n	800b3aa <rshift+0x66>
 800b37e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b382:	f1c1 0820 	rsb	r8, r1, #32
 800b386:	f105 0e04 	add.w	lr, r5, #4
 800b38a:	46a1      	mov	r9, r4
 800b38c:	40cf      	lsrs	r7, r1
 800b38e:	4576      	cmp	r6, lr
 800b390:	46f4      	mov	ip, lr
 800b392:	d815      	bhi.n	800b3c0 <rshift+0x7c>
 800b394:	1a9a      	subs	r2, r3, r2
 800b396:	3501      	adds	r5, #1
 800b398:	0092      	lsls	r2, r2, #2
 800b39a:	3a04      	subs	r2, #4
 800b39c:	42ae      	cmp	r6, r5
 800b39e:	bf38      	it	cc
 800b3a0:	2200      	movcc	r2, #0
 800b3a2:	18a3      	adds	r3, r4, r2
 800b3a4:	50a7      	str	r7, [r4, r2]
 800b3a6:	b107      	cbz	r7, 800b3aa <rshift+0x66>
 800b3a8:	3304      	adds	r3, #4
 800b3aa:	1b1a      	subs	r2, r3, r4
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3b2:	bf08      	it	eq
 800b3b4:	2300      	moveq	r3, #0
 800b3b6:	6102      	str	r2, [r0, #16]
 800b3b8:	bf08      	it	eq
 800b3ba:	6143      	streq	r3, [r0, #20]
 800b3bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3c0:	f8dc c000 	ldr.w	ip, [ip]
 800b3c4:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3c8:	ea4c 0707 	orr.w	r7, ip, r7
 800b3cc:	f849 7b04 	str.w	r7, [r9], #4
 800b3d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3d4:	40cf      	lsrs	r7, r1
 800b3d6:	e7da      	b.n	800b38e <rshift+0x4a>
 800b3d8:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3dc:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3e0:	e7c3      	b.n	800b36a <rshift+0x26>
 800b3e2:	4623      	mov	r3, r4
 800b3e4:	e7e1      	b.n	800b3aa <rshift+0x66>

0800b3e6 <__hexdig_fun>:
 800b3e6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b3ea:	2b09      	cmp	r3, #9
 800b3ec:	d802      	bhi.n	800b3f4 <__hexdig_fun+0xe>
 800b3ee:	3820      	subs	r0, #32
 800b3f0:	b2c0      	uxtb	r0, r0
 800b3f2:	4770      	bx	lr
 800b3f4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b3f8:	2b05      	cmp	r3, #5
 800b3fa:	d801      	bhi.n	800b400 <__hexdig_fun+0x1a>
 800b3fc:	3847      	subs	r0, #71	@ 0x47
 800b3fe:	e7f7      	b.n	800b3f0 <__hexdig_fun+0xa>
 800b400:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b404:	2b05      	cmp	r3, #5
 800b406:	d801      	bhi.n	800b40c <__hexdig_fun+0x26>
 800b408:	3827      	subs	r0, #39	@ 0x27
 800b40a:	e7f1      	b.n	800b3f0 <__hexdig_fun+0xa>
 800b40c:	2000      	movs	r0, #0
 800b40e:	4770      	bx	lr

0800b410 <__gethex>:
 800b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	b085      	sub	sp, #20
 800b416:	468a      	mov	sl, r1
 800b418:	4690      	mov	r8, r2
 800b41a:	9302      	str	r3, [sp, #8]
 800b41c:	680b      	ldr	r3, [r1, #0]
 800b41e:	9001      	str	r0, [sp, #4]
 800b420:	1c9c      	adds	r4, r3, #2
 800b422:	46a1      	mov	r9, r4
 800b424:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b428:	2830      	cmp	r0, #48	@ 0x30
 800b42a:	d0fa      	beq.n	800b422 <__gethex+0x12>
 800b42c:	eba9 0303 	sub.w	r3, r9, r3
 800b430:	f1a3 0b02 	sub.w	fp, r3, #2
 800b434:	f7ff ffd7 	bl	800b3e6 <__hexdig_fun>
 800b438:	4605      	mov	r5, r0
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d166      	bne.n	800b50c <__gethex+0xfc>
 800b43e:	2201      	movs	r2, #1
 800b440:	499e      	ldr	r1, [pc, #632]	@ (800b6bc <__gethex+0x2ac>)
 800b442:	4648      	mov	r0, r9
 800b444:	f7ff feef 	bl	800b226 <strncmp>
 800b448:	4607      	mov	r7, r0
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d165      	bne.n	800b51a <__gethex+0x10a>
 800b44e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b452:	4626      	mov	r6, r4
 800b454:	f7ff ffc7 	bl	800b3e6 <__hexdig_fun>
 800b458:	2800      	cmp	r0, #0
 800b45a:	d060      	beq.n	800b51e <__gethex+0x10e>
 800b45c:	4623      	mov	r3, r4
 800b45e:	7818      	ldrb	r0, [r3, #0]
 800b460:	4699      	mov	r9, r3
 800b462:	3301      	adds	r3, #1
 800b464:	2830      	cmp	r0, #48	@ 0x30
 800b466:	d0fa      	beq.n	800b45e <__gethex+0x4e>
 800b468:	f7ff ffbd 	bl	800b3e6 <__hexdig_fun>
 800b46c:	fab0 f580 	clz	r5, r0
 800b470:	f04f 0b01 	mov.w	fp, #1
 800b474:	096d      	lsrs	r5, r5, #5
 800b476:	464a      	mov	r2, r9
 800b478:	4616      	mov	r6, r2
 800b47a:	3201      	adds	r2, #1
 800b47c:	7830      	ldrb	r0, [r6, #0]
 800b47e:	f7ff ffb2 	bl	800b3e6 <__hexdig_fun>
 800b482:	2800      	cmp	r0, #0
 800b484:	d1f8      	bne.n	800b478 <__gethex+0x68>
 800b486:	2201      	movs	r2, #1
 800b488:	498c      	ldr	r1, [pc, #560]	@ (800b6bc <__gethex+0x2ac>)
 800b48a:	4630      	mov	r0, r6
 800b48c:	f7ff fecb 	bl	800b226 <strncmp>
 800b490:	2800      	cmp	r0, #0
 800b492:	d13e      	bne.n	800b512 <__gethex+0x102>
 800b494:	b944      	cbnz	r4, 800b4a8 <__gethex+0x98>
 800b496:	1c74      	adds	r4, r6, #1
 800b498:	4622      	mov	r2, r4
 800b49a:	4616      	mov	r6, r2
 800b49c:	3201      	adds	r2, #1
 800b49e:	7830      	ldrb	r0, [r6, #0]
 800b4a0:	f7ff ffa1 	bl	800b3e6 <__hexdig_fun>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d1f8      	bne.n	800b49a <__gethex+0x8a>
 800b4a8:	1ba4      	subs	r4, r4, r6
 800b4aa:	00a7      	lsls	r7, r4, #2
 800b4ac:	7833      	ldrb	r3, [r6, #0]
 800b4ae:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b4b2:	2b50      	cmp	r3, #80	@ 0x50
 800b4b4:	d13d      	bne.n	800b532 <__gethex+0x122>
 800b4b6:	7873      	ldrb	r3, [r6, #1]
 800b4b8:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4ba:	d032      	beq.n	800b522 <__gethex+0x112>
 800b4bc:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4be:	d033      	beq.n	800b528 <__gethex+0x118>
 800b4c0:	1c71      	adds	r1, r6, #1
 800b4c2:	2400      	movs	r4, #0
 800b4c4:	7808      	ldrb	r0, [r1, #0]
 800b4c6:	f7ff ff8e 	bl	800b3e6 <__hexdig_fun>
 800b4ca:	1e43      	subs	r3, r0, #1
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	2b18      	cmp	r3, #24
 800b4d0:	d82f      	bhi.n	800b532 <__gethex+0x122>
 800b4d2:	f1a0 0210 	sub.w	r2, r0, #16
 800b4d6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4da:	f7ff ff84 	bl	800b3e6 <__hexdig_fun>
 800b4de:	f100 3cff 	add.w	ip, r0, #4294967295
 800b4e2:	230a      	movs	r3, #10
 800b4e4:	fa5f fc8c 	uxtb.w	ip, ip
 800b4e8:	f1bc 0f18 	cmp.w	ip, #24
 800b4ec:	d91e      	bls.n	800b52c <__gethex+0x11c>
 800b4ee:	b104      	cbz	r4, 800b4f2 <__gethex+0xe2>
 800b4f0:	4252      	negs	r2, r2
 800b4f2:	4417      	add	r7, r2
 800b4f4:	f8ca 1000 	str.w	r1, [sl]
 800b4f8:	b1ed      	cbz	r5, 800b536 <__gethex+0x126>
 800b4fa:	f1bb 0f00 	cmp.w	fp, #0
 800b4fe:	bf0c      	ite	eq
 800b500:	2506      	moveq	r5, #6
 800b502:	2500      	movne	r5, #0
 800b504:	4628      	mov	r0, r5
 800b506:	b005      	add	sp, #20
 800b508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b50c:	2500      	movs	r5, #0
 800b50e:	462c      	mov	r4, r5
 800b510:	e7b1      	b.n	800b476 <__gethex+0x66>
 800b512:	2c00      	cmp	r4, #0
 800b514:	d1c8      	bne.n	800b4a8 <__gethex+0x98>
 800b516:	4627      	mov	r7, r4
 800b518:	e7c8      	b.n	800b4ac <__gethex+0x9c>
 800b51a:	464e      	mov	r6, r9
 800b51c:	462f      	mov	r7, r5
 800b51e:	2501      	movs	r5, #1
 800b520:	e7c4      	b.n	800b4ac <__gethex+0x9c>
 800b522:	2400      	movs	r4, #0
 800b524:	1cb1      	adds	r1, r6, #2
 800b526:	e7cd      	b.n	800b4c4 <__gethex+0xb4>
 800b528:	2401      	movs	r4, #1
 800b52a:	e7fb      	b.n	800b524 <__gethex+0x114>
 800b52c:	fb03 0002 	mla	r0, r3, r2, r0
 800b530:	e7cf      	b.n	800b4d2 <__gethex+0xc2>
 800b532:	4631      	mov	r1, r6
 800b534:	e7de      	b.n	800b4f4 <__gethex+0xe4>
 800b536:	eba6 0309 	sub.w	r3, r6, r9
 800b53a:	4629      	mov	r1, r5
 800b53c:	3b01      	subs	r3, #1
 800b53e:	2b07      	cmp	r3, #7
 800b540:	dc0a      	bgt.n	800b558 <__gethex+0x148>
 800b542:	9801      	ldr	r0, [sp, #4]
 800b544:	f7fd ff6c 	bl	8009420 <_Balloc>
 800b548:	4604      	mov	r4, r0
 800b54a:	b940      	cbnz	r0, 800b55e <__gethex+0x14e>
 800b54c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6c0 <__gethex+0x2b0>)
 800b54e:	4602      	mov	r2, r0
 800b550:	21e4      	movs	r1, #228	@ 0xe4
 800b552:	485c      	ldr	r0, [pc, #368]	@ (800b6c4 <__gethex+0x2b4>)
 800b554:	f7ff fec4 	bl	800b2e0 <__assert_func>
 800b558:	3101      	adds	r1, #1
 800b55a:	105b      	asrs	r3, r3, #1
 800b55c:	e7ef      	b.n	800b53e <__gethex+0x12e>
 800b55e:	f100 0a14 	add.w	sl, r0, #20
 800b562:	2300      	movs	r3, #0
 800b564:	4655      	mov	r5, sl
 800b566:	469b      	mov	fp, r3
 800b568:	45b1      	cmp	r9, r6
 800b56a:	d337      	bcc.n	800b5dc <__gethex+0x1cc>
 800b56c:	f845 bb04 	str.w	fp, [r5], #4
 800b570:	eba5 050a 	sub.w	r5, r5, sl
 800b574:	4658      	mov	r0, fp
 800b576:	10ad      	asrs	r5, r5, #2
 800b578:	6125      	str	r5, [r4, #16]
 800b57a:	016d      	lsls	r5, r5, #5
 800b57c:	f7fe f844 	bl	8009608 <__hi0bits>
 800b580:	f8d8 6000 	ldr.w	r6, [r8]
 800b584:	1a2d      	subs	r5, r5, r0
 800b586:	42b5      	cmp	r5, r6
 800b588:	dd54      	ble.n	800b634 <__gethex+0x224>
 800b58a:	1bad      	subs	r5, r5, r6
 800b58c:	4620      	mov	r0, r4
 800b58e:	4629      	mov	r1, r5
 800b590:	f7fe fbe1 	bl	8009d56 <__any_on>
 800b594:	4681      	mov	r9, r0
 800b596:	b178      	cbz	r0, 800b5b8 <__gethex+0x1a8>
 800b598:	1e6b      	subs	r3, r5, #1
 800b59a:	f04f 0901 	mov.w	r9, #1
 800b59e:	1159      	asrs	r1, r3, #5
 800b5a0:	f003 021f 	and.w	r2, r3, #31
 800b5a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b5a8:	fa09 f202 	lsl.w	r2, r9, r2
 800b5ac:	420a      	tst	r2, r1
 800b5ae:	d003      	beq.n	800b5b8 <__gethex+0x1a8>
 800b5b0:	454b      	cmp	r3, r9
 800b5b2:	dc36      	bgt.n	800b622 <__gethex+0x212>
 800b5b4:	f04f 0902 	mov.w	r9, #2
 800b5b8:	442f      	add	r7, r5
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f7ff fec1 	bl	800b344 <rshift>
 800b5c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5c6:	42bb      	cmp	r3, r7
 800b5c8:	da42      	bge.n	800b650 <__gethex+0x240>
 800b5ca:	4621      	mov	r1, r4
 800b5cc:	9801      	ldr	r0, [sp, #4]
 800b5ce:	f7fd ff67 	bl	80094a0 <_Bfree>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5d6:	25a3      	movs	r5, #163	@ 0xa3
 800b5d8:	6013      	str	r3, [r2, #0]
 800b5da:	e793      	b.n	800b504 <__gethex+0xf4>
 800b5dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b5e0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b5e2:	d012      	beq.n	800b60a <__gethex+0x1fa>
 800b5e4:	2b20      	cmp	r3, #32
 800b5e6:	d104      	bne.n	800b5f2 <__gethex+0x1e2>
 800b5e8:	f845 bb04 	str.w	fp, [r5], #4
 800b5ec:	f04f 0b00 	mov.w	fp, #0
 800b5f0:	465b      	mov	r3, fp
 800b5f2:	7830      	ldrb	r0, [r6, #0]
 800b5f4:	9303      	str	r3, [sp, #12]
 800b5f6:	f7ff fef6 	bl	800b3e6 <__hexdig_fun>
 800b5fa:	9b03      	ldr	r3, [sp, #12]
 800b5fc:	f000 000f 	and.w	r0, r0, #15
 800b600:	4098      	lsls	r0, r3
 800b602:	3304      	adds	r3, #4
 800b604:	ea4b 0b00 	orr.w	fp, fp, r0
 800b608:	e7ae      	b.n	800b568 <__gethex+0x158>
 800b60a:	45b1      	cmp	r9, r6
 800b60c:	d8ea      	bhi.n	800b5e4 <__gethex+0x1d4>
 800b60e:	2201      	movs	r2, #1
 800b610:	492a      	ldr	r1, [pc, #168]	@ (800b6bc <__gethex+0x2ac>)
 800b612:	4630      	mov	r0, r6
 800b614:	9303      	str	r3, [sp, #12]
 800b616:	f7ff fe06 	bl	800b226 <strncmp>
 800b61a:	9b03      	ldr	r3, [sp, #12]
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d1e1      	bne.n	800b5e4 <__gethex+0x1d4>
 800b620:	e7a2      	b.n	800b568 <__gethex+0x158>
 800b622:	1ea9      	subs	r1, r5, #2
 800b624:	4620      	mov	r0, r4
 800b626:	f7fe fb96 	bl	8009d56 <__any_on>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d0c2      	beq.n	800b5b4 <__gethex+0x1a4>
 800b62e:	f04f 0903 	mov.w	r9, #3
 800b632:	e7c1      	b.n	800b5b8 <__gethex+0x1a8>
 800b634:	da09      	bge.n	800b64a <__gethex+0x23a>
 800b636:	1b75      	subs	r5, r6, r5
 800b638:	4621      	mov	r1, r4
 800b63a:	9801      	ldr	r0, [sp, #4]
 800b63c:	462a      	mov	r2, r5
 800b63e:	1b7f      	subs	r7, r7, r5
 800b640:	f7fe f948 	bl	80098d4 <__lshift>
 800b644:	4604      	mov	r4, r0
 800b646:	f100 0a14 	add.w	sl, r0, #20
 800b64a:	f04f 0900 	mov.w	r9, #0
 800b64e:	e7b8      	b.n	800b5c2 <__gethex+0x1b2>
 800b650:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b654:	42bd      	cmp	r5, r7
 800b656:	dd6f      	ble.n	800b738 <__gethex+0x328>
 800b658:	1bed      	subs	r5, r5, r7
 800b65a:	42ae      	cmp	r6, r5
 800b65c:	dc34      	bgt.n	800b6c8 <__gethex+0x2b8>
 800b65e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b662:	2b02      	cmp	r3, #2
 800b664:	d022      	beq.n	800b6ac <__gethex+0x29c>
 800b666:	2b03      	cmp	r3, #3
 800b668:	d024      	beq.n	800b6b4 <__gethex+0x2a4>
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d115      	bne.n	800b69a <__gethex+0x28a>
 800b66e:	42ae      	cmp	r6, r5
 800b670:	d113      	bne.n	800b69a <__gethex+0x28a>
 800b672:	2e01      	cmp	r6, #1
 800b674:	d10b      	bne.n	800b68e <__gethex+0x27e>
 800b676:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b67a:	2562      	movs	r5, #98	@ 0x62
 800b67c:	9a02      	ldr	r2, [sp, #8]
 800b67e:	6013      	str	r3, [r2, #0]
 800b680:	2301      	movs	r3, #1
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	f8ca 3000 	str.w	r3, [sl]
 800b688:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b68a:	601c      	str	r4, [r3, #0]
 800b68c:	e73a      	b.n	800b504 <__gethex+0xf4>
 800b68e:	1e71      	subs	r1, r6, #1
 800b690:	4620      	mov	r0, r4
 800b692:	f7fe fb60 	bl	8009d56 <__any_on>
 800b696:	2800      	cmp	r0, #0
 800b698:	d1ed      	bne.n	800b676 <__gethex+0x266>
 800b69a:	4621      	mov	r1, r4
 800b69c:	9801      	ldr	r0, [sp, #4]
 800b69e:	f7fd feff 	bl	80094a0 <_Bfree>
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6a6:	2550      	movs	r5, #80	@ 0x50
 800b6a8:	6013      	str	r3, [r2, #0]
 800b6aa:	e72b      	b.n	800b504 <__gethex+0xf4>
 800b6ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d1f3      	bne.n	800b69a <__gethex+0x28a>
 800b6b2:	e7e0      	b.n	800b676 <__gethex+0x266>
 800b6b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1dd      	bne.n	800b676 <__gethex+0x266>
 800b6ba:	e7ee      	b.n	800b69a <__gethex+0x28a>
 800b6bc:	0800c650 	.word	0x0800c650
 800b6c0:	0800c4e9 	.word	0x0800c4e9
 800b6c4:	0800c7fe 	.word	0x0800c7fe
 800b6c8:	1e6f      	subs	r7, r5, #1
 800b6ca:	f1b9 0f00 	cmp.w	r9, #0
 800b6ce:	d130      	bne.n	800b732 <__gethex+0x322>
 800b6d0:	b127      	cbz	r7, 800b6dc <__gethex+0x2cc>
 800b6d2:	4639      	mov	r1, r7
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f7fe fb3e 	bl	8009d56 <__any_on>
 800b6da:	4681      	mov	r9, r0
 800b6dc:	117a      	asrs	r2, r7, #5
 800b6de:	2301      	movs	r3, #1
 800b6e0:	f007 071f 	and.w	r7, r7, #31
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	40bb      	lsls	r3, r7
 800b6ee:	1b76      	subs	r6, r6, r5
 800b6f0:	2502      	movs	r5, #2
 800b6f2:	4213      	tst	r3, r2
 800b6f4:	bf18      	it	ne
 800b6f6:	f049 0902 	orrne.w	r9, r9, #2
 800b6fa:	f7ff fe23 	bl	800b344 <rshift>
 800b6fe:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b702:	f1b9 0f00 	cmp.w	r9, #0
 800b706:	d047      	beq.n	800b798 <__gethex+0x388>
 800b708:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b70c:	2b02      	cmp	r3, #2
 800b70e:	d015      	beq.n	800b73c <__gethex+0x32c>
 800b710:	2b03      	cmp	r3, #3
 800b712:	d017      	beq.n	800b744 <__gethex+0x334>
 800b714:	2b01      	cmp	r3, #1
 800b716:	d109      	bne.n	800b72c <__gethex+0x31c>
 800b718:	f019 0f02 	tst.w	r9, #2
 800b71c:	d006      	beq.n	800b72c <__gethex+0x31c>
 800b71e:	f8da 3000 	ldr.w	r3, [sl]
 800b722:	ea49 0903 	orr.w	r9, r9, r3
 800b726:	f019 0f01 	tst.w	r9, #1
 800b72a:	d10e      	bne.n	800b74a <__gethex+0x33a>
 800b72c:	f045 0510 	orr.w	r5, r5, #16
 800b730:	e032      	b.n	800b798 <__gethex+0x388>
 800b732:	f04f 0901 	mov.w	r9, #1
 800b736:	e7d1      	b.n	800b6dc <__gethex+0x2cc>
 800b738:	2501      	movs	r5, #1
 800b73a:	e7e2      	b.n	800b702 <__gethex+0x2f2>
 800b73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b73e:	f1c3 0301 	rsb	r3, r3, #1
 800b742:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b746:	2b00      	cmp	r3, #0
 800b748:	d0f0      	beq.n	800b72c <__gethex+0x31c>
 800b74a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b74e:	f104 0314 	add.w	r3, r4, #20
 800b752:	f04f 0c00 	mov.w	ip, #0
 800b756:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b75a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b75e:	4618      	mov	r0, r3
 800b760:	f853 2b04 	ldr.w	r2, [r3], #4
 800b764:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b768:	d01b      	beq.n	800b7a2 <__gethex+0x392>
 800b76a:	3201      	adds	r2, #1
 800b76c:	6002      	str	r2, [r0, #0]
 800b76e:	2d02      	cmp	r5, #2
 800b770:	f104 0314 	add.w	r3, r4, #20
 800b774:	d13c      	bne.n	800b7f0 <__gethex+0x3e0>
 800b776:	f8d8 2000 	ldr.w	r2, [r8]
 800b77a:	3a01      	subs	r2, #1
 800b77c:	42b2      	cmp	r2, r6
 800b77e:	d109      	bne.n	800b794 <__gethex+0x384>
 800b780:	1171      	asrs	r1, r6, #5
 800b782:	2201      	movs	r2, #1
 800b784:	f006 061f 	and.w	r6, r6, #31
 800b788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b78c:	fa02 f606 	lsl.w	r6, r2, r6
 800b790:	421e      	tst	r6, r3
 800b792:	d13a      	bne.n	800b80a <__gethex+0x3fa>
 800b794:	f045 0520 	orr.w	r5, r5, #32
 800b798:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b79a:	601c      	str	r4, [r3, #0]
 800b79c:	9b02      	ldr	r3, [sp, #8]
 800b79e:	601f      	str	r7, [r3, #0]
 800b7a0:	e6b0      	b.n	800b504 <__gethex+0xf4>
 800b7a2:	4299      	cmp	r1, r3
 800b7a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7a8:	d8d9      	bhi.n	800b75e <__gethex+0x34e>
 800b7aa:	68a3      	ldr	r3, [r4, #8]
 800b7ac:	459b      	cmp	fp, r3
 800b7ae:	db17      	blt.n	800b7e0 <__gethex+0x3d0>
 800b7b0:	6861      	ldr	r1, [r4, #4]
 800b7b2:	9801      	ldr	r0, [sp, #4]
 800b7b4:	3101      	adds	r1, #1
 800b7b6:	f7fd fe33 	bl	8009420 <_Balloc>
 800b7ba:	4681      	mov	r9, r0
 800b7bc:	b918      	cbnz	r0, 800b7c6 <__gethex+0x3b6>
 800b7be:	4b1a      	ldr	r3, [pc, #104]	@ (800b828 <__gethex+0x418>)
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	2184      	movs	r1, #132	@ 0x84
 800b7c4:	e6c5      	b.n	800b552 <__gethex+0x142>
 800b7c6:	6922      	ldr	r2, [r4, #16]
 800b7c8:	f104 010c 	add.w	r1, r4, #12
 800b7cc:	300c      	adds	r0, #12
 800b7ce:	3202      	adds	r2, #2
 800b7d0:	0092      	lsls	r2, r2, #2
 800b7d2:	f7ff fd6d 	bl	800b2b0 <memcpy>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	464c      	mov	r4, r9
 800b7da:	9801      	ldr	r0, [sp, #4]
 800b7dc:	f7fd fe60 	bl	80094a0 <_Bfree>
 800b7e0:	6923      	ldr	r3, [r4, #16]
 800b7e2:	1c5a      	adds	r2, r3, #1
 800b7e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7e8:	6122      	str	r2, [r4, #16]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	615a      	str	r2, [r3, #20]
 800b7ee:	e7be      	b.n	800b76e <__gethex+0x35e>
 800b7f0:	6922      	ldr	r2, [r4, #16]
 800b7f2:	455a      	cmp	r2, fp
 800b7f4:	dd0b      	ble.n	800b80e <__gethex+0x3fe>
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f7ff fda3 	bl	800b344 <rshift>
 800b7fe:	3701      	adds	r7, #1
 800b800:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b804:	42bb      	cmp	r3, r7
 800b806:	f6ff aee0 	blt.w	800b5ca <__gethex+0x1ba>
 800b80a:	2501      	movs	r5, #1
 800b80c:	e7c2      	b.n	800b794 <__gethex+0x384>
 800b80e:	f016 061f 	ands.w	r6, r6, #31
 800b812:	d0fa      	beq.n	800b80a <__gethex+0x3fa>
 800b814:	4453      	add	r3, sl
 800b816:	f1c6 0620 	rsb	r6, r6, #32
 800b81a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b81e:	f7fd fef3 	bl	8009608 <__hi0bits>
 800b822:	42b0      	cmp	r0, r6
 800b824:	dbe7      	blt.n	800b7f6 <__gethex+0x3e6>
 800b826:	e7f0      	b.n	800b80a <__gethex+0x3fa>
 800b828:	0800c4e9 	.word	0x0800c4e9

0800b82c <L_shift>:
 800b82c:	f1c2 0208 	rsb	r2, r2, #8
 800b830:	0092      	lsls	r2, r2, #2
 800b832:	b570      	push	{r4, r5, r6, lr}
 800b834:	f1c2 0620 	rsb	r6, r2, #32
 800b838:	6843      	ldr	r3, [r0, #4]
 800b83a:	6804      	ldr	r4, [r0, #0]
 800b83c:	fa03 f506 	lsl.w	r5, r3, r6
 800b840:	40d3      	lsrs	r3, r2
 800b842:	432c      	orrs	r4, r5
 800b844:	6004      	str	r4, [r0, #0]
 800b846:	f840 3f04 	str.w	r3, [r0, #4]!
 800b84a:	4288      	cmp	r0, r1
 800b84c:	d3f4      	bcc.n	800b838 <L_shift+0xc>
 800b84e:	bd70      	pop	{r4, r5, r6, pc}

0800b850 <__match>:
 800b850:	6803      	ldr	r3, [r0, #0]
 800b852:	3301      	adds	r3, #1
 800b854:	b530      	push	{r4, r5, lr}
 800b856:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b85a:	b914      	cbnz	r4, 800b862 <__match+0x12>
 800b85c:	6003      	str	r3, [r0, #0]
 800b85e:	2001      	movs	r0, #1
 800b860:	bd30      	pop	{r4, r5, pc}
 800b862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b866:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b86a:	2d19      	cmp	r5, #25
 800b86c:	bf98      	it	ls
 800b86e:	3220      	addls	r2, #32
 800b870:	42a2      	cmp	r2, r4
 800b872:	d0f0      	beq.n	800b856 <__match+0x6>
 800b874:	2000      	movs	r0, #0
 800b876:	e7f3      	b.n	800b860 <__match+0x10>

0800b878 <__hexnan>:
 800b878:	680b      	ldr	r3, [r1, #0]
 800b87a:	6801      	ldr	r1, [r0, #0]
 800b87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b880:	115e      	asrs	r6, r3, #5
 800b882:	f013 031f 	ands.w	r3, r3, #31
 800b886:	f04f 0500 	mov.w	r5, #0
 800b88a:	b087      	sub	sp, #28
 800b88c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b890:	4682      	mov	sl, r0
 800b892:	4690      	mov	r8, r2
 800b894:	46ab      	mov	fp, r5
 800b896:	bf18      	it	ne
 800b898:	3604      	addne	r6, #4
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	9502      	str	r5, [sp, #8]
 800b89e:	1f37      	subs	r7, r6, #4
 800b8a0:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8a4:	46b9      	mov	r9, r7
 800b8a6:	463c      	mov	r4, r7
 800b8a8:	1c4b      	adds	r3, r1, #1
 800b8aa:	784a      	ldrb	r2, [r1, #1]
 800b8ac:	9303      	str	r3, [sp, #12]
 800b8ae:	b342      	cbz	r2, 800b902 <__hexnan+0x8a>
 800b8b0:	4610      	mov	r0, r2
 800b8b2:	9105      	str	r1, [sp, #20]
 800b8b4:	9204      	str	r2, [sp, #16]
 800b8b6:	f7ff fd96 	bl	800b3e6 <__hexdig_fun>
 800b8ba:	2800      	cmp	r0, #0
 800b8bc:	d151      	bne.n	800b962 <__hexnan+0xea>
 800b8be:	9a04      	ldr	r2, [sp, #16]
 800b8c0:	9905      	ldr	r1, [sp, #20]
 800b8c2:	2a20      	cmp	r2, #32
 800b8c4:	d818      	bhi.n	800b8f8 <__hexnan+0x80>
 800b8c6:	9b02      	ldr	r3, [sp, #8]
 800b8c8:	459b      	cmp	fp, r3
 800b8ca:	dd13      	ble.n	800b8f4 <__hexnan+0x7c>
 800b8cc:	454c      	cmp	r4, r9
 800b8ce:	d206      	bcs.n	800b8de <__hexnan+0x66>
 800b8d0:	2d07      	cmp	r5, #7
 800b8d2:	dc04      	bgt.n	800b8de <__hexnan+0x66>
 800b8d4:	462a      	mov	r2, r5
 800b8d6:	4649      	mov	r1, r9
 800b8d8:	4620      	mov	r0, r4
 800b8da:	f7ff ffa7 	bl	800b82c <L_shift>
 800b8de:	4544      	cmp	r4, r8
 800b8e0:	d951      	bls.n	800b986 <__hexnan+0x10e>
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	f1a4 0904 	sub.w	r9, r4, #4
 800b8e8:	f8cd b008 	str.w	fp, [sp, #8]
 800b8ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8f0:	461d      	mov	r5, r3
 800b8f2:	464c      	mov	r4, r9
 800b8f4:	9903      	ldr	r1, [sp, #12]
 800b8f6:	e7d7      	b.n	800b8a8 <__hexnan+0x30>
 800b8f8:	2a29      	cmp	r2, #41	@ 0x29
 800b8fa:	d156      	bne.n	800b9aa <__hexnan+0x132>
 800b8fc:	3102      	adds	r1, #2
 800b8fe:	f8ca 1000 	str.w	r1, [sl]
 800b902:	f1bb 0f00 	cmp.w	fp, #0
 800b906:	d050      	beq.n	800b9aa <__hexnan+0x132>
 800b908:	454c      	cmp	r4, r9
 800b90a:	d206      	bcs.n	800b91a <__hexnan+0xa2>
 800b90c:	2d07      	cmp	r5, #7
 800b90e:	dc04      	bgt.n	800b91a <__hexnan+0xa2>
 800b910:	462a      	mov	r2, r5
 800b912:	4649      	mov	r1, r9
 800b914:	4620      	mov	r0, r4
 800b916:	f7ff ff89 	bl	800b82c <L_shift>
 800b91a:	4544      	cmp	r4, r8
 800b91c:	d935      	bls.n	800b98a <__hexnan+0x112>
 800b91e:	f1a8 0204 	sub.w	r2, r8, #4
 800b922:	4623      	mov	r3, r4
 800b924:	f853 1b04 	ldr.w	r1, [r3], #4
 800b928:	429f      	cmp	r7, r3
 800b92a:	f842 1f04 	str.w	r1, [r2, #4]!
 800b92e:	d2f9      	bcs.n	800b924 <__hexnan+0xac>
 800b930:	1b3b      	subs	r3, r7, r4
 800b932:	3e03      	subs	r6, #3
 800b934:	3401      	adds	r4, #1
 800b936:	2200      	movs	r2, #0
 800b938:	f023 0303 	bic.w	r3, r3, #3
 800b93c:	3304      	adds	r3, #4
 800b93e:	42b4      	cmp	r4, r6
 800b940:	bf88      	it	hi
 800b942:	2304      	movhi	r3, #4
 800b944:	4443      	add	r3, r8
 800b946:	f843 2b04 	str.w	r2, [r3], #4
 800b94a:	429f      	cmp	r7, r3
 800b94c:	d2fb      	bcs.n	800b946 <__hexnan+0xce>
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	b91b      	cbnz	r3, 800b95a <__hexnan+0xe2>
 800b952:	4547      	cmp	r7, r8
 800b954:	d127      	bne.n	800b9a6 <__hexnan+0x12e>
 800b956:	2301      	movs	r3, #1
 800b958:	603b      	str	r3, [r7, #0]
 800b95a:	2005      	movs	r0, #5
 800b95c:	b007      	add	sp, #28
 800b95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b962:	3501      	adds	r5, #1
 800b964:	f10b 0b01 	add.w	fp, fp, #1
 800b968:	2d08      	cmp	r5, #8
 800b96a:	dd05      	ble.n	800b978 <__hexnan+0x100>
 800b96c:	4544      	cmp	r4, r8
 800b96e:	d9c1      	bls.n	800b8f4 <__hexnan+0x7c>
 800b970:	2300      	movs	r3, #0
 800b972:	3c04      	subs	r4, #4
 800b974:	2501      	movs	r5, #1
 800b976:	6023      	str	r3, [r4, #0]
 800b978:	6822      	ldr	r2, [r4, #0]
 800b97a:	f000 000f 	and.w	r0, r0, #15
 800b97e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b982:	6020      	str	r0, [r4, #0]
 800b984:	e7b6      	b.n	800b8f4 <__hexnan+0x7c>
 800b986:	2508      	movs	r5, #8
 800b988:	e7b4      	b.n	800b8f4 <__hexnan+0x7c>
 800b98a:	9b01      	ldr	r3, [sp, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d0de      	beq.n	800b94e <__hexnan+0xd6>
 800b990:	f1c3 0320 	rsb	r3, r3, #32
 800b994:	f04f 32ff 	mov.w	r2, #4294967295
 800b998:	40da      	lsrs	r2, r3
 800b99a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b99e:	4013      	ands	r3, r2
 800b9a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b9a4:	e7d3      	b.n	800b94e <__hexnan+0xd6>
 800b9a6:	3f04      	subs	r7, #4
 800b9a8:	e7d1      	b.n	800b94e <__hexnan+0xd6>
 800b9aa:	2004      	movs	r0, #4
 800b9ac:	e7d6      	b.n	800b95c <__hexnan+0xe4>

0800b9ae <__ascii_mbtowc>:
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	b901      	cbnz	r1, 800b9b4 <__ascii_mbtowc+0x6>
 800b9b2:	a901      	add	r1, sp, #4
 800b9b4:	b142      	cbz	r2, 800b9c8 <__ascii_mbtowc+0x1a>
 800b9b6:	b14b      	cbz	r3, 800b9cc <__ascii_mbtowc+0x1e>
 800b9b8:	7813      	ldrb	r3, [r2, #0]
 800b9ba:	600b      	str	r3, [r1, #0]
 800b9bc:	7812      	ldrb	r2, [r2, #0]
 800b9be:	1e10      	subs	r0, r2, #0
 800b9c0:	bf18      	it	ne
 800b9c2:	2001      	movne	r0, #1
 800b9c4:	b002      	add	sp, #8
 800b9c6:	4770      	bx	lr
 800b9c8:	4610      	mov	r0, r2
 800b9ca:	e7fb      	b.n	800b9c4 <__ascii_mbtowc+0x16>
 800b9cc:	f06f 0001 	mvn.w	r0, #1
 800b9d0:	e7f8      	b.n	800b9c4 <__ascii_mbtowc+0x16>

0800b9d2 <_realloc_r>:
 800b9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d6:	4680      	mov	r8, r0
 800b9d8:	4615      	mov	r5, r2
 800b9da:	460c      	mov	r4, r1
 800b9dc:	b921      	cbnz	r1, 800b9e8 <_realloc_r+0x16>
 800b9de:	4611      	mov	r1, r2
 800b9e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9e4:	f7fd bc90 	b.w	8009308 <_malloc_r>
 800b9e8:	b92a      	cbnz	r2, 800b9f6 <_realloc_r+0x24>
 800b9ea:	f7fd fc19 	bl	8009220 <_free_r>
 800b9ee:	2400      	movs	r4, #0
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9f6:	f000 f840 	bl	800ba7a <_malloc_usable_size_r>
 800b9fa:	4285      	cmp	r5, r0
 800b9fc:	4606      	mov	r6, r0
 800b9fe:	d802      	bhi.n	800ba06 <_realloc_r+0x34>
 800ba00:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ba04:	d8f4      	bhi.n	800b9f0 <_realloc_r+0x1e>
 800ba06:	4629      	mov	r1, r5
 800ba08:	4640      	mov	r0, r8
 800ba0a:	f7fd fc7d 	bl	8009308 <_malloc_r>
 800ba0e:	4607      	mov	r7, r0
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d0ec      	beq.n	800b9ee <_realloc_r+0x1c>
 800ba14:	42b5      	cmp	r5, r6
 800ba16:	462a      	mov	r2, r5
 800ba18:	4621      	mov	r1, r4
 800ba1a:	bf28      	it	cs
 800ba1c:	4632      	movcs	r2, r6
 800ba1e:	f7ff fc47 	bl	800b2b0 <memcpy>
 800ba22:	4621      	mov	r1, r4
 800ba24:	4640      	mov	r0, r8
 800ba26:	463c      	mov	r4, r7
 800ba28:	f7fd fbfa 	bl	8009220 <_free_r>
 800ba2c:	e7e0      	b.n	800b9f0 <_realloc_r+0x1e>

0800ba2e <__ascii_wctomb>:
 800ba2e:	4603      	mov	r3, r0
 800ba30:	4608      	mov	r0, r1
 800ba32:	b141      	cbz	r1, 800ba46 <__ascii_wctomb+0x18>
 800ba34:	2aff      	cmp	r2, #255	@ 0xff
 800ba36:	d904      	bls.n	800ba42 <__ascii_wctomb+0x14>
 800ba38:	228a      	movs	r2, #138	@ 0x8a
 800ba3a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba3e:	601a      	str	r2, [r3, #0]
 800ba40:	4770      	bx	lr
 800ba42:	2001      	movs	r0, #1
 800ba44:	700a      	strb	r2, [r1, #0]
 800ba46:	4770      	bx	lr

0800ba48 <fiprintf>:
 800ba48:	b40e      	push	{r1, r2, r3}
 800ba4a:	b503      	push	{r0, r1, lr}
 800ba4c:	ab03      	add	r3, sp, #12
 800ba4e:	4601      	mov	r1, r0
 800ba50:	4805      	ldr	r0, [pc, #20]	@ (800ba68 <fiprintf+0x20>)
 800ba52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba56:	6800      	ldr	r0, [r0, #0]
 800ba58:	9301      	str	r3, [sp, #4]
 800ba5a:	f7ff f9a5 	bl	800ada8 <_vfiprintf_r>
 800ba5e:	b002      	add	sp, #8
 800ba60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba64:	b003      	add	sp, #12
 800ba66:	4770      	bx	lr
 800ba68:	2000001c 	.word	0x2000001c

0800ba6c <abort>:
 800ba6c:	2006      	movs	r0, #6
 800ba6e:	b508      	push	{r3, lr}
 800ba70:	f000 f834 	bl	800badc <raise>
 800ba74:	2001      	movs	r0, #1
 800ba76:	f7f6 f9fa 	bl	8001e6e <_exit>

0800ba7a <_malloc_usable_size_r>:
 800ba7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba7e:	1f18      	subs	r0, r3, #4
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	bfbc      	itt	lt
 800ba84:	580b      	ldrlt	r3, [r1, r0]
 800ba86:	18c0      	addlt	r0, r0, r3
 800ba88:	4770      	bx	lr

0800ba8a <_raise_r>:
 800ba8a:	291f      	cmp	r1, #31
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4605      	mov	r5, r0
 800ba90:	460c      	mov	r4, r1
 800ba92:	d904      	bls.n	800ba9e <_raise_r+0x14>
 800ba94:	2316      	movs	r3, #22
 800ba96:	6003      	str	r3, [r0, #0]
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	bd38      	pop	{r3, r4, r5, pc}
 800ba9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800baa0:	b112      	cbz	r2, 800baa8 <_raise_r+0x1e>
 800baa2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baa6:	b94b      	cbnz	r3, 800babc <_raise_r+0x32>
 800baa8:	4628      	mov	r0, r5
 800baaa:	f000 f831 	bl	800bb10 <_getpid_r>
 800baae:	4622      	mov	r2, r4
 800bab0:	4601      	mov	r1, r0
 800bab2:	4628      	mov	r0, r5
 800bab4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bab8:	f000 b818 	b.w	800baec <_kill_r>
 800babc:	2b01      	cmp	r3, #1
 800babe:	d00a      	beq.n	800bad6 <_raise_r+0x4c>
 800bac0:	1c59      	adds	r1, r3, #1
 800bac2:	d103      	bne.n	800bacc <_raise_r+0x42>
 800bac4:	2316      	movs	r3, #22
 800bac6:	6003      	str	r3, [r0, #0]
 800bac8:	2001      	movs	r0, #1
 800baca:	e7e7      	b.n	800ba9c <_raise_r+0x12>
 800bacc:	2100      	movs	r1, #0
 800bace:	4620      	mov	r0, r4
 800bad0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bad4:	4798      	blx	r3
 800bad6:	2000      	movs	r0, #0
 800bad8:	e7e0      	b.n	800ba9c <_raise_r+0x12>
	...

0800badc <raise>:
 800badc:	4b02      	ldr	r3, [pc, #8]	@ (800bae8 <raise+0xc>)
 800bade:	4601      	mov	r1, r0
 800bae0:	6818      	ldr	r0, [r3, #0]
 800bae2:	f7ff bfd2 	b.w	800ba8a <_raise_r>
 800bae6:	bf00      	nop
 800bae8:	2000001c 	.word	0x2000001c

0800baec <_kill_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	2300      	movs	r3, #0
 800baf0:	4d06      	ldr	r5, [pc, #24]	@ (800bb0c <_kill_r+0x20>)
 800baf2:	4604      	mov	r4, r0
 800baf4:	4608      	mov	r0, r1
 800baf6:	4611      	mov	r1, r2
 800baf8:	602b      	str	r3, [r5, #0]
 800bafa:	f7f6 f9a8 	bl	8001e4e <_kill>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	d102      	bne.n	800bb08 <_kill_r+0x1c>
 800bb02:	682b      	ldr	r3, [r5, #0]
 800bb04:	b103      	cbz	r3, 800bb08 <_kill_r+0x1c>
 800bb06:	6023      	str	r3, [r4, #0]
 800bb08:	bd38      	pop	{r3, r4, r5, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20000608 	.word	0x20000608

0800bb10 <_getpid_r>:
 800bb10:	f7f6 b995 	b.w	8001e3e <_getpid>

0800bb14 <atan2>:
 800bb14:	f000 b90c 	b.w	800bd30 <__ieee754_atan2>

0800bb18 <sqrt>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	ec55 4b10 	vmov	r4, r5, d0
 800bb1e:	ed2d 8b02 	vpush	{d8}
 800bb22:	f000 f825 	bl	800bb70 <__ieee754_sqrt>
 800bb26:	4622      	mov	r2, r4
 800bb28:	462b      	mov	r3, r5
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	eeb0 8a40 	vmov.f32	s16, s0
 800bb32:	eef0 8a60 	vmov.f32	s17, s1
 800bb36:	f7f5 f80d 	bl	8000b54 <__aeabi_dcmpun>
 800bb3a:	b990      	cbnz	r0, 800bb62 <sqrt+0x4a>
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2300      	movs	r3, #0
 800bb40:	4620      	mov	r0, r4
 800bb42:	4629      	mov	r1, r5
 800bb44:	f7f4 ffde 	bl	8000b04 <__aeabi_dcmplt>
 800bb48:	b158      	cbz	r0, 800bb62 <sqrt+0x4a>
 800bb4a:	f7fc fcd5 	bl	80084f8 <__errno>
 800bb4e:	2321      	movs	r3, #33	@ 0x21
 800bb50:	2200      	movs	r2, #0
 800bb52:	6003      	str	r3, [r0, #0]
 800bb54:	2300      	movs	r3, #0
 800bb56:	4610      	mov	r0, r2
 800bb58:	4619      	mov	r1, r3
 800bb5a:	f7f4 fe8b 	bl	8000874 <__aeabi_ddiv>
 800bb5e:	ec41 0b18 	vmov	d8, r0, r1
 800bb62:	eeb0 0a48 	vmov.f32	s0, s16
 800bb66:	eef0 0a68 	vmov.f32	s1, s17
 800bb6a:	ecbd 8b02 	vpop	{d8}
 800bb6e:	bd38      	pop	{r3, r4, r5, pc}

0800bb70 <__ieee754_sqrt>:
 800bb70:	4a6b      	ldr	r2, [pc, #428]	@ (800bd20 <__ieee754_sqrt+0x1b0>)
 800bb72:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb76:	ec55 4b10 	vmov	r4, r5, d0
 800bb7a:	43aa      	bics	r2, r5
 800bb7c:	462b      	mov	r3, r5
 800bb7e:	4621      	mov	r1, r4
 800bb80:	d110      	bne.n	800bba4 <__ieee754_sqrt+0x34>
 800bb82:	4622      	mov	r2, r4
 800bb84:	4620      	mov	r0, r4
 800bb86:	4629      	mov	r1, r5
 800bb88:	f7f4 fd4a 	bl	8000620 <__aeabi_dmul>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4620      	mov	r0, r4
 800bb92:	4629      	mov	r1, r5
 800bb94:	f7f4 fb8e 	bl	80002b4 <__adddf3>
 800bb98:	4604      	mov	r4, r0
 800bb9a:	460d      	mov	r5, r1
 800bb9c:	ec45 4b10 	vmov	d0, r4, r5
 800bba0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba4:	2d00      	cmp	r5, #0
 800bba6:	dc0e      	bgt.n	800bbc6 <__ieee754_sqrt+0x56>
 800bba8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bbac:	4322      	orrs	r2, r4
 800bbae:	d0f5      	beq.n	800bb9c <__ieee754_sqrt+0x2c>
 800bbb0:	b19d      	cbz	r5, 800bbda <__ieee754_sqrt+0x6a>
 800bbb2:	4622      	mov	r2, r4
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	f7f4 fb7a 	bl	80002b0 <__aeabi_dsub>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	f7f4 fe58 	bl	8000874 <__aeabi_ddiv>
 800bbc4:	e7e8      	b.n	800bb98 <__ieee754_sqrt+0x28>
 800bbc6:	152a      	asrs	r2, r5, #20
 800bbc8:	d115      	bne.n	800bbf6 <__ieee754_sqrt+0x86>
 800bbca:	2000      	movs	r0, #0
 800bbcc:	e009      	b.n	800bbe2 <__ieee754_sqrt+0x72>
 800bbce:	0acb      	lsrs	r3, r1, #11
 800bbd0:	3a15      	subs	r2, #21
 800bbd2:	0549      	lsls	r1, r1, #21
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d0fa      	beq.n	800bbce <__ieee754_sqrt+0x5e>
 800bbd8:	e7f7      	b.n	800bbca <__ieee754_sqrt+0x5a>
 800bbda:	462a      	mov	r2, r5
 800bbdc:	e7fa      	b.n	800bbd4 <__ieee754_sqrt+0x64>
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	02dc      	lsls	r4, r3, #11
 800bbe4:	d5fb      	bpl.n	800bbde <__ieee754_sqrt+0x6e>
 800bbe6:	1e44      	subs	r4, r0, #1
 800bbe8:	1b12      	subs	r2, r2, r4
 800bbea:	f1c0 0420 	rsb	r4, r0, #32
 800bbee:	fa21 f404 	lsr.w	r4, r1, r4
 800bbf2:	4081      	lsls	r1, r0
 800bbf4:	4323      	orrs	r3, r4
 800bbf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbfa:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800bbfe:	07d2      	lsls	r2, r2, #31
 800bc00:	f04f 0600 	mov.w	r6, #0
 800bc04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc08:	ea4f 0565 	mov.w	r5, r5, asr #1
 800bc0c:	f04f 0016 	mov.w	r0, #22
 800bc10:	4632      	mov	r2, r6
 800bc12:	bf58      	it	pl
 800bc14:	005b      	lslpl	r3, r3, #1
 800bc16:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800bc1a:	bf5c      	itt	pl
 800bc1c:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800bc20:	0049      	lslpl	r1, r1, #1
 800bc22:	005b      	lsls	r3, r3, #1
 800bc24:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800bc28:	0049      	lsls	r1, r1, #1
 800bc2a:	1917      	adds	r7, r2, r4
 800bc2c:	429f      	cmp	r7, r3
 800bc2e:	bfde      	ittt	le
 800bc30:	193a      	addle	r2, r7, r4
 800bc32:	1bdb      	suble	r3, r3, r7
 800bc34:	1936      	addle	r6, r6, r4
 800bc36:	0fcf      	lsrs	r7, r1, #31
 800bc38:	3801      	subs	r0, #1
 800bc3a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc3e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800bc42:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bc46:	d1f0      	bne.n	800bc2a <__ieee754_sqrt+0xba>
 800bc48:	4604      	mov	r4, r0
 800bc4a:	2720      	movs	r7, #32
 800bc4c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800bc50:	429a      	cmp	r2, r3
 800bc52:	eb00 0e0c 	add.w	lr, r0, ip
 800bc56:	db02      	blt.n	800bc5e <__ieee754_sqrt+0xee>
 800bc58:	d113      	bne.n	800bc82 <__ieee754_sqrt+0x112>
 800bc5a:	458e      	cmp	lr, r1
 800bc5c:	d811      	bhi.n	800bc82 <__ieee754_sqrt+0x112>
 800bc5e:	f1be 0f00 	cmp.w	lr, #0
 800bc62:	eb0e 000c 	add.w	r0, lr, ip
 800bc66:	da43      	bge.n	800bcf0 <__ieee754_sqrt+0x180>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	db41      	blt.n	800bcf0 <__ieee754_sqrt+0x180>
 800bc6c:	f102 0801 	add.w	r8, r2, #1
 800bc70:	1a9b      	subs	r3, r3, r2
 800bc72:	458e      	cmp	lr, r1
 800bc74:	4464      	add	r4, ip
 800bc76:	eba1 010e 	sub.w	r1, r1, lr
 800bc7a:	bf88      	it	hi
 800bc7c:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800bc80:	4642      	mov	r2, r8
 800bc82:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bc86:	3f01      	subs	r7, #1
 800bc88:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800bc8c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bc90:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bc94:	d1dc      	bne.n	800bc50 <__ieee754_sqrt+0xe0>
 800bc96:	4319      	orrs	r1, r3
 800bc98:	d01b      	beq.n	800bcd2 <__ieee754_sqrt+0x162>
 800bc9a:	f8df a088 	ldr.w	sl, [pc, #136]	@ 800bd24 <__ieee754_sqrt+0x1b4>
 800bc9e:	f8df b088 	ldr.w	fp, [pc, #136]	@ 800bd28 <__ieee754_sqrt+0x1b8>
 800bca2:	e9da 0100 	ldrd	r0, r1, [sl]
 800bca6:	e9db 2300 	ldrd	r2, r3, [fp]
 800bcaa:	e9da 8900 	ldrd	r8, r9, [sl]
 800bcae:	f7f4 faff 	bl	80002b0 <__aeabi_dsub>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	4640      	mov	r0, r8
 800bcb8:	4649      	mov	r1, r9
 800bcba:	f7f4 ff2d 	bl	8000b18 <__aeabi_dcmple>
 800bcbe:	b140      	cbz	r0, 800bcd2 <__ieee754_sqrt+0x162>
 800bcc0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bcc4:	e9da 0100 	ldrd	r0, r1, [sl]
 800bcc8:	e9db 2300 	ldrd	r2, r3, [fp]
 800bccc:	d112      	bne.n	800bcf4 <__ieee754_sqrt+0x184>
 800bcce:	3601      	adds	r6, #1
 800bcd0:	463c      	mov	r4, r7
 800bcd2:	1072      	asrs	r2, r6, #1
 800bcd4:	07f1      	lsls	r1, r6, #31
 800bcd6:	ea4f 0354 	mov.w	r3, r4, lsr #1
 800bcda:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bcde:	bf48      	it	mi
 800bce0:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bce4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bce8:	4618      	mov	r0, r3
 800bcea:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bcee:	e753      	b.n	800bb98 <__ieee754_sqrt+0x28>
 800bcf0:	4690      	mov	r8, r2
 800bcf2:	e7bd      	b.n	800bc70 <__ieee754_sqrt+0x100>
 800bcf4:	e9da 8900 	ldrd	r8, r9, [sl]
 800bcf8:	f7f4 fadc 	bl	80002b4 <__adddf3>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	460b      	mov	r3, r1
 800bd00:	4640      	mov	r0, r8
 800bd02:	4649      	mov	r1, r9
 800bd04:	f7f4 fefe 	bl	8000b04 <__aeabi_dcmplt>
 800bd08:	b128      	cbz	r0, 800bd16 <__ieee754_sqrt+0x1a6>
 800bd0a:	1ca0      	adds	r0, r4, #2
 800bd0c:	f104 0402 	add.w	r4, r4, #2
 800bd10:	bf08      	it	eq
 800bd12:	3601      	addeq	r6, #1
 800bd14:	e7dd      	b.n	800bcd2 <__ieee754_sqrt+0x162>
 800bd16:	1c63      	adds	r3, r4, #1
 800bd18:	f023 0401 	bic.w	r4, r3, #1
 800bd1c:	e7d9      	b.n	800bcd2 <__ieee754_sqrt+0x162>
 800bd1e:	bf00      	nop
 800bd20:	7ff00000 	.word	0x7ff00000
 800bd24:	200001e0 	.word	0x200001e0
 800bd28:	200001d8 	.word	0x200001d8
 800bd2c:	00000000 	.word	0x00000000

0800bd30 <__ieee754_atan2>:
 800bd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd34:	ec57 6b11 	vmov	r6, r7, d1
 800bd38:	4273      	negs	r3, r6
 800bd3a:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800bd3e:	f8df 8178 	ldr.w	r8, [pc, #376]	@ 800beb8 <__ieee754_atan2+0x188>
 800bd42:	4635      	mov	r5, r6
 800bd44:	4333      	orrs	r3, r6
 800bd46:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bd4a:	4543      	cmp	r3, r8
 800bd4c:	ec51 0b10 	vmov	r0, r1, d0
 800bd50:	d809      	bhi.n	800bd66 <__ieee754_atan2+0x36>
 800bd52:	4244      	negs	r4, r0
 800bd54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bd58:	468e      	mov	lr, r1
 800bd5a:	4681      	mov	r9, r0
 800bd5c:	4304      	orrs	r4, r0
 800bd5e:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bd62:	4544      	cmp	r4, r8
 800bd64:	d907      	bls.n	800bd76 <__ieee754_atan2+0x46>
 800bd66:	4632      	mov	r2, r6
 800bd68:	463b      	mov	r3, r7
 800bd6a:	f7f4 faa3 	bl	80002b4 <__adddf3>
 800bd6e:	ec41 0b10 	vmov	d0, r0, r1
 800bd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd76:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800bd7a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800bd7e:	4334      	orrs	r4, r6
 800bd80:	d103      	bne.n	800bd8a <__ieee754_atan2+0x5a>
 800bd82:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd86:	f000 b89b 	b.w	800bec0 <atan>
 800bd8a:	17bc      	asrs	r4, r7, #30
 800bd8c:	ea53 0909 	orrs.w	r9, r3, r9
 800bd90:	f004 0402 	and.w	r4, r4, #2
 800bd94:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bd98:	d107      	bne.n	800bdaa <__ieee754_atan2+0x7a>
 800bd9a:	2c02      	cmp	r4, #2
 800bd9c:	d05f      	beq.n	800be5e <__ieee754_atan2+0x12e>
 800bd9e:	2c03      	cmp	r4, #3
 800bda0:	d1e5      	bne.n	800bd6e <__ieee754_atan2+0x3e>
 800bda2:	a141      	add	r1, pc, #260	@ (adr r1, 800bea8 <__ieee754_atan2+0x178>)
 800bda4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bda8:	e7e1      	b.n	800bd6e <__ieee754_atan2+0x3e>
 800bdaa:	4315      	orrs	r5, r2
 800bdac:	d106      	bne.n	800bdbc <__ieee754_atan2+0x8c>
 800bdae:	f1be 0f00 	cmp.w	lr, #0
 800bdb2:	da5f      	bge.n	800be74 <__ieee754_atan2+0x144>
 800bdb4:	a13e      	add	r1, pc, #248	@ (adr r1, 800beb0 <__ieee754_atan2+0x180>)
 800bdb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdba:	e7d8      	b.n	800bd6e <__ieee754_atan2+0x3e>
 800bdbc:	4542      	cmp	r2, r8
 800bdbe:	d10f      	bne.n	800bde0 <__ieee754_atan2+0xb0>
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdc6:	d107      	bne.n	800bdd8 <__ieee754_atan2+0xa8>
 800bdc8:	2c02      	cmp	r4, #2
 800bdca:	d84c      	bhi.n	800be66 <__ieee754_atan2+0x136>
 800bdcc:	4b34      	ldr	r3, [pc, #208]	@ (800bea0 <__ieee754_atan2+0x170>)
 800bdce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bdd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdd6:	e7ca      	b.n	800bd6e <__ieee754_atan2+0x3e>
 800bdd8:	2c02      	cmp	r4, #2
 800bdda:	d848      	bhi.n	800be6e <__ieee754_atan2+0x13e>
 800bddc:	4b31      	ldr	r3, [pc, #196]	@ (800bea4 <__ieee754_atan2+0x174>)
 800bdde:	e7f6      	b.n	800bdce <__ieee754_atan2+0x9e>
 800bde0:	4543      	cmp	r3, r8
 800bde2:	d0e4      	beq.n	800bdae <__ieee754_atan2+0x7e>
 800bde4:	1a9b      	subs	r3, r3, r2
 800bde6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800bdea:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bdee:	da1e      	bge.n	800be2e <__ieee754_atan2+0xfe>
 800bdf0:	2f00      	cmp	r7, #0
 800bdf2:	da01      	bge.n	800bdf8 <__ieee754_atan2+0xc8>
 800bdf4:	323c      	adds	r2, #60	@ 0x3c
 800bdf6:	db1e      	blt.n	800be36 <__ieee754_atan2+0x106>
 800bdf8:	4632      	mov	r2, r6
 800bdfa:	463b      	mov	r3, r7
 800bdfc:	f7f4 fd3a 	bl	8000874 <__aeabi_ddiv>
 800be00:	ec41 0b10 	vmov	d0, r0, r1
 800be04:	f000 f9f4 	bl	800c1f0 <fabs>
 800be08:	f000 f85a 	bl	800bec0 <atan>
 800be0c:	ec51 0b10 	vmov	r0, r1, d0
 800be10:	2c01      	cmp	r4, #1
 800be12:	d013      	beq.n	800be3c <__ieee754_atan2+0x10c>
 800be14:	2c02      	cmp	r4, #2
 800be16:	d015      	beq.n	800be44 <__ieee754_atan2+0x114>
 800be18:	2c00      	cmp	r4, #0
 800be1a:	d0a8      	beq.n	800bd6e <__ieee754_atan2+0x3e>
 800be1c:	a318      	add	r3, pc, #96	@ (adr r3, 800be80 <__ieee754_atan2+0x150>)
 800be1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be22:	f7f4 fa45 	bl	80002b0 <__aeabi_dsub>
 800be26:	a318      	add	r3, pc, #96	@ (adr r3, 800be88 <__ieee754_atan2+0x158>)
 800be28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2c:	e014      	b.n	800be58 <__ieee754_atan2+0x128>
 800be2e:	a118      	add	r1, pc, #96	@ (adr r1, 800be90 <__ieee754_atan2+0x160>)
 800be30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be34:	e7ec      	b.n	800be10 <__ieee754_atan2+0xe0>
 800be36:	2000      	movs	r0, #0
 800be38:	2100      	movs	r1, #0
 800be3a:	e7e9      	b.n	800be10 <__ieee754_atan2+0xe0>
 800be3c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800be40:	4619      	mov	r1, r3
 800be42:	e794      	b.n	800bd6e <__ieee754_atan2+0x3e>
 800be44:	a30e      	add	r3, pc, #56	@ (adr r3, 800be80 <__ieee754_atan2+0x150>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 fa31 	bl	80002b0 <__aeabi_dsub>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	a10d      	add	r1, pc, #52	@ (adr r1, 800be88 <__ieee754_atan2+0x158>)
 800be54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be58:	f7f4 fa2a 	bl	80002b0 <__aeabi_dsub>
 800be5c:	e787      	b.n	800bd6e <__ieee754_atan2+0x3e>
 800be5e:	a10a      	add	r1, pc, #40	@ (adr r1, 800be88 <__ieee754_atan2+0x158>)
 800be60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be64:	e783      	b.n	800bd6e <__ieee754_atan2+0x3e>
 800be66:	a10c      	add	r1, pc, #48	@ (adr r1, 800be98 <__ieee754_atan2+0x168>)
 800be68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be6c:	e77f      	b.n	800bd6e <__ieee754_atan2+0x3e>
 800be6e:	2000      	movs	r0, #0
 800be70:	2100      	movs	r1, #0
 800be72:	e77c      	b.n	800bd6e <__ieee754_atan2+0x3e>
 800be74:	a106      	add	r1, pc, #24	@ (adr r1, 800be90 <__ieee754_atan2+0x160>)
 800be76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be7a:	e778      	b.n	800bd6e <__ieee754_atan2+0x3e>
 800be7c:	f3af 8000 	nop.w
 800be80:	33145c07 	.word	0x33145c07
 800be84:	3ca1a626 	.word	0x3ca1a626
 800be88:	54442d18 	.word	0x54442d18
 800be8c:	400921fb 	.word	0x400921fb
 800be90:	54442d18 	.word	0x54442d18
 800be94:	3ff921fb 	.word	0x3ff921fb
 800be98:	54442d18 	.word	0x54442d18
 800be9c:	3fe921fb 	.word	0x3fe921fb
 800bea0:	0800c878 	.word	0x0800c878
 800bea4:	0800c860 	.word	0x0800c860
 800bea8:	54442d18 	.word	0x54442d18
 800beac:	c00921fb 	.word	0xc00921fb
 800beb0:	54442d18 	.word	0x54442d18
 800beb4:	bff921fb 	.word	0xbff921fb
 800beb8:	7ff00000 	.word	0x7ff00000
 800bebc:	00000000 	.word	0x00000000

0800bec0 <atan>:
 800bec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec4:	ec55 4b10 	vmov	r4, r5, d0
 800bec8:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800becc:	4bbe      	ldr	r3, [pc, #760]	@ (800c1c8 <atan+0x308>)
 800bece:	46ab      	mov	fp, r5
 800bed0:	429e      	cmp	r6, r3
 800bed2:	d918      	bls.n	800bf06 <atan+0x46>
 800bed4:	4bbd      	ldr	r3, [pc, #756]	@ (800c1cc <atan+0x30c>)
 800bed6:	429e      	cmp	r6, r3
 800bed8:	d801      	bhi.n	800bede <atan+0x1e>
 800beda:	d109      	bne.n	800bef0 <atan+0x30>
 800bedc:	b144      	cbz	r4, 800bef0 <atan+0x30>
 800bede:	4622      	mov	r2, r4
 800bee0:	462b      	mov	r3, r5
 800bee2:	4620      	mov	r0, r4
 800bee4:	4629      	mov	r1, r5
 800bee6:	f7f4 f9e5 	bl	80002b4 <__adddf3>
 800beea:	4604      	mov	r4, r0
 800beec:	460d      	mov	r5, r1
 800beee:	e006      	b.n	800befe <atan+0x3e>
 800bef0:	f1bb 0f00 	cmp.w	fp, #0
 800bef4:	f340 812b 	ble.w	800c14e <atan+0x28e>
 800bef8:	a597      	add	r5, pc, #604	@ (adr r5, 800c158 <atan+0x298>)
 800befa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800befe:	ec45 4b10 	vmov	d0, r4, r5
 800bf02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf06:	4bb2      	ldr	r3, [pc, #712]	@ (800c1d0 <atan+0x310>)
 800bf08:	429e      	cmp	r6, r3
 800bf0a:	d813      	bhi.n	800bf34 <atan+0x74>
 800bf0c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800bf10:	429e      	cmp	r6, r3
 800bf12:	d80c      	bhi.n	800bf2e <atan+0x6e>
 800bf14:	4620      	mov	r0, r4
 800bf16:	4629      	mov	r1, r5
 800bf18:	a391      	add	r3, pc, #580	@ (adr r3, 800c160 <atan+0x2a0>)
 800bf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf1e:	f7f4 f9c9 	bl	80002b4 <__adddf3>
 800bf22:	2200      	movs	r2, #0
 800bf24:	4bab      	ldr	r3, [pc, #684]	@ (800c1d4 <atan+0x314>)
 800bf26:	f7f4 fe0b 	bl	8000b40 <__aeabi_dcmpgt>
 800bf2a:	2800      	cmp	r0, #0
 800bf2c:	d1e7      	bne.n	800befe <atan+0x3e>
 800bf2e:	f04f 3aff 	mov.w	sl, #4294967295
 800bf32:	e029      	b.n	800bf88 <atan+0xc8>
 800bf34:	f000 f95c 	bl	800c1f0 <fabs>
 800bf38:	4ba7      	ldr	r3, [pc, #668]	@ (800c1d8 <atan+0x318>)
 800bf3a:	429e      	cmp	r6, r3
 800bf3c:	ec55 4b10 	vmov	r4, r5, d0
 800bf40:	f200 80bc 	bhi.w	800c0bc <atan+0x1fc>
 800bf44:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800bf48:	429e      	cmp	r6, r3
 800bf4a:	f200 809e 	bhi.w	800c08a <atan+0x1ca>
 800bf4e:	4622      	mov	r2, r4
 800bf50:	462b      	mov	r3, r5
 800bf52:	4620      	mov	r0, r4
 800bf54:	4629      	mov	r1, r5
 800bf56:	f7f4 f9ad 	bl	80002b4 <__adddf3>
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	4b9d      	ldr	r3, [pc, #628]	@ (800c1d4 <atan+0x314>)
 800bf5e:	f04f 0a00 	mov.w	sl, #0
 800bf62:	f7f4 f9a5 	bl	80002b0 <__aeabi_dsub>
 800bf66:	4606      	mov	r6, r0
 800bf68:	460f      	mov	r7, r1
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bf70:	4620      	mov	r0, r4
 800bf72:	4629      	mov	r1, r5
 800bf74:	f7f4 f99e 	bl	80002b4 <__adddf3>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	4639      	mov	r1, r7
 800bf80:	f7f4 fc78 	bl	8000874 <__aeabi_ddiv>
 800bf84:	4604      	mov	r4, r0
 800bf86:	460d      	mov	r5, r1
 800bf88:	4622      	mov	r2, r4
 800bf8a:	462b      	mov	r3, r5
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	4629      	mov	r1, r5
 800bf90:	f7f4 fb46 	bl	8000620 <__aeabi_dmul>
 800bf94:	4602      	mov	r2, r0
 800bf96:	460b      	mov	r3, r1
 800bf98:	4680      	mov	r8, r0
 800bf9a:	4689      	mov	r9, r1
 800bf9c:	f7f4 fb40 	bl	8000620 <__aeabi_dmul>
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	460f      	mov	r7, r1
 800bfa4:	a370      	add	r3, pc, #448	@ (adr r3, 800c168 <atan+0x2a8>)
 800bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfaa:	f7f4 fb39 	bl	8000620 <__aeabi_dmul>
 800bfae:	a370      	add	r3, pc, #448	@ (adr r3, 800c170 <atan+0x2b0>)
 800bfb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb4:	f7f4 f97e 	bl	80002b4 <__adddf3>
 800bfb8:	4632      	mov	r2, r6
 800bfba:	463b      	mov	r3, r7
 800bfbc:	f7f4 fb30 	bl	8000620 <__aeabi_dmul>
 800bfc0:	a36d      	add	r3, pc, #436	@ (adr r3, 800c178 <atan+0x2b8>)
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	f7f4 f975 	bl	80002b4 <__adddf3>
 800bfca:	4632      	mov	r2, r6
 800bfcc:	463b      	mov	r3, r7
 800bfce:	f7f4 fb27 	bl	8000620 <__aeabi_dmul>
 800bfd2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c180 <atan+0x2c0>)
 800bfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfd8:	f7f4 f96c 	bl	80002b4 <__adddf3>
 800bfdc:	4632      	mov	r2, r6
 800bfde:	463b      	mov	r3, r7
 800bfe0:	f7f4 fb1e 	bl	8000620 <__aeabi_dmul>
 800bfe4:	a368      	add	r3, pc, #416	@ (adr r3, 800c188 <atan+0x2c8>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	f7f4 f963 	bl	80002b4 <__adddf3>
 800bfee:	4632      	mov	r2, r6
 800bff0:	463b      	mov	r3, r7
 800bff2:	f7f4 fb15 	bl	8000620 <__aeabi_dmul>
 800bff6:	a366      	add	r3, pc, #408	@ (adr r3, 800c190 <atan+0x2d0>)
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	f7f4 f95a 	bl	80002b4 <__adddf3>
 800c000:	4642      	mov	r2, r8
 800c002:	464b      	mov	r3, r9
 800c004:	f7f4 fb0c 	bl	8000620 <__aeabi_dmul>
 800c008:	4680      	mov	r8, r0
 800c00a:	4689      	mov	r9, r1
 800c00c:	4630      	mov	r0, r6
 800c00e:	4639      	mov	r1, r7
 800c010:	a361      	add	r3, pc, #388	@ (adr r3, 800c198 <atan+0x2d8>)
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	f7f4 fb03 	bl	8000620 <__aeabi_dmul>
 800c01a:	a361      	add	r3, pc, #388	@ (adr r3, 800c1a0 <atan+0x2e0>)
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f7f4 f946 	bl	80002b0 <__aeabi_dsub>
 800c024:	4632      	mov	r2, r6
 800c026:	463b      	mov	r3, r7
 800c028:	f7f4 fafa 	bl	8000620 <__aeabi_dmul>
 800c02c:	a35e      	add	r3, pc, #376	@ (adr r3, 800c1a8 <atan+0x2e8>)
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f7f4 f93d 	bl	80002b0 <__aeabi_dsub>
 800c036:	4632      	mov	r2, r6
 800c038:	463b      	mov	r3, r7
 800c03a:	f7f4 faf1 	bl	8000620 <__aeabi_dmul>
 800c03e:	a35c      	add	r3, pc, #368	@ (adr r3, 800c1b0 <atan+0x2f0>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f7f4 f934 	bl	80002b0 <__aeabi_dsub>
 800c048:	4632      	mov	r2, r6
 800c04a:	463b      	mov	r3, r7
 800c04c:	f7f4 fae8 	bl	8000620 <__aeabi_dmul>
 800c050:	a359      	add	r3, pc, #356	@ (adr r3, 800c1b8 <atan+0x2f8>)
 800c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c056:	f7f4 f92b 	bl	80002b0 <__aeabi_dsub>
 800c05a:	4632      	mov	r2, r6
 800c05c:	463b      	mov	r3, r7
 800c05e:	f7f4 fadf 	bl	8000620 <__aeabi_dmul>
 800c062:	4602      	mov	r2, r0
 800c064:	460b      	mov	r3, r1
 800c066:	4640      	mov	r0, r8
 800c068:	4649      	mov	r1, r9
 800c06a:	f7f4 f923 	bl	80002b4 <__adddf3>
 800c06e:	4622      	mov	r2, r4
 800c070:	462b      	mov	r3, r5
 800c072:	f7f4 fad5 	bl	8000620 <__aeabi_dmul>
 800c076:	f1ba 3fff 	cmp.w	sl, #4294967295
 800c07a:	4602      	mov	r2, r0
 800c07c:	460b      	mov	r3, r1
 800c07e:	d148      	bne.n	800c112 <atan+0x252>
 800c080:	4620      	mov	r0, r4
 800c082:	4629      	mov	r1, r5
 800c084:	f7f4 f914 	bl	80002b0 <__aeabi_dsub>
 800c088:	e72f      	b.n	800beea <atan+0x2a>
 800c08a:	2200      	movs	r2, #0
 800c08c:	4b51      	ldr	r3, [pc, #324]	@ (800c1d4 <atan+0x314>)
 800c08e:	4620      	mov	r0, r4
 800c090:	4629      	mov	r1, r5
 800c092:	f7f4 f90d 	bl	80002b0 <__aeabi_dsub>
 800c096:	4606      	mov	r6, r0
 800c098:	460f      	mov	r7, r1
 800c09a:	2200      	movs	r2, #0
 800c09c:	4b4d      	ldr	r3, [pc, #308]	@ (800c1d4 <atan+0x314>)
 800c09e:	4620      	mov	r0, r4
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	f04f 0a01 	mov.w	sl, #1
 800c0a6:	f7f4 f905 	bl	80002b4 <__adddf3>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4630      	mov	r0, r6
 800c0b0:	4639      	mov	r1, r7
 800c0b2:	f7f4 fbdf 	bl	8000874 <__aeabi_ddiv>
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	460d      	mov	r5, r1
 800c0ba:	e765      	b.n	800bf88 <atan+0xc8>
 800c0bc:	4b47      	ldr	r3, [pc, #284]	@ (800c1dc <atan+0x31c>)
 800c0be:	429e      	cmp	r6, r3
 800c0c0:	d21c      	bcs.n	800c0fc <atan+0x23c>
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	4b46      	ldr	r3, [pc, #280]	@ (800c1e0 <atan+0x320>)
 800c0c6:	4620      	mov	r0, r4
 800c0c8:	4629      	mov	r1, r5
 800c0ca:	f7f4 f8f1 	bl	80002b0 <__aeabi_dsub>
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	4606      	mov	r6, r0
 800c0d2:	460f      	mov	r7, r1
 800c0d4:	4b42      	ldr	r3, [pc, #264]	@ (800c1e0 <atan+0x320>)
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	4629      	mov	r1, r5
 800c0da:	f04f 0a02 	mov.w	sl, #2
 800c0de:	f7f4 fa9f 	bl	8000620 <__aeabi_dmul>
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	4b3b      	ldr	r3, [pc, #236]	@ (800c1d4 <atan+0x314>)
 800c0e6:	f7f4 f8e5 	bl	80002b4 <__adddf3>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	4639      	mov	r1, r7
 800c0f2:	f7f4 fbbf 	bl	8000874 <__aeabi_ddiv>
 800c0f6:	4604      	mov	r4, r0
 800c0f8:	460d      	mov	r5, r1
 800c0fa:	e745      	b.n	800bf88 <atan+0xc8>
 800c0fc:	4622      	mov	r2, r4
 800c0fe:	462b      	mov	r3, r5
 800c100:	2000      	movs	r0, #0
 800c102:	4938      	ldr	r1, [pc, #224]	@ (800c1e4 <atan+0x324>)
 800c104:	f7f4 fbb6 	bl	8000874 <__aeabi_ddiv>
 800c108:	f04f 0a03 	mov.w	sl, #3
 800c10c:	4604      	mov	r4, r0
 800c10e:	460d      	mov	r5, r1
 800c110:	e73a      	b.n	800bf88 <atan+0xc8>
 800c112:	4b35      	ldr	r3, [pc, #212]	@ (800c1e8 <atan+0x328>)
 800c114:	4e35      	ldr	r6, [pc, #212]	@ (800c1ec <atan+0x32c>)
 800c116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c11a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800c11e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c122:	f7f4 f8c5 	bl	80002b0 <__aeabi_dsub>
 800c126:	4622      	mov	r2, r4
 800c128:	462b      	mov	r3, r5
 800c12a:	f7f4 f8c1 	bl	80002b0 <__aeabi_dsub>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	e9d6 0100 	ldrd	r0, r1, [r6]
 800c136:	f7f4 f8bb 	bl	80002b0 <__aeabi_dsub>
 800c13a:	f1bb 0f00 	cmp.w	fp, #0
 800c13e:	4604      	mov	r4, r0
 800c140:	460d      	mov	r5, r1
 800c142:	f6bf aedc 	bge.w	800befe <atan+0x3e>
 800c146:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c14a:	461d      	mov	r5, r3
 800c14c:	e6d7      	b.n	800befe <atan+0x3e>
 800c14e:	a51c      	add	r5, pc, #112	@ (adr r5, 800c1c0 <atan+0x300>)
 800c150:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c154:	e6d3      	b.n	800befe <atan+0x3e>
 800c156:	bf00      	nop
 800c158:	54442d18 	.word	0x54442d18
 800c15c:	3ff921fb 	.word	0x3ff921fb
 800c160:	8800759c 	.word	0x8800759c
 800c164:	7e37e43c 	.word	0x7e37e43c
 800c168:	e322da11 	.word	0xe322da11
 800c16c:	3f90ad3a 	.word	0x3f90ad3a
 800c170:	24760deb 	.word	0x24760deb
 800c174:	3fa97b4b 	.word	0x3fa97b4b
 800c178:	a0d03d51 	.word	0xa0d03d51
 800c17c:	3fb10d66 	.word	0x3fb10d66
 800c180:	c54c206e 	.word	0xc54c206e
 800c184:	3fb745cd 	.word	0x3fb745cd
 800c188:	920083ff 	.word	0x920083ff
 800c18c:	3fc24924 	.word	0x3fc24924
 800c190:	5555550d 	.word	0x5555550d
 800c194:	3fd55555 	.word	0x3fd55555
 800c198:	2c6a6c2f 	.word	0x2c6a6c2f
 800c19c:	bfa2b444 	.word	0xbfa2b444
 800c1a0:	52defd9a 	.word	0x52defd9a
 800c1a4:	3fadde2d 	.word	0x3fadde2d
 800c1a8:	af749a6d 	.word	0xaf749a6d
 800c1ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800c1b0:	fe231671 	.word	0xfe231671
 800c1b4:	3fbc71c6 	.word	0x3fbc71c6
 800c1b8:	9998ebc4 	.word	0x9998ebc4
 800c1bc:	3fc99999 	.word	0x3fc99999
 800c1c0:	54442d18 	.word	0x54442d18
 800c1c4:	bff921fb 	.word	0xbff921fb
 800c1c8:	440fffff 	.word	0x440fffff
 800c1cc:	7ff00000 	.word	0x7ff00000
 800c1d0:	3fdbffff 	.word	0x3fdbffff
 800c1d4:	3ff00000 	.word	0x3ff00000
 800c1d8:	3ff2ffff 	.word	0x3ff2ffff
 800c1dc:	40038000 	.word	0x40038000
 800c1e0:	3ff80000 	.word	0x3ff80000
 800c1e4:	bff00000 	.word	0xbff00000
 800c1e8:	0800c890 	.word	0x0800c890
 800c1ec:	0800c8b0 	.word	0x0800c8b0

0800c1f0 <fabs>:
 800c1f0:	ec51 0b10 	vmov	r0, r1, d0
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c1fa:	ec43 2b10 	vmov	d0, r2, r3
 800c1fe:	4770      	bx	lr

0800c200 <_init>:
 800c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c202:	bf00      	nop
 800c204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c206:	bc08      	pop	{r3}
 800c208:	469e      	mov	lr, r3
 800c20a:	4770      	bx	lr

0800c20c <_fini>:
 800c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20e:	bf00      	nop
 800c210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c212:	bc08      	pop	{r3}
 800c214:	469e      	mov	lr, r3
 800c216:	4770      	bx	lr
